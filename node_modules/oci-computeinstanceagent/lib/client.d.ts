/**
 * Oracle Cloud Agent API
 * API for the Oracle Cloud Agent software running on compute instances. Oracle Cloud Agent
is a lightweight process that monitors and manages compute instances.

 * OpenAPI spec version: 20180530
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { ComputeInstanceAgentWaiter } from "./computeinstanceagent-waiter";
export declare enum ComputeInstanceAgentApiKeys {
}
export declare class ComputeInstanceAgentClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ComputeInstanceAgentWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ComputeInstanceAgentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ComputeInstanceAgentWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ComputeInstanceAgentWaiter;
    /**
       * Cancels a command that is scheduled to run on a compute instance that is managed
  * by Oracle Cloud Agent.
  * <p>
  Canceling a command is a best-effort attempt. If the command has already
  * completed, it will not be canceled.
  *
       * @param CancelInstanceAgentCommandRequest
       * @return CancelInstanceAgentCommandResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/CancelInstanceAgentCommand.ts.html |here} to see how to use CancelInstanceAgentCommand API.
       */
    cancelInstanceAgentCommand(cancelInstanceAgentCommandRequest: requests.CancelInstanceAgentCommandRequest): Promise<responses.CancelInstanceAgentCommandResponse>;
    /**
       * Creates a command or script to run on a compute instance that is managed by Oracle Cloud Agent.
  * <p>
  On Linux instances, the script runs in a bash shell. On Windows instances, the
  * script runs in a batch shell.
  * <p>
  Commands that require administrator privileges will run only if Oracle Cloud Agent
  * is running with administrator privileges.
  *
       * @param CreateInstanceAgentCommandRequest
       * @return CreateInstanceAgentCommandResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/CreateInstanceAgentCommand.ts.html |here} to see how to use CreateInstanceAgentCommand API.
       */
    createInstanceAgentCommand(createInstanceAgentCommandRequest: requests.CreateInstanceAgentCommandRequest): Promise<responses.CreateInstanceAgentCommandResponse>;
    /**
     * Gets information about an Oracle Cloud Agent command.
     * @param GetInstanceAgentCommandRequest
     * @return GetInstanceAgentCommandResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentCommand.ts.html |here} to see how to use GetInstanceAgentCommand API.
     */
    getInstanceAgentCommand(getInstanceAgentCommandRequest: requests.GetInstanceAgentCommandRequest): Promise<responses.GetInstanceAgentCommandResponse>;
    /**
     * Gets information about the status of specified instance agent commandId for the given instanceId.
     * @param GetInstanceAgentCommandExecutionRequest
     * @return GetInstanceAgentCommandExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentCommandExecution.ts.html |here} to see how to use GetInstanceAgentCommandExecution API.
     */
    getInstanceAgentCommandExecution(getInstanceAgentCommandExecutionRequest: requests.GetInstanceAgentCommandExecutionRequest): Promise<responses.GetInstanceAgentCommandExecutionResponse>;
    /**
     * Lists the execution details for Oracle Cloud Agent commands that run on the specified compute
     * instance.
     *
     * @param ListInstanceAgentCommandExecutionsRequest
     * @return ListInstanceAgentCommandExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentCommandExecutions.ts.html |here} to see how to use ListInstanceAgentCommandExecutions API.
     */
    listInstanceAgentCommandExecutions(listInstanceAgentCommandExecutionsRequest: requests.ListInstanceAgentCommandExecutionsRequest): Promise<responses.ListInstanceAgentCommandExecutionsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentCommandExecutionSummary objects
     * contained in responses from the listInstanceAgentCommandExecutions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandExecutions(request: requests.ListInstanceAgentCommandExecutionsRequest): AsyncIterableIterator<models.InstanceAgentCommandExecutionSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentCommandExecutions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandExecutionsResponses(request: requests.ListInstanceAgentCommandExecutionsRequest): AsyncIterableIterator<responses.ListInstanceAgentCommandExecutionsResponse>;
    /**
     * Lists the Oracle Cloud Agent commands issued in a compartment.
     *
     * @param ListInstanceAgentCommandsRequest
     * @return ListInstanceAgentCommandsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentCommands.ts.html |here} to see how to use ListInstanceAgentCommands API.
     */
    listInstanceAgentCommands(listInstanceAgentCommandsRequest: requests.ListInstanceAgentCommandsRequest): Promise<responses.ListInstanceAgentCommandsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentCommandSummary objects
     * contained in responses from the listInstanceAgentCommands operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommands(request: requests.ListInstanceAgentCommandsRequest): AsyncIterableIterator<models.InstanceAgentCommandSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentCommands operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandsResponses(request: requests.ListInstanceAgentCommandsRequest): AsyncIterableIterator<responses.ListInstanceAgentCommandsResponse>;
}
export declare enum PluginApiKeys {
}
export declare class PluginClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * The API to get information for a plugin.
     * @param GetInstanceAgentPluginRequest
     * @return GetInstanceAgentPluginResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentPlugin.ts.html |here} to see how to use GetInstanceAgentPlugin API.
     */
    getInstanceAgentPlugin(getInstanceAgentPluginRequest: requests.GetInstanceAgentPluginRequest): Promise<responses.GetInstanceAgentPluginResponse>;
    /**
     * The API to get one or more plugin information.
     * @param ListInstanceAgentPluginsRequest
     * @return ListInstanceAgentPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentPlugins.ts.html |here} to see how to use ListInstanceAgentPlugins API.
     */
    listInstanceAgentPlugins(listInstanceAgentPluginsRequest: requests.ListInstanceAgentPluginsRequest): Promise<responses.ListInstanceAgentPluginsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentPluginSummary objects
     * contained in responses from the listInstanceAgentPlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentPlugins(request: requests.ListInstanceAgentPluginsRequest): AsyncIterableIterator<models.InstanceAgentPluginSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentPlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentPluginsResponses(request: requests.ListInstanceAgentPluginsRequest): AsyncIterableIterator<responses.ListInstanceAgentPluginsResponse>;
}
export declare enum PluginconfigApiKeys {
}
export declare class PluginconfigClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * The API to get the list of plugins that are available.
     * @param ListInstanceagentAvailablePluginsRequest
     * @return ListInstanceagentAvailablePluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceagentAvailablePlugins.ts.html |here} to see how to use ListInstanceagentAvailablePlugins API.
     */
    listInstanceagentAvailablePlugins(listInstanceagentAvailablePluginsRequest: requests.ListInstanceagentAvailablePluginsRequest): Promise<responses.ListInstanceagentAvailablePluginsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AvailablePluginSummary objects
     * contained in responses from the listInstanceagentAvailablePlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceagentAvailablePlugins(request: requests.ListInstanceagentAvailablePluginsRequest): AsyncIterableIterator<models.AvailablePluginSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceagentAvailablePlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceagentAvailablePluginsResponses(request: requests.ListInstanceagentAvailablePluginsRequest): AsyncIterableIterator<responses.ListInstanceagentAvailablePluginsResponse>;
}
