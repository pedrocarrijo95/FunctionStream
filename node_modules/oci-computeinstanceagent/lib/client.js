"use strict";
/**
 * Oracle Cloud Agent API
 * API for the Oracle Cloud Agent software running on compute instances. Oracle Cloud Agent
is a lightweight process that monitors and manages compute instances.

 * OpenAPI spec version: 20180530
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginconfigClient = exports.PluginconfigApiKeys = exports.PluginClient = exports.PluginApiKeys = exports.ComputeInstanceAgentClient = exports.ComputeInstanceAgentApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const computeinstanceagent_waiter_1 = require("./computeinstanceagent-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ComputeInstanceAgentApiKeys;
(function (ComputeInstanceAgentApiKeys) {
})(ComputeInstanceAgentApiKeys = exports.ComputeInstanceAgentApiKeys || (exports.ComputeInstanceAgentApiKeys = {}));
class ComputeInstanceAgentClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180530";
        if (this.logger)
            this.logger.info(`ComputeInstanceAgentClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputeInstanceAgentClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputeInstanceAgentClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ComputeInstanceAgentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new computeinstanceagent_waiter_1.ComputeInstanceAgentWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
       * Cancels a command that is scheduled to run on a compute instance that is managed
  * by Oracle Cloud Agent.
  * <p>
  Canceling a command is a best-effort attempt. If the command has already
  * completed, it will not be canceled.
  *
       * @param CancelInstanceAgentCommandRequest
       * @return CancelInstanceAgentCommandResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/CancelInstanceAgentCommand.ts.html |here} to see how to use CancelInstanceAgentCommand API.
       */
    cancelInstanceAgentCommand(cancelInstanceAgentCommandRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#cancelInstanceAgentCommand.");
            const pathParams = {
                "{instanceAgentCommandId}": cancelInstanceAgentCommandRequest.instanceAgentCommandId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelInstanceAgentCommandRequest.opcRequestId,
                "if-match": cancelInstanceAgentCommandRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommands/{instanceAgentCommandId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, cancelInstanceAgentCommandRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a command or script to run on a compute instance that is managed by Oracle Cloud Agent.
  * <p>
  On Linux instances, the script runs in a bash shell. On Windows instances, the
  * script runs in a batch shell.
  * <p>
  Commands that require administrator privileges will run only if Oracle Cloud Agent
  * is running with administrator privileges.
  *
       * @param CreateInstanceAgentCommandRequest
       * @return CreateInstanceAgentCommandResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/CreateInstanceAgentCommand.ts.html |here} to see how to use CreateInstanceAgentCommand API.
       */
    createInstanceAgentCommand(createInstanceAgentCommandRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#createInstanceAgentCommand.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createInstanceAgentCommandRequest.opcRequestId,
                "opc-retry-token": createInstanceAgentCommandRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommands",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInstanceAgentCommandRequest.createInstanceAgentCommandDetails, "CreateInstanceAgentCommandDetails", models.CreateInstanceAgentCommandDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createInstanceAgentCommandRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceAgentCommand",
                    bodyModel: "model.InstanceAgentCommand",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about an Oracle Cloud Agent command.
     * @param GetInstanceAgentCommandRequest
     * @return GetInstanceAgentCommandResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentCommand.ts.html |here} to see how to use GetInstanceAgentCommand API.
     */
    getInstanceAgentCommand(getInstanceAgentCommandRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#getInstanceAgentCommand.");
            const pathParams = {
                "{instanceAgentCommandId}": getInstanceAgentCommandRequest.instanceAgentCommandId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInstanceAgentCommandRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommands/{instanceAgentCommandId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceAgentCommandRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceAgentCommand",
                    bodyModel: "model.InstanceAgentCommand",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the status of specified instance agent commandId for the given instanceId.
     * @param GetInstanceAgentCommandExecutionRequest
     * @return GetInstanceAgentCommandExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentCommandExecution.ts.html |here} to see how to use GetInstanceAgentCommandExecution API.
     */
    getInstanceAgentCommandExecution(getInstanceAgentCommandExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#getInstanceAgentCommandExecution.");
            const pathParams = {
                "{instanceAgentCommandId}": getInstanceAgentCommandExecutionRequest.instanceAgentCommandId
            };
            const queryParams = {
                "instanceId": getInstanceAgentCommandExecutionRequest.instanceId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInstanceAgentCommandExecutionRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommands/{instanceAgentCommandId}/status",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceAgentCommandExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceAgentCommandExecution",
                    bodyModel: "model.InstanceAgentCommandExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the execution details for Oracle Cloud Agent commands that run on the specified compute
     * instance.
     *
     * @param ListInstanceAgentCommandExecutionsRequest
     * @return ListInstanceAgentCommandExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentCommandExecutions.ts.html |here} to see how to use ListInstanceAgentCommandExecutions API.
     */
    listInstanceAgentCommandExecutions(listInstanceAgentCommandExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#listInstanceAgentCommandExecutions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstanceAgentCommandExecutionsRequest.compartmentId,
                "instanceId": listInstanceAgentCommandExecutionsRequest.instanceId,
                "page": listInstanceAgentCommandExecutionsRequest.page,
                "limit": listInstanceAgentCommandExecutionsRequest.limit,
                "sortBy": listInstanceAgentCommandExecutionsRequest.sortBy,
                "sortOrder": listInstanceAgentCommandExecutionsRequest.sortOrder,
                "lifecycleState": listInstanceAgentCommandExecutionsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInstanceAgentCommandExecutionsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommandExecutions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceAgentCommandExecutionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceAgentCommandExecutionSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentCommandExecutionSummary objects
     * contained in responses from the listInstanceAgentCommandExecutions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandExecutions(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceAgentCommandExecutions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentCommandExecutions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandExecutionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceAgentCommandExecutions(req));
    }
    /**
     * Lists the Oracle Cloud Agent commands issued in a compartment.
     *
     * @param ListInstanceAgentCommandsRequest
     * @return ListInstanceAgentCommandsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentCommands.ts.html |here} to see how to use ListInstanceAgentCommands API.
     */
    listInstanceAgentCommands(listInstanceAgentCommandsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeInstanceAgentClient#listInstanceAgentCommands.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstanceAgentCommandsRequest.compartmentId,
                "page": listInstanceAgentCommandsRequest.page,
                "limit": listInstanceAgentCommandsRequest.limit,
                "sortBy": listInstanceAgentCommandsRequest.sortBy,
                "sortOrder": listInstanceAgentCommandsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInstanceAgentCommandsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceAgentCommands",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceAgentCommandsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceAgentCommandSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentCommandSummary objects
     * contained in responses from the listInstanceAgentCommands operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommands(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceAgentCommands(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentCommands operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentCommandsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceAgentCommands(req));
    }
}
exports.ComputeInstanceAgentClient = ComputeInstanceAgentClient;
ComputeInstanceAgentClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
var PluginApiKeys;
(function (PluginApiKeys) {
})(PluginApiKeys = exports.PluginApiKeys || (exports.PluginApiKeys = {}));
class PluginClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180530";
        if (this.logger)
            this.logger.info(`PluginClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(PluginClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(PluginClient.serviceEndpointTemplate, regionId);
    }
    /**
     * The API to get information for a plugin.
     * @param GetInstanceAgentPluginRequest
     * @return GetInstanceAgentPluginResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/GetInstanceAgentPlugin.ts.html |here} to see how to use GetInstanceAgentPlugin API.
     */
    getInstanceAgentPlugin(getInstanceAgentPluginRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation PluginClient#getInstanceAgentPlugin.");
            const pathParams = {
                "{instanceagentId}": getInstanceAgentPluginRequest.instanceagentId,
                "{pluginName}": getInstanceAgentPluginRequest.pluginName
            };
            const queryParams = {
                "compartmentId": getInstanceAgentPluginRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getInstanceAgentPluginRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceagents/{instanceagentId}/plugins/{pluginName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceAgentPluginRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceAgentPlugin",
                    bodyModel: "model.InstanceAgentPlugin",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The API to get one or more plugin information.
     * @param ListInstanceAgentPluginsRequest
     * @return ListInstanceAgentPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceAgentPlugins.ts.html |here} to see how to use ListInstanceAgentPlugins API.
     */
    listInstanceAgentPlugins(listInstanceAgentPluginsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation PluginClient#listInstanceAgentPlugins.");
            const pathParams = {
                "{instanceagentId}": listInstanceAgentPluginsRequest.instanceagentId
            };
            const queryParams = {
                "compartmentId": listInstanceAgentPluginsRequest.compartmentId,
                "status": listInstanceAgentPluginsRequest.status,
                "page": listInstanceAgentPluginsRequest.page,
                "limit": listInstanceAgentPluginsRequest.limit,
                "sortBy": listInstanceAgentPluginsRequest.sortBy,
                "sortOrder": listInstanceAgentPluginsRequest.sortOrder,
                "name": listInstanceAgentPluginsRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInstanceAgentPluginsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceagents/{instanceagentId}/plugins",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceAgentPluginsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceAgentPluginSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceAgentPluginSummary objects
     * contained in responses from the listInstanceAgentPlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentPlugins(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceAgentPlugins(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceAgentPlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceAgentPluginsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceAgentPlugins(req));
    }
}
exports.PluginClient = PluginClient;
PluginClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
var PluginconfigApiKeys;
(function (PluginconfigApiKeys) {
})(PluginconfigApiKeys = exports.PluginconfigApiKeys || (exports.PluginconfigApiKeys = {}));
class PluginconfigClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180530";
        if (this.logger)
            this.logger.info(`PluginconfigClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(PluginconfigClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(PluginconfigClient.serviceEndpointTemplate, regionId);
    }
    /**
     * The API to get the list of plugins that are available.
     * @param ListInstanceagentAvailablePluginsRequest
     * @return ListInstanceagentAvailablePluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/computeinstanceagent/ListInstanceagentAvailablePlugins.ts.html |here} to see how to use ListInstanceagentAvailablePlugins API.
     */
    listInstanceagentAvailablePlugins(listInstanceagentAvailablePluginsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation PluginconfigClient#listInstanceagentAvailablePlugins.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstanceagentAvailablePluginsRequest.compartmentId,
                "page": listInstanceagentAvailablePluginsRequest.page,
                "limit": listInstanceagentAvailablePluginsRequest.limit,
                "osName": listInstanceagentAvailablePluginsRequest.osName,
                "osVersion": listInstanceagentAvailablePluginsRequest.osVersion,
                "sortBy": listInstanceagentAvailablePluginsRequest.sortBy,
                "sortOrder": listInstanceagentAvailablePluginsRequest.sortOrder,
                "name": listInstanceagentAvailablePluginsRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInstanceagentAvailablePluginsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceagent/availablePlugins",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceagentAvailablePluginsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AvailablePluginSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AvailablePluginSummary objects
     * contained in responses from the listInstanceagentAvailablePlugins operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceagentAvailablePlugins(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceagentAvailablePlugins(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceagentAvailablePlugins operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceagentAvailablePluginsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceagentAvailablePlugins(req));
    }
}
exports.PluginconfigClient = PluginconfigClient;
PluginconfigClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map