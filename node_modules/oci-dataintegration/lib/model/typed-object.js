"use strict";
/**
 * Data Integration API
 * Use the Data Integration Service APIs to perform common extract, load, and transform (ETL) tasks.
 * OpenAPI spec version: 20200430
 * Contact: di_dis_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedObject = void 0;
const model = __importStar(require("../model"));
var TypedObject;
(function (TypedObject) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "parentRef": obj.parentRef ? model.ParentReference.getJsonObj(obj.parentRef) : undefined,
            "configValues": obj.configValues
                ? model.ConfigValues.getJsonObj(obj.configValues)
                : undefined
        });
        if ("modelType" in obj && obj.modelType) {
            switch (obj.modelType) {
                case "OUTPUT_PORT":
                    return model.OutputPort.getJsonObj(jsonObj, true);
                case "DYNAMIC_INPUT_FIELD":
                    return model.DynamicInputField.getJsonObj(jsonObj, true);
                case "FIELD":
                    return model.AbstractField.getJsonObj(jsonObj, true);
                case "INPUT_FIELD":
                    return model.InputField.getJsonObj(jsonObj, true);
                case "SHAPE":
                    return model.Shape.getJsonObj(jsonObj, true);
                case "INPUT_PORT":
                    return model.InputPort.getJsonObj(jsonObj, true);
                case "PROXY_FIELD":
                    return model.ProxyField.getJsonObj(jsonObj, true);
                case "DYNAMIC_PROXY_FIELD":
                    return model.DynamicProxyField.getJsonObj(jsonObj, true);
                case "SHAPE_FIELD":
                    return model.ShapeField.getJsonObj(jsonObj, true);
                case "PARAMETER":
                    return model.Parameter.getJsonObj(jsonObj, true);
                case "OUTPUT_FIELD":
                    return model.OutputField.getJsonObj(jsonObj, true);
                case "MACRO_FIELD":
                    return model.MacroField.getJsonObj(jsonObj, true);
                case "DERIVED_FIELD":
                    return model.DerivedField.getJsonObj(jsonObj, true);
                case "FLOW_PORT":
                    return model.FlowPort.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.modelType);
            }
        }
        return jsonObj;
    }
    TypedObject.getJsonObj = getJsonObj;
})(TypedObject = exports.TypedObject || (exports.TypedObject = {}));
//# sourceMappingURL=typed-object.js.map