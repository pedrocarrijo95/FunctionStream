/**
 * Apm Traces API
 * API for APM Trace service. Use this API to query the Traces and associated Spans.

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
export declare enum QueryApiKeys {
}
export declare class QueryClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Returns a list of predefined quick pick queries intended to assist the user
     * to choose a query to run.  There is no sorting applied on the results.
     *
     * @param ListQuickPicksRequest
     * @return ListQuickPicksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/apmtraces/ListQuickPicks.ts.html |here} to see how to use ListQuickPicks API.
     */
    listQuickPicks(listQuickPicksRequest: requests.ListQuickPicksRequest): Promise<responses.ListQuickPicksResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.QuickPickSummary objects
     * contained in responses from the listQuickPicks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicks(request: requests.ListQuickPicksRequest): AsyncIterableIterator<models.QuickPickSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listQuickPicks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllQuickPicksResponses(request: requests.ListQuickPicksRequest): AsyncIterableIterator<responses.ListQuickPicksResponse>;
    /**
     * Given a query, constructed according to the APM Defined Query Syntax, retrieves the results - selected attributes,
     * and aggregations of the queried entity.  Query Results are filtered by the filter criteria specified in the where clause.
     * Further query results are grouped by the attributes specified in the group by clause.  Finally,
     * ordering (asc/desc) is done by the specified attributes in the order by clause.
     *
     * @param QueryRequest
     * @return QueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/apmtraces/Query.ts.html |here} to see how to use Query API.
     */
    query(queryRequest: requests.QueryRequest): Promise<responses.QueryResponse>;
    /**
     * THIS API ENDPOINT WILL BE DEPRECATED AND INSTEAD /queries/actions/runQuery as defined below WILL BE USED GOING FORWARD.  THIS EXISTS JUST
     * AS A TEMPORARY PLACEHOLDER SO AS TO BE BACKWARDS COMPATIBLE WITH THE UI BETWEEN RELEASE CYCLES.
     * Given a query, constructed according to the APM Defined Query Syntax, retrieves the results - selected attributes,
     * and aggregations of the queried entity.  Query Results are filtered by the filter criteria specified in the where clause.
     * Further query results are grouped by the attributes specified in the group by clause.  Finally,
     * ordering (asc/desc) is done by the specified attributes in the order by clause.
     *
     * @param QueryOldRequest
     * @return QueryOldResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/apmtraces/QueryOld.ts.html |here} to see how to use QueryOld API.
     */
    queryOld(queryOldRequest: requests.QueryOldRequest): Promise<responses.QueryOldResponse>;
}
export declare enum TraceApiKeys {
}
export declare class TraceClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Get the span details identified by spanId
     *
     * @param GetSpanRequest
     * @return GetSpanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/apmtraces/GetSpan.ts.html |here} to see how to use GetSpan API.
     */
    getSpan(getSpanRequest: requests.GetSpanRequest): Promise<responses.GetSpanResponse>;
    /**
     * Get the trace details identified by traceId
     *
     * @param GetTraceRequest
     * @return GetTraceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/apmtraces/GetTrace.ts.html |here} to see how to use GetTrace API.
     */
    getTrace(getTraceRequest: requests.GetTraceRequest): Promise<responses.GetTraceResponse>;
}
