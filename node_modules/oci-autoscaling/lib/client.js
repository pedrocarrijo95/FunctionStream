"use strict";
/**
 * Autoscaling API
 * APIs for dynamically scaling Compute resources to meet application requirements. For more information about
autoscaling, see [Autoscaling](/Content/Compute/Tasks/autoscalinginstancepools.htm). For information about the
Compute service, see [Overview of the Compute Service](/Content/Compute/Concepts/computeoverview.htm).

**Note:** Autoscaling is not available in US Government Cloud tenancies. For more information, see
[Oracle Cloud Infrastructure US Government Cloud](/Content/General/Concepts/govoverview.htm).

 * OpenAPI spec version: 20181001
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutoScalingClient = exports.AutoScalingApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var AutoScalingApiKeys;
(function (AutoScalingApiKeys) {
})(AutoScalingApiKeys = exports.AutoScalingApiKeys || (exports.AutoScalingApiKeys = {}));
class AutoScalingClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20181001";
        if (this.logger)
            this.logger.info(`AutoScalingClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(AutoScalingClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(AutoScalingClient.serviceEndpointTemplate, regionId);
    }
    /**
       * Moves an autoscaling configuration into a different compartment within the same tenancy. For information
  * about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When you move an autoscaling configuration to a different compartment, associated resources such as instance
  * pools are not moved.
  *
       * @param ChangeAutoScalingConfigurationCompartmentRequest
       * @return ChangeAutoScalingConfigurationCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/ChangeAutoScalingConfigurationCompartment.ts.html |here} to see how to use ChangeAutoScalingConfigurationCompartment API.
       */
    changeAutoScalingConfigurationCompartment(changeAutoScalingConfigurationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#changeAutoScalingConfigurationCompartment.");
            const pathParams = {
                "{autoScalingConfigurationId}": changeAutoScalingConfigurationCompartmentRequest.autoScalingConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeAutoScalingConfigurationCompartmentRequest.opcRequestId,
                "if-match": changeAutoScalingConfigurationCompartmentRequest.ifMatch,
                "opc-retry-token": changeAutoScalingConfigurationCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAutoScalingConfigurationCompartmentRequest.changeCompartmentDetails, "ChangeAutoScalingCompartmentDetails", models.ChangeAutoScalingCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeAutoScalingConfigurationCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an autoscaling configuration.
     * @param CreateAutoScalingConfigurationRequest
     * @return CreateAutoScalingConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/CreateAutoScalingConfiguration.ts.html |here} to see how to use CreateAutoScalingConfiguration API.
     */
    createAutoScalingConfiguration(createAutoScalingConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#createAutoScalingConfiguration.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAutoScalingConfigurationRequest.opcRequestId,
                "opc-retry-token": createAutoScalingConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAutoScalingConfigurationRequest.createAutoScalingConfigurationDetails, "CreateAutoScalingConfigurationDetails", models.CreateAutoScalingConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createAutoScalingConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingConfiguration",
                    bodyModel: "model.AutoScalingConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates an autoscaling policy for the specified autoscaling configuration.
  * <p>
  You can create the following types of autoscaling policies:
  * <p>
  - **Schedule-based:** Autoscaling events take place at the specific times that you schedule.
  * - **Threshold-based:** An autoscaling action is triggered when a performance metric meets or exceeds a threshold.
  * <p>
  An autoscaling configuration can either have multiple schedule-based autoscaling policies, or one
  * threshold-based autoscaling policy.
  *
       * @param CreateAutoScalingPolicyRequest
       * @return CreateAutoScalingPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/CreateAutoScalingPolicy.ts.html |here} to see how to use CreateAutoScalingPolicy API.
       */
    createAutoScalingPolicy(createAutoScalingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#createAutoScalingPolicy.");
            const pathParams = {
                "{autoScalingConfigurationId}": createAutoScalingPolicyRequest.autoScalingConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAutoScalingPolicyRequest.opcRequestId,
                "opc-retry-token": createAutoScalingPolicyRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAutoScalingPolicyRequest.createAutoScalingPolicyDetails, "CreateAutoScalingPolicyDetails", models.CreateAutoScalingPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createAutoScalingPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingPolicy",
                    bodyModel: "model.AutoScalingPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an autoscaling configuration.
     * @param DeleteAutoScalingConfigurationRequest
     * @return DeleteAutoScalingConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/DeleteAutoScalingConfiguration.ts.html |here} to see how to use DeleteAutoScalingConfiguration API.
     */
    deleteAutoScalingConfiguration(deleteAutoScalingConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#deleteAutoScalingConfiguration.");
            const pathParams = {
                "{autoScalingConfigurationId}": deleteAutoScalingConfigurationRequest.autoScalingConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAutoScalingConfigurationRequest.ifMatch,
                "opc-request-id": deleteAutoScalingConfigurationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAutoScalingConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an autoscaling policy for the specified autoscaling configuration.
     * @param DeleteAutoScalingPolicyRequest
     * @return DeleteAutoScalingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/DeleteAutoScalingPolicy.ts.html |here} to see how to use DeleteAutoScalingPolicy API.
     */
    deleteAutoScalingPolicy(deleteAutoScalingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#deleteAutoScalingPolicy.");
            const pathParams = {
                "{autoScalingConfigurationId}": deleteAutoScalingPolicyRequest.autoScalingConfigurationId,
                "{autoScalingPolicyId}": deleteAutoScalingPolicyRequest.autoScalingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAutoScalingPolicyRequest.ifMatch,
                "opc-request-id": deleteAutoScalingPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAutoScalingPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified autoscaling configuration.
     * @param GetAutoScalingConfigurationRequest
     * @return GetAutoScalingConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/GetAutoScalingConfiguration.ts.html |here} to see how to use GetAutoScalingConfiguration API.
     */
    getAutoScalingConfiguration(getAutoScalingConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#getAutoScalingConfiguration.");
            const pathParams = {
                "{autoScalingConfigurationId}": getAutoScalingConfigurationRequest.autoScalingConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAutoScalingConfigurationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAutoScalingConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingConfiguration",
                    bodyModel: "model.AutoScalingConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified autoscaling policy in the specified autoscaling configuration.
     * @param GetAutoScalingPolicyRequest
     * @return GetAutoScalingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/GetAutoScalingPolicy.ts.html |here} to see how to use GetAutoScalingPolicy API.
     */
    getAutoScalingPolicy(getAutoScalingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#getAutoScalingPolicy.");
            const pathParams = {
                "{autoScalingConfigurationId}": getAutoScalingPolicyRequest.autoScalingConfigurationId,
                "{autoScalingPolicyId}": getAutoScalingPolicyRequest.autoScalingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAutoScalingPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAutoScalingPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingPolicy",
                    bodyModel: "model.AutoScalingPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists autoscaling configurations in the specifed compartment.
     *
     * @param ListAutoScalingConfigurationsRequest
     * @return ListAutoScalingConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/ListAutoScalingConfigurations.ts.html |here} to see how to use ListAutoScalingConfigurations API.
     */
    listAutoScalingConfigurations(listAutoScalingConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#listAutoScalingConfigurations.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAutoScalingConfigurationsRequest.compartmentId,
                "displayName": listAutoScalingConfigurationsRequest.displayName,
                "limit": listAutoScalingConfigurationsRequest.limit,
                "page": listAutoScalingConfigurationsRequest.page,
                "sortBy": listAutoScalingConfigurationsRequest.sortBy,
                "sortOrder": listAutoScalingConfigurationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAutoScalingConfigurationsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAutoScalingConfigurationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AutoScalingConfigurationSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AutoScalingConfigurationSummary objects
     * contained in responses from the listAutoScalingConfigurations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAutoScalingConfigurations(request) {
        return oci_common_1.paginateRecords(request, req => this.listAutoScalingConfigurations(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAutoScalingConfigurations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAutoScalingConfigurationsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAutoScalingConfigurations(req));
    }
    /**
     * Lists the autoscaling policies in the specified autoscaling configuration.
     *
     * @param ListAutoScalingPoliciesRequest
     * @return ListAutoScalingPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/ListAutoScalingPolicies.ts.html |here} to see how to use ListAutoScalingPolicies API.
     */
    listAutoScalingPolicies(listAutoScalingPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#listAutoScalingPolicies.");
            const pathParams = {
                "{autoScalingConfigurationId}": listAutoScalingPoliciesRequest.autoScalingConfigurationId
            };
            const queryParams = {
                "displayName": listAutoScalingPoliciesRequest.displayName,
                "limit": listAutoScalingPoliciesRequest.limit,
                "page": listAutoScalingPoliciesRequest.page,
                "sortBy": listAutoScalingPoliciesRequest.sortBy,
                "sortOrder": listAutoScalingPoliciesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAutoScalingPoliciesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAutoScalingPoliciesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AutoScalingPolicySummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AutoScalingPolicySummary objects
     * contained in responses from the listAutoScalingPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAutoScalingPolicies(request) {
        return oci_common_1.paginateRecords(request, req => this.listAutoScalingPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAutoScalingPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAutoScalingPoliciesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAutoScalingPolicies(req));
    }
    /**
     * Updates certain fields on the specified autoscaling configuration, such as the name, the cooldown period,
     * and whether the autoscaling configuration is enabled.
     *
     * @param UpdateAutoScalingConfigurationRequest
     * @return UpdateAutoScalingConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/UpdateAutoScalingConfiguration.ts.html |here} to see how to use UpdateAutoScalingConfiguration API.
     */
    updateAutoScalingConfiguration(updateAutoScalingConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#updateAutoScalingConfiguration.");
            const pathParams = {
                "{autoScalingConfigurationId}": updateAutoScalingConfigurationRequest.autoScalingConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAutoScalingConfigurationRequest.ifMatch,
                "opc-request-id": updateAutoScalingConfigurationRequest.opcRequestId,
                "opc-retry-token": updateAutoScalingConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAutoScalingConfigurationRequest.updateAutoScalingConfigurationDetails, "UpdateAutoScalingConfigurationDetails", models.UpdateAutoScalingConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateAutoScalingConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingConfiguration",
                    bodyModel: "model.AutoScalingConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates an autoscaling policy in the specified autoscaling configuration.
     * @param UpdateAutoScalingPolicyRequest
     * @return UpdateAutoScalingPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/autoscaling/UpdateAutoScalingPolicy.ts.html |here} to see how to use UpdateAutoScalingPolicy API.
     */
    updateAutoScalingPolicy(updateAutoScalingPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation AutoScalingClient#updateAutoScalingPolicy.");
            const pathParams = {
                "{autoScalingConfigurationId}": updateAutoScalingPolicyRequest.autoScalingConfigurationId,
                "{autoScalingPolicyId}": updateAutoScalingPolicyRequest.autoScalingPolicyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAutoScalingPolicyRequest.ifMatch,
                "opc-request-id": updateAutoScalingPolicyRequest.opcRequestId,
                "opc-retry-token": updateAutoScalingPolicyRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/autoScalingConfigurations/{autoScalingConfigurationId}/policies/{autoScalingPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAutoScalingPolicyRequest.updateAutoScalingPolicyDetails, "UpdateAutoScalingPolicyDetails", models.UpdateAutoScalingPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateAutoScalingPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoScalingPolicy",
                    bodyModel: "model.AutoScalingPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.AutoScalingClient = AutoScalingClient;
AutoScalingClient.serviceEndpointTemplate = "https://autoscaling.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map