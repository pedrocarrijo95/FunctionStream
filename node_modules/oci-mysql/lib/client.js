"use strict";
/**
 * MySQL Database Service API
 * The API for the MySQL Database Service
 * OpenAPI spec version: 20190415
 * Contact: mysql-cloud-dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkRequestsClient = exports.WorkRequestsApiKeys = exports.MysqlaasClient = exports.MysqlaasApiKeys = exports.DbSystemClient = exports.DbSystemApiKeys = exports.DbBackupsClient = exports.DbBackupsApiKeys = exports.ChannelsClient = exports.ChannelsApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const channels_waiter_1 = require("./channels-waiter");
const dbbackups_waiter_1 = require("./dbbackups-waiter");
const dbsystem_waiter_1 = require("./dbsystem-waiter");
const mysqlaas_waiter_1 = require("./mysqlaas-waiter");
const workrequests_waiter_1 = require("./workrequests-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ChannelsApiKeys;
(function (ChannelsApiKeys) {
})(ChannelsApiKeys = exports.ChannelsApiKeys || (exports.ChannelsApiKeys = {}));
class ChannelsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190415";
        if (this.logger)
            this.logger.info(`ChannelsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ChannelsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ChannelsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ChannelsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new channels_waiter_1.ChannelsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Creates a Channel to establish replication from a source to a target.
     *
     * @param CreateChannelRequest
     * @return CreateChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateChannel.ts.html |here} to see how to use CreateChannel API.
     */
    createChannel(createChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#createChannel.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createChannelRequest.opcRequestId,
                "opc-retry-token": createChannelRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createChannelRequest.createChannelDetails, "CreateChannelDetails", models.CreateChannelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "channel",
                    bodyModel: "model.Channel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified Channel.
     * @param DeleteChannelRequest
     * @return DeleteChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteChannel.ts.html |here} to see how to use DeleteChannel API.
     */
    deleteChannel(deleteChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#deleteChannel.");
            const pathParams = {
                "{channelId}": deleteChannelRequest.channelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteChannelRequest.ifMatch,
                "opc-request-id": deleteChannelRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels/{channelId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the full details of the specified Channel, including the user-specified
     * configuration parameters (passwords are omitted), as well as information about
     * the state of the Channel, its sources and targets.
     *
     * @param GetChannelRequest
     * @return GetChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetChannel.ts.html |here} to see how to use GetChannel API.
     */
    getChannel(getChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#getChannel.");
            const pathParams = {
                "{channelId}": getChannelRequest.channelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getChannelRequest.opcRequestId,
                "if-none-match": getChannelRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels/{channelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "channel",
                    bodyModel: "model.Channel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all the Channels that match the specified filters.
     * @param ListChannelsRequest
     * @return ListChannelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListChannels.ts.html |here} to see how to use ListChannels API.
     */
    listChannels(listChannelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#listChannels.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listChannelsRequest.compartmentId,
                "dbSystemId": listChannelsRequest.dbSystemId,
                "channelId": listChannelsRequest.channelId,
                "displayName": listChannelsRequest.displayName,
                "lifecycleState": listChannelsRequest.lifecycleState,
                "isEnabled": listChannelsRequest.isEnabled,
                "sortBy": listChannelsRequest.sortBy,
                "sortOrder": listChannelsRequest.sortOrder,
                "limit": listChannelsRequest.limit,
                "page": listChannelsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listChannelsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listChannelsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ChannelSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ChannelSummary objects
     * contained in responses from the listChannels operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllChannels(request) {
        return oci_common_1.paginateRecords(request, req => this.listChannels(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listChannels operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllChannelsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listChannels(req));
    }
    /**
     * Resets the specified Channel by purging its cached information, leaving the Channel
     * as if it had just been created. This operation is only accepted in Inactive Channels.
     *
     * @param ResetChannelRequest
     * @return ResetChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ResetChannel.ts.html |here} to see how to use ResetChannel API.
     */
    resetChannel(resetChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#resetChannel.");
            const pathParams = {
                "{channelId}": resetChannelRequest.channelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": resetChannelRequest.ifMatch,
                "opc-request-id": resetChannelRequest.opcRequestId,
                "opc-retry-token": resetChannelRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels/{channelId}/actions/reset",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, resetChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resumes an enabled Channel that has become Inactive due to an error. The resume operation
     * requires that the error that cause the Channel to become Inactive has already been fixed,
     * otherwise the operation may fail.
     *
     * @param ResumeChannelRequest
     * @return ResumeChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ResumeChannel.ts.html |here} to see how to use ResumeChannel API.
     */
    resumeChannel(resumeChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#resumeChannel.");
            const pathParams = {
                "{channelId}": resumeChannelRequest.channelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": resumeChannelRequest.ifMatch,
                "opc-request-id": resumeChannelRequest.opcRequestId,
                "opc-retry-token": resumeChannelRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels/{channelId}/actions/resume",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, resumeChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the properties of the specified Channel.
     * If the Channel is Active the Update operation will asynchronously apply the new configuration
     * parameters to the Channel and the Channel may become temporarily unavailable. Otherwise, the
     * new configuration will be applied the next time the Channel becomes Active.
     *
     * @param UpdateChannelRequest
     * @return UpdateChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateChannel.ts.html |here} to see how to use UpdateChannel API.
     */
    updateChannel(updateChannelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ChannelsClient#updateChannel.");
            const pathParams = {
                "{channelId}": updateChannelRequest.channelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateChannelRequest.ifMatch,
                "opc-request-id": updateChannelRequest.opcRequestId,
                "opc-retry-token": updateChannelRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/channels/{channelId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateChannelRequest.updateChannelDetails, "UpdateChannelDetails", models.UpdateChannelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateChannelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ChannelsClient = ChannelsClient;
ChannelsClient.serviceEndpointTemplate = "https://mysql.{region}.ocp.{secondLevelDomain}";
var DbBackupsApiKeys;
(function (DbBackupsApiKeys) {
})(DbBackupsApiKeys = exports.DbBackupsApiKeys || (exports.DbBackupsApiKeys = {}));
class DbBackupsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190415";
        if (this.logger)
            this.logger.info(`DbBackupsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DbBackupsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DbBackupsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new DbBackupsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new dbbackups_waiter_1.DbBackupsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Create a backup of a DB System.
     *
     * @param CreateBackupRequest
     * @return CreateBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateBackup.ts.html |here} to see how to use CreateBackup API.
     */
    createBackup(createBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbBackupsClient#createBackup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createBackupRequest.opcRequestId,
                "opc-retry-token": createBackupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/backups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createBackupRequest.createBackupDetails, "CreateBackupDetails", models.CreateBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "backup",
                    bodyModel: "model.Backup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a Backup.
     *
     * @param DeleteBackupRequest
     * @return DeleteBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteBackup.ts.html |here} to see how to use DeleteBackup API.
     */
    deleteBackup(deleteBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbBackupsClient#deleteBackup.");
            const pathParams = {
                "{backupId}": deleteBackupRequest.backupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteBackupRequest.ifMatch,
                "opc-request-id": deleteBackupRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/backups/{backupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get information about the specified Backup
     * @param GetBackupRequest
     * @return GetBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetBackup.ts.html |here} to see how to use GetBackup API.
     */
    getBackup(getBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbBackupsClient#getBackup.");
            const pathParams = {
                "{backupId}": getBackupRequest.backupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getBackupRequest.opcRequestId,
                "if-none-match": getBackupRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/backups/{backupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "backup",
                    bodyModel: "model.Backup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a list of DB System backups.
     *
     * @param ListBackupsRequest
     * @return ListBackupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListBackups.ts.html |here} to see how to use ListBackups API.
     */
    listBackups(listBackupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbBackupsClient#listBackups.");
            const pathParams = {};
            const queryParams = {
                "backupId": listBackupsRequest.backupId,
                "lifecycleState": listBackupsRequest.lifecycleState,
                "compartmentId": listBackupsRequest.compartmentId,
                "dbSystemId": listBackupsRequest.dbSystemId,
                "displayName": listBackupsRequest.displayName,
                "creationType": listBackupsRequest.creationType,
                "sortBy": listBackupsRequest.sortBy,
                "sortOrder": listBackupsRequest.sortOrder,
                "limit": listBackupsRequest.limit,
                "page": listBackupsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listBackupsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/backups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBackupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BackupSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BackupSummary objects
     * contained in responses from the listBackups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBackups(request) {
        return oci_common_1.paginateRecords(request, req => this.listBackups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBackups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBackupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBackups(req));
    }
    /**
     * Update the metadata of a Backup. Metadata such as the displayName or description
     * @param UpdateBackupRequest
     * @return UpdateBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateBackup.ts.html |here} to see how to use UpdateBackup API.
     */
    updateBackup(updateBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbBackupsClient#updateBackup.");
            const pathParams = {
                "{backupId}": updateBackupRequest.backupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateBackupRequest.ifMatch,
                "opc-request-id": updateBackupRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/backups/{backupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateBackupRequest.updateBackupDetails, "UpdateBackupDetails", models.UpdateBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DbBackupsClient = DbBackupsClient;
DbBackupsClient.serviceEndpointTemplate = "https://mysql.{region}.ocp.{secondLevelDomain}";
var DbSystemApiKeys;
(function (DbSystemApiKeys) {
})(DbSystemApiKeys = exports.DbSystemApiKeys || (exports.DbSystemApiKeys = {}));
class DbSystemClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190415";
        if (this.logger)
            this.logger.info(`DbSystemClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DbSystemClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DbSystemClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new DbSystemWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new dbsystem_waiter_1.DbSystemWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Adds an Analytics Cluster to the DB System.
     *
     * @param AddAnalyticsClusterRequest
     * @return AddAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/AddAnalyticsCluster.ts.html |here} to see how to use AddAnalyticsCluster API.
     */
    addAnalyticsCluster(addAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#addAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": addAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addAnalyticsClusterRequest.ifMatch,
                "opc-request-id": addAnalyticsClusterRequest.opcRequestId,
                "opc-retry-token": addAnalyticsClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster/actions/add",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addAnalyticsClusterRequest.addAnalyticsClusterDetails, "AddAnalyticsClusterDetails", models.AddAnalyticsClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "analyticsCluster",
                    bodyModel: "model.AnalyticsCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds a HeatWave cluster to the DB System.
     *
     * @param AddHeatWaveClusterRequest
     * @return AddHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/AddHeatWaveCluster.ts.html |here} to see how to use AddHeatWaveCluster API.
     */
    addHeatWaveCluster(addHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#addHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": addHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": addHeatWaveClusterRequest.ifMatch,
                "opc-request-id": addHeatWaveClusterRequest.opcRequestId,
                "opc-retry-token": addHeatWaveClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster/actions/add",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addHeatWaveClusterRequest.addHeatWaveClusterDetails, "AddHeatWaveClusterDetails", models.AddHeatWaveClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "heatWaveCluster",
                    bodyModel: "model.HeatWaveCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates and launches a DB System.
     *
     * @param CreateDbSystemRequest
     * @return CreateDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateDbSystem.ts.html |here} to see how to use CreateDbSystem API.
     */
    createDbSystem(createDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#createDbSystem.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createDbSystemRequest.opcRequestId,
                "opc-retry-token": createDbSystemRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDbSystemRequest.createDbSystemDetails, "CreateDbSystemDetails", models.CreateDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbSystem",
                    bodyModel: "model.DbSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Deletes the Analytics Cluster including terminating, detaching, removing, finalizing and
     * otherwise deleting all related resources.
     *
     * @param DeleteAnalyticsClusterRequest
     * @return DeleteAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteAnalyticsCluster.ts.html |here} to see how to use DeleteAnalyticsCluster API.
     */
    deleteAnalyticsCluster(deleteAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#deleteAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": deleteAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAnalyticsClusterRequest.ifMatch,
                "opc-request-id": deleteAnalyticsClusterRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a DB System, including terminating, detaching,
     * removing, finalizing and otherwise deleting all related resources.
     *
     * @param DeleteDbSystemRequest
     * @return DeleteDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteDbSystem.ts.html |here} to see how to use DeleteDbSystem API.
     */
    deleteDbSystem(deleteDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#deleteDbSystem.");
            const pathParams = {
                "{dbSystemId}": deleteDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDbSystemRequest.ifMatch,
                "opc-request-id": deleteDbSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HeatWave cluster including terminating, detaching, removing, finalizing and
     * otherwise deleting all related resources.
     *
     * @param DeleteHeatWaveClusterRequest
     * @return DeleteHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteHeatWaveCluster.ts.html |here} to see how to use DeleteHeatWaveCluster API.
     */
    deleteHeatWaveCluster(deleteHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#deleteHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": deleteHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHeatWaveClusterRequest.ifMatch,
                "opc-request-id": deleteHeatWaveClusterRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Sends a request to estimate the memory footprints of user tables when loaded to Analytics Cluster memory.
     *
     * @param GenerateAnalyticsClusterMemoryEstimateRequest
     * @return GenerateAnalyticsClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GenerateAnalyticsClusterMemoryEstimate.ts.html |here} to see how to use GenerateAnalyticsClusterMemoryEstimate API.
     */
    generateAnalyticsClusterMemoryEstimate(generateAnalyticsClusterMemoryEstimateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#generateAnalyticsClusterMemoryEstimate.");
            const pathParams = {
                "{dbSystemId}": generateAnalyticsClusterMemoryEstimateRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateAnalyticsClusterMemoryEstimateRequest.opcRequestId,
                "opc-retry-token": generateAnalyticsClusterMemoryEstimateRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsClusterMemoryEstimate/actions/generate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, generateAnalyticsClusterMemoryEstimateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "analyticsClusterMemoryEstimate",
                    bodyModel: "model.AnalyticsClusterMemoryEstimate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Sends a request to estimate the memory footprints of user tables when loaded to HeatWave cluster memory.
     *
     * @param GenerateHeatWaveClusterMemoryEstimateRequest
     * @return GenerateHeatWaveClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GenerateHeatWaveClusterMemoryEstimate.ts.html |here} to see how to use GenerateHeatWaveClusterMemoryEstimate API.
     */
    generateHeatWaveClusterMemoryEstimate(generateHeatWaveClusterMemoryEstimateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#generateHeatWaveClusterMemoryEstimate.");
            const pathParams = {
                "{dbSystemId}": generateHeatWaveClusterMemoryEstimateRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": generateHeatWaveClusterMemoryEstimateRequest.opcRequestId,
                "opc-retry-token": generateHeatWaveClusterMemoryEstimateRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveClusterMemoryEstimate/actions/generate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, generateHeatWaveClusterMemoryEstimateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "heatWaveClusterMemoryEstimate",
                    bodyModel: "model.HeatWaveClusterMemoryEstimate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Gets information about the Analytics Cluster.
     *
     * @param GetAnalyticsClusterRequest
     * @return GetAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetAnalyticsCluster.ts.html |here} to see how to use GetAnalyticsCluster API.
     */
    getAnalyticsCluster(getAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#getAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": getAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAnalyticsClusterRequest.opcRequestId,
                "if-none-match": getAnalyticsClusterRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "analyticsCluster",
                    bodyModel: "model.AnalyticsCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Gets the most recent Analytics Cluster memory estimate that can be used to determine a suitable
     * Analytics Cluster size.
     *
     * @param GetAnalyticsClusterMemoryEstimateRequest
     * @return GetAnalyticsClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetAnalyticsClusterMemoryEstimate.ts.html |here} to see how to use GetAnalyticsClusterMemoryEstimate API.
     */
    getAnalyticsClusterMemoryEstimate(getAnalyticsClusterMemoryEstimateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#getAnalyticsClusterMemoryEstimate.");
            const pathParams = {
                "{dbSystemId}": getAnalyticsClusterMemoryEstimateRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAnalyticsClusterMemoryEstimateRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsClusterMemoryEstimate",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAnalyticsClusterMemoryEstimateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "analyticsClusterMemoryEstimate",
                    bodyModel: "model.AnalyticsClusterMemoryEstimate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get information about the specified DB System.
     * @param GetDbSystemRequest
     * @return GetDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetDbSystem.ts.html |here} to see how to use GetDbSystem API.
     */
    getDbSystem(getDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#getDbSystem.");
            const pathParams = {
                "{dbSystemId}": getDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDbSystemRequest.opcRequestId,
                "if-none-match": getDbSystemRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dbSystem",
                    bodyModel: "model.DbSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the HeatWave cluster.
     * @param GetHeatWaveClusterRequest
     * @return GetHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetHeatWaveCluster.ts.html |here} to see how to use GetHeatWaveCluster API.
     */
    getHeatWaveCluster(getHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#getHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": getHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHeatWaveClusterRequest.opcRequestId,
                "if-none-match": getHeatWaveClusterRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "heatWaveCluster",
                    bodyModel: "model.HeatWaveCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the most recent HeatWave cluster memory estimate that can be used to determine a suitable
     * HeatWave cluster size.
     *
     * @param GetHeatWaveClusterMemoryEstimateRequest
     * @return GetHeatWaveClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetHeatWaveClusterMemoryEstimate.ts.html |here} to see how to use GetHeatWaveClusterMemoryEstimate API.
     */
    getHeatWaveClusterMemoryEstimate(getHeatWaveClusterMemoryEstimateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#getHeatWaveClusterMemoryEstimate.");
            const pathParams = {
                "{dbSystemId}": getHeatWaveClusterMemoryEstimateRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHeatWaveClusterMemoryEstimateRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveClusterMemoryEstimate",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHeatWaveClusterMemoryEstimateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "heatWaveClusterMemoryEstimate",
                    bodyModel: "model.HeatWaveClusterMemoryEstimate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a list of DB Systems in the specified compartment.
     * The default sort order is by timeUpdated, descending.
     *
     * @param ListDbSystemsRequest
     * @return ListDbSystemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListDbSystems.ts.html |here} to see how to use ListDbSystems API.
     */
    listDbSystems(listDbSystemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#listDbSystems.");
            const pathParams = {};
            const queryParams = {
                "isAnalyticsClusterAttached": listDbSystemsRequest.isAnalyticsClusterAttached,
                "isHeatWaveClusterAttached": listDbSystemsRequest.isHeatWaveClusterAttached,
                "compartmentId": listDbSystemsRequest.compartmentId,
                "dbSystemId": listDbSystemsRequest.dbSystemId,
                "displayName": listDbSystemsRequest.displayName,
                "lifecycleState": listDbSystemsRequest.lifecycleState,
                "configurationId": listDbSystemsRequest.configurationId,
                "isUpToDate": listDbSystemsRequest.isUpToDate,
                "sortBy": listDbSystemsRequest.sortBy,
                "sortOrder": listDbSystemsRequest.sortOrder,
                "limit": listDbSystemsRequest.limit,
                "page": listDbSystemsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDbSystemsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDbSystemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DbSystemSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DbSystemSummary objects
     * contained in responses from the listDbSystems operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbSystems(request) {
        return oci_common_1.paginateRecords(request, req => this.listDbSystems(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDbSystems operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbSystemsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDbSystems(req));
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Restarts the Analytics Cluster.
     *
     * @param RestartAnalyticsClusterRequest
     * @return RestartAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartAnalyticsCluster.ts.html |here} to see how to use RestartAnalyticsCluster API.
     */
    restartAnalyticsCluster(restartAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#restartAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": restartAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": restartAnalyticsClusterRequest.ifMatch,
                "opc-request-id": restartAnalyticsClusterRequest.opcRequestId,
                "opc-retry-token": restartAnalyticsClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster/actions/restart",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, restartAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restarts the specified DB System.
     * @param RestartDbSystemRequest
     * @return RestartDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartDbSystem.ts.html |here} to see how to use RestartDbSystem API.
     */
    restartDbSystem(restartDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#restartDbSystem.");
            const pathParams = {
                "{dbSystemId}": restartDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": restartDbSystemRequest.ifMatch,
                "opc-request-id": restartDbSystemRequest.opcRequestId,
                "opc-retry-token": restartDbSystemRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/actions/restart",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(restartDbSystemRequest.restartDbSystemDetails, "RestartDbSystemDetails", models.RestartDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, restartDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restarts the HeatWave cluster.
     * @param RestartHeatWaveClusterRequest
     * @return RestartHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartHeatWaveCluster.ts.html |here} to see how to use RestartHeatWaveCluster API.
     */
    restartHeatWaveCluster(restartHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#restartHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": restartHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": restartHeatWaveClusterRequest.ifMatch,
                "opc-request-id": restartHeatWaveClusterRequest.opcRequestId,
                "opc-retry-token": restartHeatWaveClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster/actions/restart",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, restartHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Starts the Analytics Cluster.
     *
     * @param StartAnalyticsClusterRequest
     * @return StartAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartAnalyticsCluster.ts.html |here} to see how to use StartAnalyticsCluster API.
     */
    startAnalyticsCluster(startAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#startAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": startAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": startAnalyticsClusterRequest.ifMatch,
                "opc-request-id": startAnalyticsClusterRequest.opcRequestId,
                "opc-retry-token": startAnalyticsClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster/actions/start",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, startAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Start the specified DB System.
     * @param StartDbSystemRequest
     * @return StartDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartDbSystem.ts.html |here} to see how to use StartDbSystem API.
     */
    startDbSystem(startDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#startDbSystem.");
            const pathParams = {
                "{dbSystemId}": startDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": startDbSystemRequest.ifMatch,
                "opc-request-id": startDbSystemRequest.opcRequestId,
                "opc-retry-token": startDbSystemRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/actions/start",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, startDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Starts the HeatWave cluster.
     * @param StartHeatWaveClusterRequest
     * @return StartHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartHeatWaveCluster.ts.html |here} to see how to use StartHeatWaveCluster API.
     */
    startHeatWaveCluster(startHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#startHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": startHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": startHeatWaveClusterRequest.ifMatch,
                "opc-request-id": startHeatWaveClusterRequest.opcRequestId,
                "opc-retry-token": startHeatWaveClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster/actions/start",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, startHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Stops the Analytics Cluster.
     *
     * @param StopAnalyticsClusterRequest
     * @return StopAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopAnalyticsCluster.ts.html |here} to see how to use StopAnalyticsCluster API.
     */
    stopAnalyticsCluster(stopAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#stopAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": stopAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": stopAnalyticsClusterRequest.ifMatch,
                "opc-request-id": stopAnalyticsClusterRequest.opcRequestId,
                "opc-retry-token": stopAnalyticsClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster/actions/stop",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, stopAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Stops the specified DB System.
  * <p>
  A stopped DB System is not billed.
  *
       * @param StopDbSystemRequest
       * @return StopDbSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopDbSystem.ts.html |here} to see how to use StopDbSystem API.
       */
    stopDbSystem(stopDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#stopDbSystem.");
            const pathParams = {
                "{dbSystemId}": stopDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": stopDbSystemRequest.ifMatch,
                "opc-request-id": stopDbSystemRequest.opcRequestId,
                "opc-retry-token": stopDbSystemRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/actions/stop",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(stopDbSystemRequest.stopDbSystemDetails, "StopDbSystemDetails", models.StopDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, stopDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Stops the HeatWave cluster.
     * @param StopHeatWaveClusterRequest
     * @return StopHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopHeatWaveCluster.ts.html |here} to see how to use StopHeatWaveCluster API.
     */
    stopHeatWaveCluster(stopHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#stopHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": stopHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": stopHeatWaveClusterRequest.ifMatch,
                "opc-request-id": stopHeatWaveClusterRequest.opcRequestId,
                "opc-retry-token": stopHeatWaveClusterRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster/actions/stop",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, stopHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Updates the Analytics Cluster.
     *
     * @param UpdateAnalyticsClusterRequest
     * @return UpdateAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateAnalyticsCluster.ts.html |here} to see how to use UpdateAnalyticsCluster API.
     */
    updateAnalyticsCluster(updateAnalyticsClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#updateAnalyticsCluster.");
            const pathParams = {
                "{dbSystemId}": updateAnalyticsClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAnalyticsClusterRequest.ifMatch,
                "opc-request-id": updateAnalyticsClusterRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/analyticsCluster",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAnalyticsClusterRequest.updateAnalyticsClusterDetails, "UpdateAnalyticsClusterDetails", models.UpdateAnalyticsClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateAnalyticsClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Update the configuration of a DB System.
  * <p>
  Updating different fields in the DB System will have different results
  * on the uptime of the DB System. For example, changing the displayName of
  * a DB System will take effect immediately, but changing the shape of a
  * DB System is an asynchronous operation that involves provisioning new
  * Compute resources, pausing the DB System and migrating storage
  * before making the DB System available again.
  *
       * @param UpdateDbSystemRequest
       * @return UpdateDbSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateDbSystem.ts.html |here} to see how to use UpdateDbSystem API.
       */
    updateDbSystem(updateDbSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#updateDbSystem.");
            const pathParams = {
                "{dbSystemId}": updateDbSystemRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDbSystemRequest.ifMatch,
                "opc-request-id": updateDbSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDbSystemRequest.updateDbSystemDetails, "UpdateDbSystemDetails", models.UpdateDbSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDbSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the HeatWave cluster.
     *
     * @param UpdateHeatWaveClusterRequest
     * @return UpdateHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateHeatWaveCluster.ts.html |here} to see how to use UpdateHeatWaveCluster API.
     */
    updateHeatWaveCluster(updateHeatWaveClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbSystemClient#updateHeatWaveCluster.");
            const pathParams = {
                "{dbSystemId}": updateHeatWaveClusterRequest.dbSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHeatWaveClusterRequest.ifMatch,
                "opc-request-id": updateHeatWaveClusterRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dbSystems/{dbSystemId}/heatWaveCluster",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHeatWaveClusterRequest.updateHeatWaveClusterDetails, "UpdateHeatWaveClusterDetails", models.UpdateHeatWaveClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateHeatWaveClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DbSystemClient = DbSystemClient;
DbSystemClient.serviceEndpointTemplate = "https://mysql.{region}.ocp.{secondLevelDomain}";
var MysqlaasApiKeys;
(function (MysqlaasApiKeys) {
})(MysqlaasApiKeys = exports.MysqlaasApiKeys || (exports.MysqlaasApiKeys = {}));
class MysqlaasClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190415";
        if (this.logger)
            this.logger.info(`MysqlaasClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MysqlaasClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MysqlaasClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new MysqlaasWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new mysqlaas_waiter_1.MysqlaasWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Creates a new Configuration.
     * @param CreateConfigurationRequest
     * @return CreateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateConfiguration.ts.html |here} to see how to use CreateConfiguration API.
     */
    createConfiguration(createConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#createConfiguration.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createConfigurationRequest.opcRequestId,
                "opc-retry-token": createConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configurations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createConfigurationRequest.createConfigurationDetails, "CreateConfigurationDetails", models.CreateConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Configuration.
     * The Configuration must not be in use by any DB Systems.
     *
     * @param DeleteConfigurationRequest
     * @return DeleteConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteConfiguration.ts.html |here} to see how to use DeleteConfiguration API.
     */
    deleteConfiguration(deleteConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#deleteConfiguration.");
            const pathParams = {
                "{configurationId}": deleteConfigurationRequest.configurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteConfigurationRequest.ifMatch,
                "opc-request-id": deleteConfigurationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configurations/{configurationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the full details of the specified Configuration, including the list of MySQL Variables and their values.
     *
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#getConfiguration.");
            const pathParams = {
                "{configurationId}": getConfigurationRequest.configurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getConfigurationRequest.opcRequestId,
                "if-none-match": getConfigurationRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configurations/{configurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the Configurations available when creating a DB System.
  * <p>
  This may include DEFAULT configurations per Shape and CUSTOM configurations.
  * <p>
  The default sort order is a multi-part sort by:
  *   - shapeName, ascending
  *   - DEFAULT-before-CUSTOM
  *   - displayName ascending
  *
       * @param ListConfigurationsRequest
       * @return ListConfigurationsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListConfigurations.ts.html |here} to see how to use ListConfigurations API.
       */
    listConfigurations(listConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#listConfigurations.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listConfigurationsRequest.compartmentId,
                "configurationId": listConfigurationsRequest.configurationId,
                "lifecycleState": listConfigurationsRequest.lifecycleState,
                "type": listConfigurationsRequest.type,
                "displayName": listConfigurationsRequest.displayName,
                "shapeName": listConfigurationsRequest.shapeName,
                "sortBy": listConfigurationsRequest.sortBy,
                "sortOrder": listConfigurationsRequest.sortOrder,
                "limit": listConfigurationsRequest.limit,
                "page": listConfigurationsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listConfigurationsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listConfigurationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ConfigurationSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ConfigurationSummary objects
     * contained in responses from the listConfigurations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConfigurations(request) {
        return oci_common_1.paginateRecords(request, req => this.listConfigurations(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listConfigurations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConfigurationsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listConfigurations(req));
    }
    /**
     * Gets a list of the shapes you can use to create a new MySQL DB System.
     * The shape determines the resources allocated to the DB System:
     * CPU cores and memory for VM shapes; CPU cores, memory and
     * storage for non-VM (or bare metal) shapes.
     *
     * @param ListShapesRequest
     * @return ListShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListShapes.ts.html |here} to see how to use ListShapes API.
     */
    listShapes(listShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#listShapes.");
            const pathParams = {};
            const queryParams = {
                "isSupportedFor": listShapesRequest.isSupportedFor,
                "availabilityDomain": listShapesRequest.availabilityDomain,
                "compartmentId": listShapesRequest.compartmentId,
                "name": listShapesRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listShapesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/shapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ShapeSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Get a list of supported and available MySQL database major versions.
  * <p>
  The list is sorted by version family.
  *
       * @param ListVersionsRequest
       * @return ListVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListVersions.ts.html |here} to see how to use ListVersions API.
       */
    listVersions(listVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#listVersions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVersionsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVersionsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/versions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVersionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VersionSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Configuration details.
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MysqlaasClient#updateConfiguration.");
            const pathParams = {
                "{configurationId}": updateConfigurationRequest.configurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateConfigurationRequest.ifMatch,
                "opc-request-id": updateConfigurationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configurations/{configurationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateConfigurationRequest.updateConfigurationDetails, "UpdateConfigurationDetails", models.UpdateConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.MysqlaasClient = MysqlaasClient;
MysqlaasClient.serviceEndpointTemplate = "https://mysql.{region}.ocp.{secondLevelDomain}";
var WorkRequestsApiKeys;
(function (WorkRequestsApiKeys) {
})(WorkRequestsApiKeys = exports.WorkRequestsApiKeys || (exports.WorkRequestsApiKeys = {}));
class WorkRequestsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20190415";
        if (this.logger)
            this.logger.info(`WorkRequestsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(WorkRequestsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(WorkRequestsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new WorkRequestsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new workrequests_waiter_1.WorkRequestsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Gets the status of the work request with the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestsClient#getWorkRequest.");
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-none-match": getWorkRequestRequest.ifNoneMatch,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Retry-After"),
                            key: "retryAfter",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestsClient#listWorkRequestErrors.");
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestErrorsRequest.limit,
                "page": listWorkRequestErrorsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestError[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestsClient#listWorkRequestLogs.");
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "limit": listWorkRequestLogsRequest.limit,
                "page": listWorkRequestLogsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestLogsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestLogEntry[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists the work requests in a specified compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestsClient#listWorkRequests.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "sortBy": listWorkRequestsRequest.sortBy,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "limit": listWorkRequestsRequest.limit,
                "page": listWorkRequestsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
}
exports.WorkRequestsClient = WorkRequestsClient;
WorkRequestsClient.serviceEndpointTemplate = "https://mysql.{region}.ocp.{secondLevelDomain}";
//# sourceMappingURL=client.js.map