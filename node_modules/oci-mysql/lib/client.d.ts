/**
 * MySQL Database Service API
 * The API for the MySQL Database Service
 * OpenAPI spec version: 20190415
 * Contact: mysql-cloud-dev_ww_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { ChannelsWaiter } from "./channels-waiter";
import { DbBackupsWaiter } from "./dbbackups-waiter";
import { DbSystemWaiter } from "./dbsystem-waiter";
import { MysqlaasWaiter } from "./mysqlaas-waiter";
import { WorkRequestsWaiter } from "./workrequests-waiter";
export declare enum ChannelsApiKeys {
}
export declare class ChannelsClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ChannelsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ChannelsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ChannelsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ChannelsWaiter;
    /**
     * Creates a Channel to establish replication from a source to a target.
     *
     * @param CreateChannelRequest
     * @return CreateChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateChannel.ts.html |here} to see how to use CreateChannel API.
     */
    createChannel(createChannelRequest: requests.CreateChannelRequest): Promise<responses.CreateChannelResponse>;
    /**
     * Deletes the specified Channel.
     * @param DeleteChannelRequest
     * @return DeleteChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteChannel.ts.html |here} to see how to use DeleteChannel API.
     */
    deleteChannel(deleteChannelRequest: requests.DeleteChannelRequest): Promise<responses.DeleteChannelResponse>;
    /**
     * Gets the full details of the specified Channel, including the user-specified
     * configuration parameters (passwords are omitted), as well as information about
     * the state of the Channel, its sources and targets.
     *
     * @param GetChannelRequest
     * @return GetChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetChannel.ts.html |here} to see how to use GetChannel API.
     */
    getChannel(getChannelRequest: requests.GetChannelRequest): Promise<responses.GetChannelResponse>;
    /**
     * Lists all the Channels that match the specified filters.
     * @param ListChannelsRequest
     * @return ListChannelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListChannels.ts.html |here} to see how to use ListChannels API.
     */
    listChannels(listChannelsRequest: requests.ListChannelsRequest): Promise<responses.ListChannelsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ChannelSummary objects
     * contained in responses from the listChannels operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllChannels(request: requests.ListChannelsRequest): AsyncIterableIterator<models.ChannelSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listChannels operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllChannelsResponses(request: requests.ListChannelsRequest): AsyncIterableIterator<responses.ListChannelsResponse>;
    /**
     * Resets the specified Channel by purging its cached information, leaving the Channel
     * as if it had just been created. This operation is only accepted in Inactive Channels.
     *
     * @param ResetChannelRequest
     * @return ResetChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ResetChannel.ts.html |here} to see how to use ResetChannel API.
     */
    resetChannel(resetChannelRequest: requests.ResetChannelRequest): Promise<responses.ResetChannelResponse>;
    /**
     * Resumes an enabled Channel that has become Inactive due to an error. The resume operation
     * requires that the error that cause the Channel to become Inactive has already been fixed,
     * otherwise the operation may fail.
     *
     * @param ResumeChannelRequest
     * @return ResumeChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ResumeChannel.ts.html |here} to see how to use ResumeChannel API.
     */
    resumeChannel(resumeChannelRequest: requests.ResumeChannelRequest): Promise<responses.ResumeChannelResponse>;
    /**
     * Updates the properties of the specified Channel.
     * If the Channel is Active the Update operation will asynchronously apply the new configuration
     * parameters to the Channel and the Channel may become temporarily unavailable. Otherwise, the
     * new configuration will be applied the next time the Channel becomes Active.
     *
     * @param UpdateChannelRequest
     * @return UpdateChannelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateChannel.ts.html |here} to see how to use UpdateChannel API.
     */
    updateChannel(updateChannelRequest: requests.UpdateChannelRequest): Promise<responses.UpdateChannelResponse>;
}
export declare enum DbBackupsApiKeys {
}
export declare class DbBackupsClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DbBackupsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DbBackupsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DbBackupsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DbBackupsWaiter;
    /**
     * Create a backup of a DB System.
     *
     * @param CreateBackupRequest
     * @return CreateBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateBackup.ts.html |here} to see how to use CreateBackup API.
     */
    createBackup(createBackupRequest: requests.CreateBackupRequest): Promise<responses.CreateBackupResponse>;
    /**
     * Delete a Backup.
     *
     * @param DeleteBackupRequest
     * @return DeleteBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteBackup.ts.html |here} to see how to use DeleteBackup API.
     */
    deleteBackup(deleteBackupRequest: requests.DeleteBackupRequest): Promise<responses.DeleteBackupResponse>;
    /**
     * Get information about the specified Backup
     * @param GetBackupRequest
     * @return GetBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetBackup.ts.html |here} to see how to use GetBackup API.
     */
    getBackup(getBackupRequest: requests.GetBackupRequest): Promise<responses.GetBackupResponse>;
    /**
     * Get a list of DB System backups.
     *
     * @param ListBackupsRequest
     * @return ListBackupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListBackups.ts.html |here} to see how to use ListBackups API.
     */
    listBackups(listBackupsRequest: requests.ListBackupsRequest): Promise<responses.ListBackupsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.BackupSummary objects
     * contained in responses from the listBackups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBackups(request: requests.ListBackupsRequest): AsyncIterableIterator<models.BackupSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBackups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBackupsResponses(request: requests.ListBackupsRequest): AsyncIterableIterator<responses.ListBackupsResponse>;
    /**
     * Update the metadata of a Backup. Metadata such as the displayName or description
     * @param UpdateBackupRequest
     * @return UpdateBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateBackup.ts.html |here} to see how to use UpdateBackup API.
     */
    updateBackup(updateBackupRequest: requests.UpdateBackupRequest): Promise<responses.UpdateBackupResponse>;
}
export declare enum DbSystemApiKeys {
}
export declare class DbSystemClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DbSystemWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DbSystemWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DbSystemWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DbSystemWaiter;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Adds an Analytics Cluster to the DB System.
     *
     * @param AddAnalyticsClusterRequest
     * @return AddAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/AddAnalyticsCluster.ts.html |here} to see how to use AddAnalyticsCluster API.
     */
    addAnalyticsCluster(addAnalyticsClusterRequest: requests.AddAnalyticsClusterRequest): Promise<responses.AddAnalyticsClusterResponse>;
    /**
     * Adds a HeatWave cluster to the DB System.
     *
     * @param AddHeatWaveClusterRequest
     * @return AddHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/AddHeatWaveCluster.ts.html |here} to see how to use AddHeatWaveCluster API.
     */
    addHeatWaveCluster(addHeatWaveClusterRequest: requests.AddHeatWaveClusterRequest): Promise<responses.AddHeatWaveClusterResponse>;
    /**
     * Creates and launches a DB System.
     *
     * @param CreateDbSystemRequest
     * @return CreateDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateDbSystem.ts.html |here} to see how to use CreateDbSystem API.
     */
    createDbSystem(createDbSystemRequest: requests.CreateDbSystemRequest): Promise<responses.CreateDbSystemResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Deletes the Analytics Cluster including terminating, detaching, removing, finalizing and
     * otherwise deleting all related resources.
     *
     * @param DeleteAnalyticsClusterRequest
     * @return DeleteAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteAnalyticsCluster.ts.html |here} to see how to use DeleteAnalyticsCluster API.
     */
    deleteAnalyticsCluster(deleteAnalyticsClusterRequest: requests.DeleteAnalyticsClusterRequest): Promise<responses.DeleteAnalyticsClusterResponse>;
    /**
     * Delete a DB System, including terminating, detaching,
     * removing, finalizing and otherwise deleting all related resources.
     *
     * @param DeleteDbSystemRequest
     * @return DeleteDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteDbSystem.ts.html |here} to see how to use DeleteDbSystem API.
     */
    deleteDbSystem(deleteDbSystemRequest: requests.DeleteDbSystemRequest): Promise<responses.DeleteDbSystemResponse>;
    /**
     * Deletes the HeatWave cluster including terminating, detaching, removing, finalizing and
     * otherwise deleting all related resources.
     *
     * @param DeleteHeatWaveClusterRequest
     * @return DeleteHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteHeatWaveCluster.ts.html |here} to see how to use DeleteHeatWaveCluster API.
     */
    deleteHeatWaveCluster(deleteHeatWaveClusterRequest: requests.DeleteHeatWaveClusterRequest): Promise<responses.DeleteHeatWaveClusterResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Sends a request to estimate the memory footprints of user tables when loaded to Analytics Cluster memory.
     *
     * @param GenerateAnalyticsClusterMemoryEstimateRequest
     * @return GenerateAnalyticsClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GenerateAnalyticsClusterMemoryEstimate.ts.html |here} to see how to use GenerateAnalyticsClusterMemoryEstimate API.
     */
    generateAnalyticsClusterMemoryEstimate(generateAnalyticsClusterMemoryEstimateRequest: requests.GenerateAnalyticsClusterMemoryEstimateRequest): Promise<responses.GenerateAnalyticsClusterMemoryEstimateResponse>;
    /**
     * Sends a request to estimate the memory footprints of user tables when loaded to HeatWave cluster memory.
     *
     * @param GenerateHeatWaveClusterMemoryEstimateRequest
     * @return GenerateHeatWaveClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GenerateHeatWaveClusterMemoryEstimate.ts.html |here} to see how to use GenerateHeatWaveClusterMemoryEstimate API.
     */
    generateHeatWaveClusterMemoryEstimate(generateHeatWaveClusterMemoryEstimateRequest: requests.GenerateHeatWaveClusterMemoryEstimateRequest): Promise<responses.GenerateHeatWaveClusterMemoryEstimateResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Gets information about the Analytics Cluster.
     *
     * @param GetAnalyticsClusterRequest
     * @return GetAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetAnalyticsCluster.ts.html |here} to see how to use GetAnalyticsCluster API.
     */
    getAnalyticsCluster(getAnalyticsClusterRequest: requests.GetAnalyticsClusterRequest): Promise<responses.GetAnalyticsClusterResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Gets the most recent Analytics Cluster memory estimate that can be used to determine a suitable
     * Analytics Cluster size.
     *
     * @param GetAnalyticsClusterMemoryEstimateRequest
     * @return GetAnalyticsClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetAnalyticsClusterMemoryEstimate.ts.html |here} to see how to use GetAnalyticsClusterMemoryEstimate API.
     */
    getAnalyticsClusterMemoryEstimate(getAnalyticsClusterMemoryEstimateRequest: requests.GetAnalyticsClusterMemoryEstimateRequest): Promise<responses.GetAnalyticsClusterMemoryEstimateResponse>;
    /**
     * Get information about the specified DB System.
     * @param GetDbSystemRequest
     * @return GetDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetDbSystem.ts.html |here} to see how to use GetDbSystem API.
     */
    getDbSystem(getDbSystemRequest: requests.GetDbSystemRequest): Promise<responses.GetDbSystemResponse>;
    /**
     * Gets information about the HeatWave cluster.
     * @param GetHeatWaveClusterRequest
     * @return GetHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetHeatWaveCluster.ts.html |here} to see how to use GetHeatWaveCluster API.
     */
    getHeatWaveCluster(getHeatWaveClusterRequest: requests.GetHeatWaveClusterRequest): Promise<responses.GetHeatWaveClusterResponse>;
    /**
     * Gets the most recent HeatWave cluster memory estimate that can be used to determine a suitable
     * HeatWave cluster size.
     *
     * @param GetHeatWaveClusterMemoryEstimateRequest
     * @return GetHeatWaveClusterMemoryEstimateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetHeatWaveClusterMemoryEstimate.ts.html |here} to see how to use GetHeatWaveClusterMemoryEstimate API.
     */
    getHeatWaveClusterMemoryEstimate(getHeatWaveClusterMemoryEstimateRequest: requests.GetHeatWaveClusterMemoryEstimateRequest): Promise<responses.GetHeatWaveClusterMemoryEstimateResponse>;
    /**
     * Get a list of DB Systems in the specified compartment.
     * The default sort order is by timeUpdated, descending.
     *
     * @param ListDbSystemsRequest
     * @return ListDbSystemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListDbSystems.ts.html |here} to see how to use ListDbSystems API.
     */
    listDbSystems(listDbSystemsRequest: requests.ListDbSystemsRequest): Promise<responses.ListDbSystemsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.DbSystemSummary objects
     * contained in responses from the listDbSystems operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbSystems(request: requests.ListDbSystemsRequest): AsyncIterableIterator<models.DbSystemSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDbSystems operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDbSystemsResponses(request: requests.ListDbSystemsRequest): AsyncIterableIterator<responses.ListDbSystemsResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Restarts the Analytics Cluster.
     *
     * @param RestartAnalyticsClusterRequest
     * @return RestartAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartAnalyticsCluster.ts.html |here} to see how to use RestartAnalyticsCluster API.
     */
    restartAnalyticsCluster(restartAnalyticsClusterRequest: requests.RestartAnalyticsClusterRequest): Promise<responses.RestartAnalyticsClusterResponse>;
    /**
     * Restarts the specified DB System.
     * @param RestartDbSystemRequest
     * @return RestartDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartDbSystem.ts.html |here} to see how to use RestartDbSystem API.
     */
    restartDbSystem(restartDbSystemRequest: requests.RestartDbSystemRequest): Promise<responses.RestartDbSystemResponse>;
    /**
     * Restarts the HeatWave cluster.
     * @param RestartHeatWaveClusterRequest
     * @return RestartHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/RestartHeatWaveCluster.ts.html |here} to see how to use RestartHeatWaveCluster API.
     */
    restartHeatWaveCluster(restartHeatWaveClusterRequest: requests.RestartHeatWaveClusterRequest): Promise<responses.RestartHeatWaveClusterResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Starts the Analytics Cluster.
     *
     * @param StartAnalyticsClusterRequest
     * @return StartAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartAnalyticsCluster.ts.html |here} to see how to use StartAnalyticsCluster API.
     */
    startAnalyticsCluster(startAnalyticsClusterRequest: requests.StartAnalyticsClusterRequest): Promise<responses.StartAnalyticsClusterResponse>;
    /**
     * Start the specified DB System.
     * @param StartDbSystemRequest
     * @return StartDbSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartDbSystem.ts.html |here} to see how to use StartDbSystem API.
     */
    startDbSystem(startDbSystemRequest: requests.StartDbSystemRequest): Promise<responses.StartDbSystemResponse>;
    /**
     * Starts the HeatWave cluster.
     * @param StartHeatWaveClusterRequest
     * @return StartHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StartHeatWaveCluster.ts.html |here} to see how to use StartHeatWaveCluster API.
     */
    startHeatWaveCluster(startHeatWaveClusterRequest: requests.StartHeatWaveClusterRequest): Promise<responses.StartHeatWaveClusterResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Stops the Analytics Cluster.
     *
     * @param StopAnalyticsClusterRequest
     * @return StopAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopAnalyticsCluster.ts.html |here} to see how to use StopAnalyticsCluster API.
     */
    stopAnalyticsCluster(stopAnalyticsClusterRequest: requests.StopAnalyticsClusterRequest): Promise<responses.StopAnalyticsClusterResponse>;
    /**
       * Stops the specified DB System.
  * <p>
  A stopped DB System is not billed.
  *
       * @param StopDbSystemRequest
       * @return StopDbSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopDbSystem.ts.html |here} to see how to use StopDbSystem API.
       */
    stopDbSystem(stopDbSystemRequest: requests.StopDbSystemRequest): Promise<responses.StopDbSystemResponse>;
    /**
     * Stops the HeatWave cluster.
     * @param StopHeatWaveClusterRequest
     * @return StopHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/StopHeatWaveCluster.ts.html |here} to see how to use StopHeatWaveCluster API.
     */
    stopHeatWaveCluster(stopHeatWaveClusterRequest: requests.StopHeatWaveClusterRequest): Promise<responses.StopHeatWaveClusterResponse>;
    /**
     * DEPRECATED -- please use HeatWave API instead.
     * Updates the Analytics Cluster.
     *
     * @param UpdateAnalyticsClusterRequest
     * @return UpdateAnalyticsClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateAnalyticsCluster.ts.html |here} to see how to use UpdateAnalyticsCluster API.
     */
    updateAnalyticsCluster(updateAnalyticsClusterRequest: requests.UpdateAnalyticsClusterRequest): Promise<responses.UpdateAnalyticsClusterResponse>;
    /**
       * Update the configuration of a DB System.
  * <p>
  Updating different fields in the DB System will have different results
  * on the uptime of the DB System. For example, changing the displayName of
  * a DB System will take effect immediately, but changing the shape of a
  * DB System is an asynchronous operation that involves provisioning new
  * Compute resources, pausing the DB System and migrating storage
  * before making the DB System available again.
  *
       * @param UpdateDbSystemRequest
       * @return UpdateDbSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateDbSystem.ts.html |here} to see how to use UpdateDbSystem API.
       */
    updateDbSystem(updateDbSystemRequest: requests.UpdateDbSystemRequest): Promise<responses.UpdateDbSystemResponse>;
    /**
     * Updates the HeatWave cluster.
     *
     * @param UpdateHeatWaveClusterRequest
     * @return UpdateHeatWaveClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateHeatWaveCluster.ts.html |here} to see how to use UpdateHeatWaveCluster API.
     */
    updateHeatWaveCluster(updateHeatWaveClusterRequest: requests.UpdateHeatWaveClusterRequest): Promise<responses.UpdateHeatWaveClusterResponse>;
}
export declare enum MysqlaasApiKeys {
}
export declare class MysqlaasClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": MysqlaasWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new MysqlaasWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): MysqlaasWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): MysqlaasWaiter;
    /**
     * Creates a new Configuration.
     * @param CreateConfigurationRequest
     * @return CreateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/CreateConfiguration.ts.html |here} to see how to use CreateConfiguration API.
     */
    createConfiguration(createConfigurationRequest: requests.CreateConfigurationRequest): Promise<responses.CreateConfigurationResponse>;
    /**
     * Deletes a Configuration.
     * The Configuration must not be in use by any DB Systems.
     *
     * @param DeleteConfigurationRequest
     * @return DeleteConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/DeleteConfiguration.ts.html |here} to see how to use DeleteConfiguration API.
     */
    deleteConfiguration(deleteConfigurationRequest: requests.DeleteConfigurationRequest): Promise<responses.DeleteConfigurationResponse>;
    /**
     * Get the full details of the specified Configuration, including the list of MySQL Variables and their values.
     *
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest: requests.GetConfigurationRequest): Promise<responses.GetConfigurationResponse>;
    /**
       * Lists the Configurations available when creating a DB System.
  * <p>
  This may include DEFAULT configurations per Shape and CUSTOM configurations.
  * <p>
  The default sort order is a multi-part sort by:
  *   - shapeName, ascending
  *   - DEFAULT-before-CUSTOM
  *   - displayName ascending
  *
       * @param ListConfigurationsRequest
       * @return ListConfigurationsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListConfigurations.ts.html |here} to see how to use ListConfigurations API.
       */
    listConfigurations(listConfigurationsRequest: requests.ListConfigurationsRequest): Promise<responses.ListConfigurationsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ConfigurationSummary objects
     * contained in responses from the listConfigurations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConfigurations(request: requests.ListConfigurationsRequest): AsyncIterableIterator<models.ConfigurationSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listConfigurations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConfigurationsResponses(request: requests.ListConfigurationsRequest): AsyncIterableIterator<responses.ListConfigurationsResponse>;
    /**
     * Gets a list of the shapes you can use to create a new MySQL DB System.
     * The shape determines the resources allocated to the DB System:
     * CPU cores and memory for VM shapes; CPU cores, memory and
     * storage for non-VM (or bare metal) shapes.
     *
     * @param ListShapesRequest
     * @return ListShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListShapes.ts.html |here} to see how to use ListShapes API.
     */
    listShapes(listShapesRequest: requests.ListShapesRequest): Promise<responses.ListShapesResponse>;
    /**
       * Get a list of supported and available MySQL database major versions.
  * <p>
  The list is sorted by version family.
  *
       * @param ListVersionsRequest
       * @return ListVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListVersions.ts.html |here} to see how to use ListVersions API.
       */
    listVersions(listVersionsRequest: requests.ListVersionsRequest): Promise<responses.ListVersionsResponse>;
    /**
     * Updates the Configuration details.
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest: requests.UpdateConfigurationRequest): Promise<responses.UpdateConfigurationResponse>;
}
export declare enum WorkRequestsApiKeys {
}
export declare class WorkRequestsClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestsWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestsWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestsWaiter;
    /**
     * Gets the status of the work request with the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<models.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<models.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a specified compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/mysql/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<models.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
}
