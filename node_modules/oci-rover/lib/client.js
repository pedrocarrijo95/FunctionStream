"use strict";
/**
 * RoverCloudService API
 * A description of the RoverCloudService API.
 * OpenAPI spec version: 20201210
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoverNodeClient = exports.RoverNodeApiKeys = exports.RoverEntitlementClient = exports.RoverEntitlementApiKeys = exports.RoverClusterClient = exports.RoverClusterApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const rovercluster_waiter_1 = require("./rovercluster-waiter");
const roverentitlement_waiter_1 = require("./roverentitlement-waiter");
const rovernode_waiter_1 = require("./rovernode-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var RoverClusterApiKeys;
(function (RoverClusterApiKeys) {
})(RoverClusterApiKeys = exports.RoverClusterApiKeys || (exports.RoverClusterApiKeys = {}));
class RoverClusterClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201210";
        if (this.logger)
            this.logger.info(`RoverClusterClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(RoverClusterClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(RoverClusterClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new RoverClusterWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new rovercluster_waiter_1.RoverClusterWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a cluster into a different compartment.
     * @param ChangeRoverClusterCompartmentRequest
     * @return ChangeRoverClusterCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ChangeRoverClusterCompartment.ts.html |here} to see how to use ChangeRoverClusterCompartment API.
     */
    changeRoverClusterCompartment(changeRoverClusterCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#changeRoverClusterCompartment.");
            const pathParams = {
                "{roverClusterId}": changeRoverClusterCompartmentRequest.roverClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeRoverClusterCompartmentRequest.ifMatch,
                "opc-request-id": changeRoverClusterCompartmentRequest.opcRequestId,
                "opc-retry-token": changeRoverClusterCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters/{roverClusterId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRoverClusterCompartmentRequest.changeRoverClusterCompartmentDetails, "ChangeRoverClusterCompartmentDetails", models.ChangeRoverClusterCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeRoverClusterCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new RoverCluster.
     *
     * @param CreateRoverClusterRequest
     * @return CreateRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/CreateRoverCluster.ts.html |here} to see how to use CreateRoverCluster API.
     */
    createRoverCluster(createRoverClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#createRoverCluster.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRoverClusterRequest.opcRetryToken,
                "opc-request-id": createRoverClusterRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRoverClusterRequest.createRoverClusterDetails, "CreateRoverClusterDetails", models.CreateRoverClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRoverClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverCluster",
                    bodyModel: "model.RoverCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a RoverCluster resource by identifier
     * @param DeleteRoverClusterRequest
     * @return DeleteRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/DeleteRoverCluster.ts.html |here} to see how to use DeleteRoverCluster API.
     */
    deleteRoverCluster(deleteRoverClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#deleteRoverCluster.");
            const pathParams = {
                "{roverClusterId}": deleteRoverClusterRequest.roverClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRoverClusterRequest.ifMatch,
                "opc-request-id": deleteRoverClusterRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters/{roverClusterId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRoverClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a RoverCluster by identifier
     * @param GetRoverClusterRequest
     * @return GetRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverCluster.ts.html |here} to see how to use GetRoverCluster API.
     */
    getRoverCluster(getRoverClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#getRoverCluster.");
            const pathParams = {
                "{roverClusterId}": getRoverClusterRequest.roverClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRoverClusterRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters/{roverClusterId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverCluster",
                    bodyModel: "model.RoverCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the certificate for a rover cluster
     * @param GetRoverClusterCertificateRequest
     * @return GetRoverClusterCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverClusterCertificate.ts.html |here} to see how to use GetRoverClusterCertificate API.
     */
    getRoverClusterCertificate(getRoverClusterCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#getRoverClusterCertificate.");
            const pathParams = {
                "{roverClusterId}": getRoverClusterCertificateRequest.roverClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRoverClusterCertificateRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters/{roverClusterId}/certificate",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverClusterCertificateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverClusterCertificate",
                    bodyModel: "model.RoverClusterCertificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of RoverClusters.
     *
     * @param ListRoverClustersRequest
     * @return ListRoverClustersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ListRoverClusters.ts.html |here} to see how to use ListRoverClusters API.
     */
    listRoverClusters(listRoverClustersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#listRoverClusters.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRoverClustersRequest.compartmentId,
                "displayName": listRoverClustersRequest.displayName,
                "limit": listRoverClustersRequest.limit,
                "page": listRoverClustersRequest.page,
                "lifecycleState": listRoverClustersRequest.lifecycleState,
                "sortOrder": listRoverClustersRequest.sortOrder,
                "sortBy": listRoverClustersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRoverClustersRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRoverClustersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverClusterCollection",
                    bodyModel: "model.RoverClusterCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the RoverCluster
     * @param UpdateRoverClusterRequest
     * @return UpdateRoverClusterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/UpdateRoverCluster.ts.html |here} to see how to use UpdateRoverCluster API.
     */
    updateRoverCluster(updateRoverClusterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverClusterClient#updateRoverCluster.");
            const pathParams = {
                "{roverClusterId}": updateRoverClusterRequest.roverClusterId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRoverClusterRequest.ifMatch,
                "opc-request-id": updateRoverClusterRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverClusters/{roverClusterId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRoverClusterRequest.updateRoverClusterDetails, "UpdateRoverClusterDetails", models.UpdateRoverClusterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRoverClusterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverCluster",
                    bodyModel: "model.RoverCluster",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.RoverClusterClient = RoverClusterClient;
RoverClusterClient.serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
var RoverEntitlementApiKeys;
(function (RoverEntitlementApiKeys) {
})(RoverEntitlementApiKeys = exports.RoverEntitlementApiKeys || (exports.RoverEntitlementApiKeys = {}));
class RoverEntitlementClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201210";
        if (this.logger)
            this.logger.info(`RoverEntitlementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(RoverEntitlementClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(RoverEntitlementClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new RoverEntitlementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new roverentitlement_waiter_1.RoverEntitlementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves an entitlement into a different compartment.
     * @param ChangeRoverEntitlementCompartmentRequest
     * @return ChangeRoverEntitlementCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ChangeRoverEntitlementCompartment.ts.html |here} to see how to use ChangeRoverEntitlementCompartment API.
     */
    changeRoverEntitlementCompartment(changeRoverEntitlementCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#changeRoverEntitlementCompartment.");
            const pathParams = {
                "{roverEntitlementId}": changeRoverEntitlementCompartmentRequest.roverEntitlementId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeRoverEntitlementCompartmentRequest.ifMatch,
                "opc-request-id": changeRoverEntitlementCompartmentRequest.opcRequestId,
                "opc-retry-token": changeRoverEntitlementCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements/{roverEntitlementId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRoverEntitlementCompartmentRequest.changeRoverEntitlementCompartmentDetails, "ChangeRoverEntitlementCompartmentDetails", models.ChangeRoverEntitlementCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeRoverEntitlementCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create the Entitlement to use a Rover Device. It requires some offline process of review and signatures before request is granted.
     * @param CreateRoverEntitlementRequest
     * @return CreateRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/CreateRoverEntitlement.ts.html |here} to see how to use CreateRoverEntitlement API.
     */
    createRoverEntitlement(createRoverEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#createRoverEntitlement.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRoverEntitlementRequest.opcRetryToken,
                "opc-request-id": createRoverEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRoverEntitlementRequest.createRoverEntitlementDetails, "CreateRoverEntitlementDetails", models.CreateRoverEntitlementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRoverEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverEntitlement",
                    bodyModel: "model.RoverEntitlement",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a rover entitlement
     * @param DeleteRoverEntitlementRequest
     * @return DeleteRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/DeleteRoverEntitlement.ts.html |here} to see how to use DeleteRoverEntitlement API.
     */
    deleteRoverEntitlement(deleteRoverEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#deleteRoverEntitlement.");
            const pathParams = {
                "{roverEntitlementId}": deleteRoverEntitlementRequest.roverEntitlementId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteRoverEntitlementRequest.opcRetryToken,
                "opc-request-id": deleteRoverEntitlementRequest.opcRequestId,
                "if-match": deleteRoverEntitlementRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements/{roverEntitlementId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRoverEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes the Rover Device Entitlement in detail
     * @param GetRoverEntitlementRequest
     * @return GetRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverEntitlement.ts.html |here} to see how to use GetRoverEntitlement API.
     */
    getRoverEntitlement(getRoverEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#getRoverEntitlement.");
            const pathParams = {
                "{roverEntitlementId}": getRoverEntitlementRequest.roverEntitlementId
            };
            const queryParams = {
                "compartmentId": getRoverEntitlementRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getRoverEntitlementRequest.opcRetryToken,
                "opc-request-id": getRoverEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements/{roverEntitlementId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverEntitlement",
                    bodyModel: "model.RoverEntitlement",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of RoverEntitlements.
     * @param ListRoverEntitlementsRequest
     * @return ListRoverEntitlementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ListRoverEntitlements.ts.html |here} to see how to use ListRoverEntitlements API.
     */
    listRoverEntitlements(listRoverEntitlementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#listRoverEntitlements.");
            const pathParams = {};
            const queryParams = {
                "id": listRoverEntitlementsRequest.id,
                "compartmentId": listRoverEntitlementsRequest.compartmentId,
                "displayName": listRoverEntitlementsRequest.displayName,
                "lifecycleState": listRoverEntitlementsRequest.lifecycleState,
                "limit": listRoverEntitlementsRequest.limit,
                "page": listRoverEntitlementsRequest.page,
                "sortOrder": listRoverEntitlementsRequest.sortOrder,
                "sortBy": listRoverEntitlementsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRoverEntitlementsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRoverEntitlementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverEntitlementCollection",
                    bodyModel: "model.RoverEntitlementCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the RoverEntitlement
     * @param UpdateRoverEntitlementRequest
     * @return UpdateRoverEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/UpdateRoverEntitlement.ts.html |here} to see how to use UpdateRoverEntitlement API.
     */
    updateRoverEntitlement(updateRoverEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverEntitlementClient#updateRoverEntitlement.");
            const pathParams = {
                "{roverEntitlementId}": updateRoverEntitlementRequest.roverEntitlementId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRoverEntitlementRequest.ifMatch,
                "opc-request-id": updateRoverEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverEntitlements/{roverEntitlementId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRoverEntitlementRequest.updateRoverEntitlementDetails, "UpdateRoverEntitlementDetails", models.UpdateRoverEntitlementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRoverEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverEntitlement",
                    bodyModel: "model.RoverEntitlement",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.RoverEntitlementClient = RoverEntitlementClient;
RoverEntitlementClient.serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
var RoverNodeApiKeys;
(function (RoverNodeApiKeys) {
})(RoverNodeApiKeys = exports.RoverNodeApiKeys || (exports.RoverNodeApiKeys = {}));
class RoverNodeClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201210";
        if (this.logger)
            this.logger.info(`RoverNodeClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(RoverNodeClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(RoverNodeClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new RoverNodeWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new rovernode_waiter_1.RoverNodeWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a rover node into a different compartment.
     * @param ChangeRoverNodeCompartmentRequest
     * @return ChangeRoverNodeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ChangeRoverNodeCompartment.ts.html |here} to see how to use ChangeRoverNodeCompartment API.
     */
    changeRoverNodeCompartment(changeRoverNodeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#changeRoverNodeCompartment.");
            const pathParams = {
                "{roverNodeId}": changeRoverNodeCompartmentRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeRoverNodeCompartmentRequest.ifMatch,
                "opc-request-id": changeRoverNodeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeRoverNodeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRoverNodeCompartmentRequest.changeRoverNodeCompartmentDetails, "ChangeRoverNodeCompartmentDetails", models.ChangeRoverNodeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeRoverNodeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new RoverNode.
     *
     * @param CreateRoverNodeRequest
     * @return CreateRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/CreateRoverNode.ts.html |here} to see how to use CreateRoverNode API.
     */
    createRoverNode(createRoverNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#createRoverNode.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRoverNodeRequest.opcRetryToken,
                "opc-request-id": createRoverNodeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRoverNodeRequest.createRoverNodeDetails, "CreateRoverNodeDetails", models.CreateRoverNodeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRoverNodeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNode",
                    bodyModel: "model.RoverNode",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a RoverNode resource by identifier
     * @param DeleteRoverNodeRequest
     * @return DeleteRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/DeleteRoverNode.ts.html |here} to see how to use DeleteRoverNode API.
     */
    deleteRoverNode(deleteRoverNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#deleteRoverNode.");
            const pathParams = {
                "{roverNodeId}": deleteRoverNodeRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRoverNodeRequest.ifMatch,
                "opc-request-id": deleteRoverNodeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRoverNodeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a RoverNode by identifier.
     * @param GetRoverNodeRequest
     * @return GetRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverNode.ts.html |here} to see how to use GetRoverNode API.
     */
    getRoverNode(getRoverNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#getRoverNode.");
            const pathParams = {
                "{roverNodeId}": getRoverNodeRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRoverNodeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverNodeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNode",
                    bodyModel: "model.RoverNode",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the certificate for a rover node
     * @param GetRoverNodeCertificateRequest
     * @return GetRoverNodeCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverNodeCertificate.ts.html |here} to see how to use GetRoverNodeCertificate API.
     */
    getRoverNodeCertificate(getRoverNodeCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#getRoverNodeCertificate.");
            const pathParams = {
                "{roverNodeId}": getRoverNodeCertificateRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRoverNodeCertificateRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}/certificate",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverNodeCertificateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNodeCertificate",
                    bodyModel: "model.RoverNodeCertificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the data encryption key for a rover node.
     * @param GetRoverNodeEncryptionKeyRequest
     * @return GetRoverNodeEncryptionKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverNodeEncryptionKey.ts.html |here} to see how to use GetRoverNodeEncryptionKey API.
     */
    getRoverNodeEncryptionKey(getRoverNodeEncryptionKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#getRoverNodeEncryptionKey.");
            const pathParams = {
                "{roverNodeId}": getRoverNodeEncryptionKeyRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getRoverNodeEncryptionKeyRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}/encryptionKey",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverNodeEncryptionKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNodeEncryptionKey",
                    bodyModel: "model.RoverNodeEncryptionKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the resource principal token for a rover node
     * @param GetRoverNodeGetRptRequest
     * @return GetRoverNodeGetRptResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/GetRoverNodeGetRpt.ts.html |here} to see how to use GetRoverNodeGetRpt API.
     */
    getRoverNodeGetRpt(getRoverNodeGetRptRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#getRoverNodeGetRpt.");
            const pathParams = {
                "{roverNodeId}": getRoverNodeGetRptRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "jwt": getRoverNodeGetRptRequest.jwt,
                "opc-request-id": getRoverNodeGetRptRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}/getRpt",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRoverNodeGetRptRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNodeGetRpt",
                    bodyModel: "model.RoverNodeGetRpt",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of RoverNodes.
     *
     * @param ListRoverNodesRequest
     * @return ListRoverNodesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/ListRoverNodes.ts.html |here} to see how to use ListRoverNodes API.
     */
    listRoverNodes(listRoverNodesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#listRoverNodes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRoverNodesRequest.compartmentId,
                "displayName": listRoverNodesRequest.displayName,
                "limit": listRoverNodesRequest.limit,
                "page": listRoverNodesRequest.page,
                "lifecycleState": listRoverNodesRequest.lifecycleState,
                "sortOrder": listRoverNodesRequest.sortOrder,
                "sortBy": listRoverNodesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRoverNodesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRoverNodesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNodeCollection",
                    bodyModel: "model.RoverNodeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the resource principal public key for a rover node
     * @param RoverNodeActionSetKeyRequest
     * @return RoverNodeActionSetKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/RoverNodeActionSetKey.ts.html |here} to see how to use RoverNodeActionSetKey API.
     */
    roverNodeActionSetKey(roverNodeActionSetKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#roverNodeActionSetKey.");
            const pathParams = {
                "{roverNodeId}": roverNodeActionSetKeyRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "jwt": roverNodeActionSetKeyRequest.jwt,
                "if-match": roverNodeActionSetKeyRequest.ifMatch,
                "opc-request-id": roverNodeActionSetKeyRequest.opcRequestId,
                "opc-retry-token": roverNodeActionSetKeyRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}/actions/setKey",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(roverNodeActionSetKeyRequest.roverNodeActionSetKeyDetails, "RoverNodeActionSetKeyDetails", models.RoverNodeActionSetKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, roverNodeActionSetKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNodeSetKey",
                    bodyModel: "model.RoverNodeSetKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the RoverNode
     * @param UpdateRoverNodeRequest
     * @return UpdateRoverNodeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/rover/UpdateRoverNode.ts.html |here} to see how to use UpdateRoverNode API.
     */
    updateRoverNode(updateRoverNodeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation RoverNodeClient#updateRoverNode.");
            const pathParams = {
                "{roverNodeId}": updateRoverNodeRequest.roverNodeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRoverNodeRequest.ifMatch,
                "opc-request-id": updateRoverNodeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/roverNodes/{roverNodeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRoverNodeRequest.updateRoverNodeDetails, "UpdateRoverNodeDetails", models.UpdateRoverNodeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRoverNodeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "roverNode",
                    bodyModel: "model.RoverNode",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.RoverNodeClient = RoverNodeClient;
RoverNodeClient.serviceEndpointTemplate = "https://rover.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map