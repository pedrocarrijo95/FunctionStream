"use strict";
/**
 * Data Transfer Service API
 * Data Transfer Service API Specification
 * OpenAPI spec version: 1.0.015
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferPackageClient = exports.TransferPackageApiKeys = exports.TransferJobClient = exports.TransferJobApiKeys = exports.TransferDeviceClient = exports.TransferDeviceApiKeys = exports.TransferApplianceEntitlementClient = exports.TransferApplianceEntitlementApiKeys = exports.TransferApplianceClient = exports.TransferApplianceApiKeys = exports.ShippingVendorsClient = exports.ShippingVendorsApiKeys = exports.ApplianceExportJobClient = exports.ApplianceExportJobApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const applianceexportjob_waiter_1 = require("./applianceexportjob-waiter");
const transferappliance_waiter_1 = require("./transferappliance-waiter");
const transferapplianceentitlement_waiter_1 = require("./transferapplianceentitlement-waiter");
const transferdevice_waiter_1 = require("./transferdevice-waiter");
const transferjob_waiter_1 = require("./transferjob-waiter");
const transferpackage_waiter_1 = require("./transferpackage-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ApplianceExportJobApiKeys;
(function (ApplianceExportJobApiKeys) {
})(ApplianceExportJobApiKeys = exports.ApplianceExportJobApiKeys || (exports.ApplianceExportJobApiKeys = {}));
class ApplianceExportJobClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`ApplianceExportJobClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ApplianceExportJobClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ApplianceExportJobClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ApplianceExportJobWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new applianceexportjob_waiter_1.ApplianceExportJobWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a ApplianceExportJob into a different compartment.
     * @param ChangeApplianceExportJobCompartmentRequest
     * @return ChangeApplianceExportJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ChangeApplianceExportJobCompartment.ts.html |here} to see how to use ChangeApplianceExportJobCompartment API.
     */
    changeApplianceExportJobCompartment(changeApplianceExportJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#changeApplianceExportJobCompartment.");
            const pathParams = {
                "{applianceExportJobId}": changeApplianceExportJobCompartmentRequest.applianceExportJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeApplianceExportJobCompartmentRequest.ifMatch,
                "opc-request-id": changeApplianceExportJobCompartmentRequest.opcRequestId,
                "opc-retry-token": changeApplianceExportJobCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs/{applianceExportJobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeApplianceExportJobCompartmentRequest.changeApplianceExportJobCompartmentDetails, "ChangeApplianceExportJobCompartmentDetails", models.ChangeApplianceExportJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeApplianceExportJobCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Appliance Export Job that corresponds with customer's logical dataset
     * @param CreateApplianceExportJobRequest
     * @return CreateApplianceExportJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateApplianceExportJob.ts.html |here} to see how to use CreateApplianceExportJob API.
     */
    createApplianceExportJob(createApplianceExportJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#createApplianceExportJob.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createApplianceExportJobRequest.opcRetryToken,
                "opc-request-id": createApplianceExportJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createApplianceExportJobRequest.createApplianceExportJobDetails, "CreateApplianceExportJobDetails", models.CreateApplianceExportJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createApplianceExportJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "applianceExportJob",
                    bodyModel: "model.ApplianceExportJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * deletes a Appliance Export Job
     * @param DeleteApplianceExportJobRequest
     * @return DeleteApplianceExportJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DeleteApplianceExportJob.ts.html |here} to see how to use DeleteApplianceExportJob API.
     */
    deleteApplianceExportJob(deleteApplianceExportJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#deleteApplianceExportJob.");
            const pathParams = {
                "{applianceExportJobId}": deleteApplianceExportJobRequest.applianceExportJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteApplianceExportJobRequest.ifMatch,
                "opc-request-id": deleteApplianceExportJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs/{applianceExportJobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteApplianceExportJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a Appliance Export Job in detail
     * @param GetApplianceExportJobRequest
     * @return GetApplianceExportJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetApplianceExportJob.ts.html |here} to see how to use GetApplianceExportJob API.
     */
    getApplianceExportJob(getApplianceExportJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#getApplianceExportJob.");
            const pathParams = {
                "{applianceExportJobId}": getApplianceExportJobRequest.applianceExportJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getApplianceExportJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs/{applianceExportJobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getApplianceExportJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "applianceExportJob",
                    bodyModel: "model.ApplianceExportJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Appliance Export Jobs in a given compartment
     * @param ListApplianceExportJobsRequest
     * @return ListApplianceExportJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListApplianceExportJobs.ts.html |here} to see how to use ListApplianceExportJobs API.
     */
    listApplianceExportJobs(listApplianceExportJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#listApplianceExportJobs.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listApplianceExportJobsRequest.compartmentId,
                "lifecycleState": listApplianceExportJobsRequest.lifecycleState,
                "displayName": listApplianceExportJobsRequest.displayName,
                "limit": listApplianceExportJobsRequest.limit,
                "page": listApplianceExportJobsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listApplianceExportJobsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listApplianceExportJobsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ApplianceExportJobSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ApplianceExportJobSummary objects
     * contained in responses from the listApplianceExportJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllApplianceExportJobs(request) {
        return oci_common_1.paginateRecords(request, req => this.listApplianceExportJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listApplianceExportJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllApplianceExportJobsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listApplianceExportJobs(req));
    }
    /**
     * Updates a Appliance Export Job that corresponds with customer's logical dataset.
     * @param UpdateApplianceExportJobRequest
     * @return UpdateApplianceExportJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/UpdateApplianceExportJob.ts.html |here} to see how to use UpdateApplianceExportJob API.
     */
    updateApplianceExportJob(updateApplianceExportJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ApplianceExportJobClient#updateApplianceExportJob.");
            const pathParams = {
                "{applianceExportJobId}": updateApplianceExportJobRequest.applianceExportJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateApplianceExportJobRequest.ifMatch,
                "opc-request-id": updateApplianceExportJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/applianceExportJobs/{applianceExportJobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateApplianceExportJobRequest.updateApplianceExportJobDetails, "UpdateApplianceExportJobDetails", models.UpdateApplianceExportJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateApplianceExportJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "applianceExportJob",
                    bodyModel: "model.ApplianceExportJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ApplianceExportJobClient = ApplianceExportJobClient;
ApplianceExportJobClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var ShippingVendorsApiKeys;
(function (ShippingVendorsApiKeys) {
})(ShippingVendorsApiKeys = exports.ShippingVendorsApiKeys || (exports.ShippingVendorsApiKeys = {}));
class ShippingVendorsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`ShippingVendorsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ShippingVendorsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ShippingVendorsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Lists available shipping vendors for Transfer Package delivery
     * @param ListShippingVendorsRequest
     * @return ListShippingVendorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListShippingVendors.ts.html |here} to see how to use ListShippingVendors API.
     */
    listShippingVendors(listShippingVendorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ShippingVendorsClient#listShippingVendors.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/shippingVendors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listShippingVendorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "shippingVendors",
                    bodyModel: "model.ShippingVendors",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ShippingVendorsClient = ShippingVendorsClient;
ShippingVendorsClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var TransferApplianceApiKeys;
(function (TransferApplianceApiKeys) {
})(TransferApplianceApiKeys = exports.TransferApplianceApiKeys || (exports.TransferApplianceApiKeys = {}));
class TransferApplianceClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`TransferApplianceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(TransferApplianceClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(TransferApplianceClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new TransferApplianceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new transferappliance_waiter_1.TransferApplianceWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Create a new Transfer Appliance
     * @param CreateTransferApplianceRequest
     * @return CreateTransferApplianceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferAppliance.ts.html |here} to see how to use CreateTransferAppliance API.
     */
    createTransferAppliance(createTransferApplianceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#createTransferAppliance.");
            const pathParams = {
                "{id}": createTransferApplianceRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTransferApplianceRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferApplianceRequest.createTransferApplianceDetails, "CreateTransferApplianceDetails", models.CreateTransferApplianceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferApplianceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferAppliance",
                    bodyModel: "model.TransferAppliance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an X.509 certificate from a public key
     * @param CreateTransferApplianceAdminCredentialsRequest
     * @return CreateTransferApplianceAdminCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferApplianceAdminCredentials.ts.html |here} to see how to use CreateTransferApplianceAdminCredentials API.
     */
    createTransferApplianceAdminCredentials(createTransferApplianceAdminCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#createTransferApplianceAdminCredentials.");
            const pathParams = {
                "{id}": createTransferApplianceAdminCredentialsRequest.id,
                "{transferApplianceLabel}": createTransferApplianceAdminCredentialsRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/admin_credentials",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferApplianceAdminCredentialsRequest.adminPublicKey, "TransferAppliancePublicKey", models.TransferAppliancePublicKey.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferApplianceAdminCredentialsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferApplianceCertificate",
                    bodyModel: "model.TransferApplianceCertificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * deletes a transfer Appliance
     * @param DeleteTransferApplianceRequest
     * @return DeleteTransferApplianceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DeleteTransferAppliance.ts.html |here} to see how to use DeleteTransferAppliance API.
     */
    deleteTransferAppliance(deleteTransferApplianceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#deleteTransferAppliance.");
            const pathParams = {
                "{id}": deleteTransferApplianceRequest.id,
                "{transferApplianceLabel}": deleteTransferApplianceRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTransferApplianceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a transfer appliance in detail
     * @param GetTransferApplianceRequest
     * @return GetTransferApplianceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferAppliance.ts.html |here} to see how to use GetTransferAppliance API.
     */
    getTransferAppliance(getTransferApplianceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#getTransferAppliance.");
            const pathParams = {
                "{id}": getTransferApplianceRequest.id,
                "{transferApplianceLabel}": getTransferApplianceRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferApplianceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferAppliance",
                    bodyModel: "model.TransferAppliance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the x.509 certificate for the Transfer Appliance's dedicated Certificate Authority (CA)
     * @param GetTransferApplianceCertificateAuthorityCertificateRequest
     * @return GetTransferApplianceCertificateAuthorityCertificateResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferApplianceCertificateAuthorityCertificate.ts.html |here} to see how to use GetTransferApplianceCertificateAuthorityCertificate API.
     */
    getTransferApplianceCertificateAuthorityCertificate(getTransferApplianceCertificateAuthorityCertificateRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#getTransferApplianceCertificateAuthorityCertificate.");
            const pathParams = {
                "{id}": getTransferApplianceCertificateAuthorityCertificateRequest.id,
                "{transferApplianceLabel}": getTransferApplianceCertificateAuthorityCertificateRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/certificate_authority_certificate",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferApplianceCertificateAuthorityCertificateRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferApplianceCertificate",
                    bodyModel: "model.TransferApplianceCertificate",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a transfer appliance encryptionPassphrase in detail
     * @param GetTransferApplianceEncryptionPassphraseRequest
     * @return GetTransferApplianceEncryptionPassphraseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferApplianceEncryptionPassphrase.ts.html |here} to see how to use GetTransferApplianceEncryptionPassphrase API.
     */
    getTransferApplianceEncryptionPassphrase(getTransferApplianceEncryptionPassphraseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#getTransferApplianceEncryptionPassphrase.");
            const pathParams = {
                "{id}": getTransferApplianceEncryptionPassphraseRequest.id,
                "{transferApplianceLabel}": getTransferApplianceEncryptionPassphraseRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}/encryptionPassphrase",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferApplianceEncryptionPassphraseRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferApplianceEncryptionPassphrase",
                    bodyModel: "model.TransferApplianceEncryptionPassphrase",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Transfer Appliances associated with a transferJob
     * @param ListTransferAppliancesRequest
     * @return ListTransferAppliancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListTransferAppliances.ts.html |here} to see how to use ListTransferAppliances API.
     */
    listTransferAppliances(listTransferAppliancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#listTransferAppliances.");
            const pathParams = {
                "{id}": listTransferAppliancesRequest.id
            };
            const queryParams = {
                "lifecycleState": listTransferAppliancesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTransferAppliancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "multipleTransferAppliances",
                    bodyModel: "model.MultipleTransferAppliances",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a Transfer Appliance
     * @param UpdateTransferApplianceRequest
     * @return UpdateTransferApplianceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/UpdateTransferAppliance.ts.html |here} to see how to use UpdateTransferAppliance API.
     */
    updateTransferAppliance(updateTransferApplianceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceClient#updateTransferAppliance.");
            const pathParams = {
                "{id}": updateTransferApplianceRequest.id,
                "{transferApplianceLabel}": updateTransferApplianceRequest.transferApplianceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTransferApplianceRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferAppliances/{transferApplianceLabel}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTransferApplianceRequest.updateTransferApplianceDetails, "UpdateTransferApplianceDetails", models.UpdateTransferApplianceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTransferApplianceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferAppliance",
                    bodyModel: "model.TransferAppliance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.TransferApplianceClient = TransferApplianceClient;
TransferApplianceClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var TransferApplianceEntitlementApiKeys;
(function (TransferApplianceEntitlementApiKeys) {
})(TransferApplianceEntitlementApiKeys = exports.TransferApplianceEntitlementApiKeys || (exports.TransferApplianceEntitlementApiKeys = {}));
class TransferApplianceEntitlementClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`TransferApplianceEntitlementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(TransferApplianceEntitlementClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(TransferApplianceEntitlementClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new TransferApplianceEntitlementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new transferapplianceentitlement_waiter_1.TransferApplianceEntitlementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Create the Entitlement to use a Transfer Appliance. It requires some offline process of review and signatures before request is granted.
     * @param CreateTransferApplianceEntitlementRequest
     * @return CreateTransferApplianceEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferApplianceEntitlement.ts.html |here} to see how to use CreateTransferApplianceEntitlement API.
     */
    createTransferApplianceEntitlement(createTransferApplianceEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceEntitlementClient#createTransferApplianceEntitlement.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTransferApplianceEntitlementRequest.opcRetryToken,
                "opc-request-id": createTransferApplianceEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferApplianceEntitlement",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferApplianceEntitlementRequest.createTransferApplianceEntitlementDetails, "CreateTransferApplianceEntitlementDetails", models.CreateTransferApplianceEntitlementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferApplianceEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferApplianceEntitlement",
                    bodyModel: "model.TransferApplianceEntitlement",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes the Transfer Appliance Entitlement in detail
     * @param GetTransferApplianceEntitlementRequest
     * @return GetTransferApplianceEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferApplianceEntitlement.ts.html |here} to see how to use GetTransferApplianceEntitlement API.
     */
    getTransferApplianceEntitlement(getTransferApplianceEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceEntitlementClient#getTransferApplianceEntitlement.");
            const pathParams = {
                "{id}": getTransferApplianceEntitlementRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getTransferApplianceEntitlementRequest.opcRetryToken,
                "opc-request-id": getTransferApplianceEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferApplianceEntitlement/{id}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferApplianceEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferApplianceEntitlement",
                    bodyModel: "model.TransferApplianceEntitlement",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Transfer Transfer Appliance Entitlement
     * @param ListTransferApplianceEntitlementRequest
     * @return ListTransferApplianceEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListTransferApplianceEntitlement.ts.html |here} to see how to use ListTransferApplianceEntitlement API.
     */
    listTransferApplianceEntitlement(listTransferApplianceEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferApplianceEntitlementClient#listTransferApplianceEntitlement.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listTransferApplianceEntitlementRequest.compartmentId,
                "id": listTransferApplianceEntitlementRequest.id,
                "displayName": listTransferApplianceEntitlementRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTransferApplianceEntitlementRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferApplianceEntitlement",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTransferApplianceEntitlementRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "TransferApplianceEntitlementSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.TransferApplianceEntitlementClient = TransferApplianceEntitlementClient;
TransferApplianceEntitlementClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var TransferDeviceApiKeys;
(function (TransferDeviceApiKeys) {
})(TransferDeviceApiKeys = exports.TransferDeviceApiKeys || (exports.TransferDeviceApiKeys = {}));
class TransferDeviceClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`TransferDeviceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(TransferDeviceClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(TransferDeviceClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new TransferDeviceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new transferdevice_waiter_1.TransferDeviceWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Create a new Transfer Device
     * @param CreateTransferDeviceRequest
     * @return CreateTransferDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferDevice.ts.html |here} to see how to use CreateTransferDevice API.
     */
    createTransferDevice(createTransferDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferDeviceClient#createTransferDevice.");
            const pathParams = {
                "{id}": createTransferDeviceRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTransferDeviceRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferDevices",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferDeviceRequest.createTransferDeviceDetails, "CreateTransferDeviceDetails", models.CreateTransferDeviceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferDeviceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "newTransferDevice",
                    bodyModel: "model.NewTransferDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * deletes a transfer Device
     * @param DeleteTransferDeviceRequest
     * @return DeleteTransferDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DeleteTransferDevice.ts.html |here} to see how to use DeleteTransferDevice API.
     */
    deleteTransferDevice(deleteTransferDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferDeviceClient#deleteTransferDevice.");
            const pathParams = {
                "{id}": deleteTransferDeviceRequest.id,
                "{transferDeviceLabel}": deleteTransferDeviceRequest.transferDeviceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTransferDeviceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a transfer package in detail
     * @param GetTransferDeviceRequest
     * @return GetTransferDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferDevice.ts.html |here} to see how to use GetTransferDevice API.
     */
    getTransferDevice(getTransferDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferDeviceClient#getTransferDevice.");
            const pathParams = {
                "{id}": getTransferDeviceRequest.id,
                "{transferDeviceLabel}": getTransferDeviceRequest.transferDeviceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferDeviceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferDevice",
                    bodyModel: "model.TransferDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Transfer Devices associated with a transferJob
     * @param ListTransferDevicesRequest
     * @return ListTransferDevicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListTransferDevices.ts.html |here} to see how to use ListTransferDevices API.
     */
    listTransferDevices(listTransferDevicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferDeviceClient#listTransferDevices.");
            const pathParams = {
                "{id}": listTransferDevicesRequest.id
            };
            const queryParams = {
                "lifecycleState": listTransferDevicesRequest.lifecycleState,
                "displayName": listTransferDevicesRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferDevices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTransferDevicesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "multipleTransferDevices",
                    bodyModel: "model.MultipleTransferDevices",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a Transfer Device
     * @param UpdateTransferDeviceRequest
     * @return UpdateTransferDeviceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/UpdateTransferDevice.ts.html |here} to see how to use UpdateTransferDevice API.
     */
    updateTransferDevice(updateTransferDeviceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferDeviceClient#updateTransferDevice.");
            const pathParams = {
                "{id}": updateTransferDeviceRequest.id,
                "{transferDeviceLabel}": updateTransferDeviceRequest.transferDeviceLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTransferDeviceRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferDevices/{transferDeviceLabel}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTransferDeviceRequest.updateTransferDeviceDetails, "UpdateTransferDeviceDetails", models.UpdateTransferDeviceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTransferDeviceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferDevice",
                    bodyModel: "model.TransferDevice",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.TransferDeviceClient = TransferDeviceClient;
TransferDeviceClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var TransferJobApiKeys;
(function (TransferJobApiKeys) {
})(TransferJobApiKeys = exports.TransferJobApiKeys || (exports.TransferJobApiKeys = {}));
class TransferJobClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`TransferJobClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(TransferJobClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(TransferJobClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new TransferJobWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new transferjob_waiter_1.TransferJobWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a TransferJob into a different compartment.
     * @param ChangeTransferJobCompartmentRequest
     * @return ChangeTransferJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ChangeTransferJobCompartment.ts.html |here} to see how to use ChangeTransferJobCompartment API.
     */
    changeTransferJobCompartment(changeTransferJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#changeTransferJobCompartment.");
            const pathParams = {
                "{transferJobId}": changeTransferJobCompartmentRequest.transferJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeTransferJobCompartmentRequest.ifMatch,
                "opc-request-id": changeTransferJobCompartmentRequest.opcRequestId,
                "opc-retry-token": changeTransferJobCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{transferJobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeTransferJobCompartmentRequest.changeTransferJobCompartmentDetails, "ChangeTransferJobCompartmentDetails", models.ChangeTransferJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeTransferJobCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new Transfer Job that corresponds with customer's logical dataset e.g. a DB or a filesystem.
     * @param CreateTransferJobRequest
     * @return CreateTransferJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferJob.ts.html |here} to see how to use CreateTransferJob API.
     */
    createTransferJob(createTransferJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#createTransferJob.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTransferJobRequest.opcRetryToken,
                "opc-request-id": createTransferJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferJobRequest.createTransferJobDetails, "CreateTransferJobDetails", models.CreateTransferJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferJob",
                    bodyModel: "model.TransferJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * deletes a transfer job
     * @param DeleteTransferJobRequest
     * @return DeleteTransferJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DeleteTransferJob.ts.html |here} to see how to use DeleteTransferJob API.
     */
    deleteTransferJob(deleteTransferJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#deleteTransferJob.");
            const pathParams = {
                "{id}": deleteTransferJobRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteTransferJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTransferJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a transfer job in detail
     * @param GetTransferJobRequest
     * @return GetTransferJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferJob.ts.html |here} to see how to use GetTransferJob API.
     */
    getTransferJob(getTransferJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#getTransferJob.");
            const pathParams = {
                "{id}": getTransferJobRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTransferJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferJob",
                    bodyModel: "model.TransferJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Transfer Jobs in a given compartment
     * @param ListTransferJobsRequest
     * @return ListTransferJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListTransferJobs.ts.html |here} to see how to use ListTransferJobs API.
     */
    listTransferJobs(listTransferJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#listTransferJobs.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listTransferJobsRequest.compartmentId,
                "lifecycleState": listTransferJobsRequest.lifecycleState,
                "displayName": listTransferJobsRequest.displayName,
                "limit": listTransferJobsRequest.limit,
                "page": listTransferJobsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTransferJobsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTransferJobsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "TransferJobSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.TransferJobSummary objects
     * contained in responses from the listTransferJobs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTransferJobs(request) {
        return oci_common_1.paginateRecords(request, req => this.listTransferJobs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTransferJobs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTransferJobsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTransferJobs(req));
    }
    /**
     * Updates a Transfer Job that corresponds with customer's logical dataset e.g. a DB or a filesystem.
     * @param UpdateTransferJobRequest
     * @return UpdateTransferJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/UpdateTransferJob.ts.html |here} to see how to use UpdateTransferJob API.
     */
    updateTransferJob(updateTransferJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferJobClient#updateTransferJob.");
            const pathParams = {
                "{id}": updateTransferJobRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTransferJobRequest.ifMatch,
                "opc-request-id": updateTransferJobRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTransferJobRequest.updateTransferJobDetails, "UpdateTransferJobDetails", models.UpdateTransferJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTransferJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferJob",
                    bodyModel: "model.TransferJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.TransferJobClient = TransferJobClient;
TransferJobClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
var TransferPackageApiKeys;
(function (TransferPackageApiKeys) {
})(TransferPackageApiKeys = exports.TransferPackageApiKeys || (exports.TransferPackageApiKeys = {}));
class TransferPackageClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171001";
        if (this.logger)
            this.logger.info(`TransferPackageClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(TransferPackageClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(TransferPackageClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new TransferPackageWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new transferpackage_waiter_1.TransferPackageWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Attaches Devices to a Transfer Package
     * @param AttachDevicesToTransferPackageRequest
     * @return AttachDevicesToTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/AttachDevicesToTransferPackage.ts.html |here} to see how to use AttachDevicesToTransferPackage API.
     */
    attachDevicesToTransferPackage(attachDevicesToTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#attachDevicesToTransferPackage.");
            const pathParams = {
                "{id}": attachDevicesToTransferPackageRequest.id,
                "{transferPackageLabel}": attachDevicesToTransferPackageRequest.transferPackageLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}/actions/attachDevices",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachDevicesToTransferPackageRequest.attachDevicesDetails, "AttachDevicesDetails", models.AttachDevicesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachDevicesToTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new Transfer Package
     * @param CreateTransferPackageRequest
     * @return CreateTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/CreateTransferPackage.ts.html |here} to see how to use CreateTransferPackage API.
     */
    createTransferPackage(createTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#createTransferPackage.");
            const pathParams = {
                "{id}": createTransferPackageRequest.id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTransferPackageRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTransferPackageRequest.createTransferPackageDetails, "CreateTransferPackageDetails", models.CreateTransferPackageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferPackage",
                    bodyModel: "model.TransferPackage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * deletes a transfer Package
     * @param DeleteTransferPackageRequest
     * @return DeleteTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DeleteTransferPackage.ts.html |here} to see how to use DeleteTransferPackage API.
     */
    deleteTransferPackage(deleteTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#deleteTransferPackage.");
            const pathParams = {
                "{id}": deleteTransferPackageRequest.id,
                "{transferPackageLabel}": deleteTransferPackageRequest.transferPackageLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches Devices from a Transfer Package
     * @param DetachDevicesFromTransferPackageRequest
     * @return DetachDevicesFromTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/DetachDevicesFromTransferPackage.ts.html |here} to see how to use DetachDevicesFromTransferPackage API.
     */
    detachDevicesFromTransferPackage(detachDevicesFromTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#detachDevicesFromTransferPackage.");
            const pathParams = {
                "{id}": detachDevicesFromTransferPackageRequest.id,
                "{transferPackageLabel}": detachDevicesFromTransferPackageRequest.transferPackageLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}/actions/detachDevices",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachDevicesFromTransferPackageRequest.detachDevicesDetails, "DetachDevicesDetails", models.DetachDevicesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachDevicesFromTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describes a transfer package in detail
     * @param GetTransferPackageRequest
     * @return GetTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/GetTransferPackage.ts.html |here} to see how to use GetTransferPackage API.
     */
    getTransferPackage(getTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#getTransferPackage.");
            const pathParams = {
                "{id}": getTransferPackageRequest.id,
                "{transferPackageLabel}": getTransferPackageRequest.transferPackageLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferPackage",
                    bodyModel: "model.TransferPackage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists Transfer Packages associated with a transferJob
     * @param ListTransferPackagesRequest
     * @return ListTransferPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/ListTransferPackages.ts.html |here} to see how to use ListTransferPackages API.
     */
    listTransferPackages(listTransferPackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#listTransferPackages.");
            const pathParams = {
                "{id}": listTransferPackagesRequest.id
            };
            const queryParams = {
                "lifecycleState": listTransferPackagesRequest.lifecycleState,
                "displayName": listTransferPackagesRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTransferPackagesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "multipleTransferPackages",
                    bodyModel: "model.MultipleTransferPackages",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a Transfer Package
     * @param UpdateTransferPackageRequest
     * @return UpdateTransferPackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dts/UpdateTransferPackage.ts.html |here} to see how to use UpdateTransferPackage API.
     */
    updateTransferPackage(updateTransferPackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation TransferPackageClient#updateTransferPackage.");
            const pathParams = {
                "{id}": updateTransferPackageRequest.id,
                "{transferPackageLabel}": updateTransferPackageRequest.transferPackageLabel
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTransferPackageRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/transferJobs/{id}/transferPackages/{transferPackageLabel}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTransferPackageRequest.updateTransferPackageDetails, "UpdateTransferPackageDetails", models.UpdateTransferPackageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTransferPackageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "transferPackage",
                    bodyModel: "model.TransferPackage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.TransferPackageClient = TransferPackageClient;
TransferPackageClient.serviceEndpointTemplate = "https://datatransfer.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map