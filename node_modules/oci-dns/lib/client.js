"use strict";
/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnsClient = exports.DnsApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const dns_waiter_1 = require("./dns-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DnsApiKeys;
(function (DnsApiKeys) {
})(DnsApiKeys = exports.DnsApiKeys || (exports.DnsApiKeys = {}));
class DnsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180115";
        if (this.logger)
            this.logger.info(`DnsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DnsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DnsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new DnsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new dns_waiter_1.DnsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a resolver into a different compartment along with its protected default view and any endpoints.
     * Zones in the default view are not moved.
     *
     * @param ChangeResolverCompartmentRequest
     * @return ChangeResolverCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ChangeResolverCompartment.ts.html |here} to see how to use ChangeResolverCompartment API.
     */
    changeResolverCompartment(changeResolverCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#changeResolverCompartment.");
            const pathParams = {
                "{resolverId}": changeResolverCompartmentRequest.resolverId
            };
            const queryParams = {
                "scope": changeResolverCompartmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": changeResolverCompartmentRequest.ifMatch,
                "opc-retry-token": changeResolverCompartmentRequest.opcRetryToken,
                "opc-request-id": changeResolverCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeResolverCompartmentRequest.changeResolverCompartmentDetails, "ChangeResolverCompartmentDetails", models.ChangeResolverCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeResolverCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a steering policy into a different compartment.
     * @param ChangeSteeringPolicyCompartmentRequest
     * @return ChangeSteeringPolicyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ChangeSteeringPolicyCompartment.ts.html |here} to see how to use ChangeSteeringPolicyCompartment API.
     */
    changeSteeringPolicyCompartment(changeSteeringPolicyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#changeSteeringPolicyCompartment.");
            const pathParams = {
                "{steeringPolicyId}": changeSteeringPolicyCompartmentRequest.steeringPolicyId
            };
            const queryParams = {
                "scope": changeSteeringPolicyCompartmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": changeSteeringPolicyCompartmentRequest.ifMatch,
                "opc-retry-token": changeSteeringPolicyCompartmentRequest.opcRetryToken,
                "opc-request-id": changeSteeringPolicyCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies/{steeringPolicyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSteeringPolicyCompartmentRequest.changeSteeringPolicyCompartmentDetails, "ChangeSteeringPolicyCompartmentDetails", models.ChangeSteeringPolicyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeSteeringPolicyCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a TSIG key into a different compartment.
     * @param ChangeTsigKeyCompartmentRequest
     * @return ChangeTsigKeyCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ChangeTsigKeyCompartment.ts.html |here} to see how to use ChangeTsigKeyCompartment API.
     */
    changeTsigKeyCompartment(changeTsigKeyCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#changeTsigKeyCompartment.");
            const pathParams = {
                "{tsigKeyId}": changeTsigKeyCompartmentRequest.tsigKeyId
            };
            const queryParams = {
                "scope": changeTsigKeyCompartmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": changeTsigKeyCompartmentRequest.ifMatch,
                "opc-retry-token": changeTsigKeyCompartmentRequest.opcRetryToken,
                "opc-request-id": changeTsigKeyCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys/{tsigKeyId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeTsigKeyCompartmentRequest.changeTsigKeyCompartmentDetails, "ChangeTsigKeyCompartmentDetails", models.ChangeTsigKeyCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeTsigKeyCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a view into a different compartment. Protected views cannot have their compartment changed.
     *
     * @param ChangeViewCompartmentRequest
     * @return ChangeViewCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ChangeViewCompartment.ts.html |here} to see how to use ChangeViewCompartment API.
     */
    changeViewCompartment(changeViewCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#changeViewCompartment.");
            const pathParams = {
                "{viewId}": changeViewCompartmentRequest.viewId
            };
            const queryParams = {
                "scope": changeViewCompartmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": changeViewCompartmentRequest.ifMatch,
                "opc-retry-token": changeViewCompartmentRequest.opcRetryToken,
                "opc-request-id": changeViewCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views/{viewId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeViewCompartmentRequest.changeViewCompartmentDetails, "ChangeViewCompartmentDetails", models.ChangeViewCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeViewCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a zone into a different compartment. Protected zones cannot have their compartment changed.
     * <p>
     **Note:** All SteeringPolicyAttachment objects associated with this zone will also be moved into the provided compartment.
     *
     * @param ChangeZoneCompartmentRequest
     * @return ChangeZoneCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ChangeZoneCompartment.ts.html |here} to see how to use ChangeZoneCompartment API.
     */
    changeZoneCompartment(changeZoneCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#changeZoneCompartment.");
            const pathParams = {
                "{zoneId}": changeZoneCompartmentRequest.zoneId
            };
            const queryParams = {
                "scope": changeZoneCompartmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": changeZoneCompartmentRequest.ifMatch,
                "opc-retry-token": changeZoneCompartmentRequest.opcRetryToken,
                "opc-request-id": changeZoneCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeZoneCompartmentRequest.changeZoneCompartmentDetails, "ChangeZoneCompartmentDetails", models.ChangeZoneCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeZoneCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new resolver endpoint.
     *
     * @param CreateResolverEndpointRequest
     * @return CreateResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateResolverEndpoint.ts.html |here} to see how to use CreateResolverEndpoint API.
     */
    createResolverEndpoint(createResolverEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createResolverEndpoint.");
            const pathParams = {
                "{resolverId}": createResolverEndpointRequest.resolverId
            };
            const queryParams = {
                "scope": createResolverEndpointRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createResolverEndpointRequest.opcRetryToken,
                "opc-request-id": createResolverEndpointRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/endpoints",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createResolverEndpointRequest.createResolverEndpointDetails, "CreateResolverEndpointDetails", models.CreateResolverEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createResolverEndpointRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resolverEndpoint",
                    bodyModel: "model.ResolverEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new steering policy in the specified compartment. For more information on
     * creating policies with templates, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
     *
     * @param CreateSteeringPolicyRequest
     * @return CreateSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateSteeringPolicy.ts.html |here} to see how to use CreateSteeringPolicy API.
     */
    createSteeringPolicy(createSteeringPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createSteeringPolicy.");
            const pathParams = {};
            const queryParams = {
                "scope": createSteeringPolicyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSteeringPolicyRequest.opcRetryToken,
                "opc-request-id": createSteeringPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSteeringPolicyRequest.createSteeringPolicyDetails, "CreateSteeringPolicyDetails", models.CreateSteeringPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createSteeringPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicy",
                    bodyModel: "model.SteeringPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new attachment between a steering policy and a domain, giving the
  * policy permission to answer queries for the specified domain. A steering policy must
  * be attached to a domain for the policy to answer DNS queries for that domain.
  * <p>
  For the purposes of access control, the attachment is automatically placed
  * into the same compartment as the domain's zone.
  *
       * @param CreateSteeringPolicyAttachmentRequest
       * @return CreateSteeringPolicyAttachmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateSteeringPolicyAttachment.ts.html |here} to see how to use CreateSteeringPolicyAttachment API.
       */
    createSteeringPolicyAttachment(createSteeringPolicyAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createSteeringPolicyAttachment.");
            const pathParams = {};
            const queryParams = {
                "scope": createSteeringPolicyAttachmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSteeringPolicyAttachmentRequest.opcRetryToken,
                "opc-request-id": createSteeringPolicyAttachmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicyAttachments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSteeringPolicyAttachmentRequest.createSteeringPolicyAttachmentDetails, "CreateSteeringPolicyAttachmentDetails", models.CreateSteeringPolicyAttachmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createSteeringPolicyAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicyAttachment",
                    bodyModel: "model.SteeringPolicyAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new TSIG key in the specified compartment. There is no
     * `opc-retry-token` header since TSIG key names must be globally unique.
     *
     * @param CreateTsigKeyRequest
     * @return CreateTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateTsigKey.ts.html |here} to see how to use CreateTsigKey API.
     */
    createTsigKey(createTsigKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createTsigKey.");
            const pathParams = {};
            const queryParams = {
                "scope": createTsigKeyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createTsigKeyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTsigKeyRequest.createTsigKeyDetails, "CreateTsigKeyDetails", models.CreateTsigKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTsigKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tsigKey",
                    bodyModel: "model.TsigKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new view in the specified compartment.
     *
     * @param CreateViewRequest
     * @return CreateViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateView.ts.html |here} to see how to use CreateView API.
     */
    createView(createViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createView.");
            const pathParams = {};
            const queryParams = {
                "scope": createViewRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createViewRequest.opcRetryToken,
                "opc-request-id": createViewRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createViewRequest.createViewDetails, "CreateViewDetails", models.CreateViewDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createViewRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "view",
                    bodyModel: "model.View",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new zone in the specified compartment. If the `Content-Type` header for the request is `text/dns`, the
     * `compartmentId` query parameter is required. Additionally, for `text/dns`, the `scope` and `viewId` query
     * parameters are required to create a private zone.
     *
     * @param CreateZoneRequest
     * @return CreateZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/CreateZone.ts.html |here} to see how to use CreateZone API.
     */
    createZone(createZoneRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#createZone.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": createZoneRequest.compartmentId,
                "scope": createZoneRequest.scope,
                "viewId": createZoneRequest.viewId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createZoneRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createZoneRequest.createZoneDetails, "CreateZoneBaseDetails", models.CreateZoneBaseDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createZoneRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "zone",
                    bodyModel: "model.Zone",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes all records at the specified zone and domain.
     * @param DeleteDomainRecordsRequest
     * @return DeleteDomainRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteDomainRecords.ts.html |here} to see how to use DeleteDomainRecords API.
     */
    deleteDomainRecords(deleteDomainRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteDomainRecords.");
            const pathParams = {
                "{zoneNameOrId}": deleteDomainRecordsRequest.zoneNameOrId,
                "{domain}": deleteDomainRecordsRequest.domain
            };
            const queryParams = {
                "scope": deleteDomainRecordsRequest.scope,
                "viewId": deleteDomainRecordsRequest.viewId,
                "compartmentId": deleteDomainRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteDomainRecordsRequest.ifMatch,
                "If-Unmodified-Since": deleteDomainRecordsRequest.ifUnmodifiedSince,
                "opc-request-id": deleteDomainRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDomainRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes all records in the specified RRSet.
     *
     * @param DeleteRRSetRequest
     * @return DeleteRRSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteRRSet.ts.html |here} to see how to use DeleteRRSet API.
     */
    deleteRRSet(deleteRRSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteRRSet.");
            const pathParams = {
                "{zoneNameOrId}": deleteRRSetRequest.zoneNameOrId,
                "{domain}": deleteRRSetRequest.domain,
                "{rtype}": deleteRRSetRequest.rtype
            };
            const queryParams = {
                "compartmentId": deleteRRSetRequest.compartmentId,
                "scope": deleteRRSetRequest.scope,
                "viewId": deleteRRSetRequest.viewId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteRRSetRequest.ifMatch,
                "If-Unmodified-Since": deleteRRSetRequest.ifUnmodifiedSince,
                "opc-request-id": deleteRRSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRRSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified resolver endpoint. Note that attempting to delete a resolver endpoint in the
     * DELETED lifecycle state will result in a 404 to be consistent with other operations of the API.
     * Resolver endpoints may not be deleted if they are referenced by a resolver rule.
     *
     * @param DeleteResolverEndpointRequest
     * @return DeleteResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteResolverEndpoint.ts.html |here} to see how to use DeleteResolverEndpoint API.
     */
    deleteResolverEndpoint(deleteResolverEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteResolverEndpoint.");
            const pathParams = {
                "{resolverId}": deleteResolverEndpointRequest.resolverId,
                "{resolverEndpointName}": deleteResolverEndpointRequest.resolverEndpointName
            };
            const queryParams = {
                "scope": deleteResolverEndpointRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteResolverEndpointRequest.ifMatch,
                "If-Unmodified-Since": deleteResolverEndpointRequest.ifUnmodifiedSince,
                "opc-request-id": deleteResolverEndpointRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteResolverEndpointRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified steering policy.
     * A `204` response indicates that the delete has been successful.
     * Deletion will fail if the policy is attached to any zones. To detach a
     * policy from a zone, see `DeleteSteeringPolicyAttachment`.
     *
     * @param DeleteSteeringPolicyRequest
     * @return DeleteSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteSteeringPolicy.ts.html |here} to see how to use DeleteSteeringPolicy API.
     */
    deleteSteeringPolicy(deleteSteeringPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteSteeringPolicy.");
            const pathParams = {
                "{steeringPolicyId}": deleteSteeringPolicyRequest.steeringPolicyId
            };
            const queryParams = {
                "scope": deleteSteeringPolicyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteSteeringPolicyRequest.ifMatch,
                "If-Unmodified-Since": deleteSteeringPolicyRequest.ifUnmodifiedSince,
                "opc-request-id": deleteSteeringPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies/{steeringPolicyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSteeringPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified steering policy attachment.
     * A `204` response indicates that the delete has been successful.
     *
     * @param DeleteSteeringPolicyAttachmentRequest
     * @return DeleteSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteSteeringPolicyAttachment.ts.html |here} to see how to use DeleteSteeringPolicyAttachment API.
     */
    deleteSteeringPolicyAttachment(deleteSteeringPolicyAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteSteeringPolicyAttachment.");
            const pathParams = {
                "{steeringPolicyAttachmentId}": deleteSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
            };
            const queryParams = {
                "scope": deleteSteeringPolicyAttachmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteSteeringPolicyAttachmentRequest.ifMatch,
                "If-Unmodified-Since": deleteSteeringPolicyAttachmentRequest.ifUnmodifiedSince,
                "opc-request-id": deleteSteeringPolicyAttachmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSteeringPolicyAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified TSIG key.
     *
     * @param DeleteTsigKeyRequest
     * @return DeleteTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteTsigKey.ts.html |here} to see how to use DeleteTsigKey API.
     */
    deleteTsigKey(deleteTsigKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteTsigKey.");
            const pathParams = {
                "{tsigKeyId}": deleteTsigKeyRequest.tsigKeyId
            };
            const queryParams = {
                "scope": deleteTsigKeyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteTsigKeyRequest.ifMatch,
                "If-Unmodified-Since": deleteTsigKeyRequest.ifUnmodifiedSince,
                "opc-request-id": deleteTsigKeyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys/{tsigKeyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTsigKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified view. Note that attempting to delete a
     * view in the DELETED lifecycleState will result in a 404 to be
     * consistent with other operations of the API. Views can not be
     * deleted if they are referenced by non-deleted zones or resolvers.
     * Protected views cannot be deleted.
     *
     * @param DeleteViewRequest
     * @return DeleteViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteView.ts.html |here} to see how to use DeleteView API.
     */
    deleteView(deleteViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteView.");
            const pathParams = {
                "{viewId}": deleteViewRequest.viewId
            };
            const queryParams = {
                "scope": deleteViewRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteViewRequest.ifMatch,
                "If-Unmodified-Since": deleteViewRequest.ifUnmodifiedSince,
                "opc-request-id": deleteViewRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views/{viewId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteViewRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified zone and all its steering policy attachments.
     * A `204` response indicates that the zone has been successfully deleted.
     * Protected zones cannot be deleted.
     *
     * @param DeleteZoneRequest
     * @return DeleteZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/DeleteZone.ts.html |here} to see how to use DeleteZone API.
     */
    deleteZone(deleteZoneRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#deleteZone.");
            const pathParams = {
                "{zoneNameOrId}": deleteZoneRequest.zoneNameOrId
            };
            const queryParams = {
                "scope": deleteZoneRequest.scope,
                "viewId": deleteZoneRequest.viewId,
                "compartmentId": deleteZoneRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": deleteZoneRequest.ifMatch,
                "If-Unmodified-Since": deleteZoneRequest.ifUnmodifiedSince,
                "opc-request-id": deleteZoneRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteZoneRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all records at the specified zone and domain.
     * The results are sorted by `rtype` in alphabetical order by default. You
     * can optionally filter and/or sort the results using the listed parameters.
     *
     * @param GetDomainRecordsRequest
     * @return GetDomainRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetDomainRecords.ts.html |here} to see how to use GetDomainRecords API.
     */
    getDomainRecords(getDomainRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getDomainRecords.");
            const pathParams = {
                "{zoneNameOrId}": getDomainRecordsRequest.zoneNameOrId,
                "{domain}": getDomainRecordsRequest.domain
            };
            const queryParams = {
                "limit": getDomainRecordsRequest.limit,
                "page": getDomainRecordsRequest.page,
                "zoneVersion": getDomainRecordsRequest.zoneVersion,
                "rtype": getDomainRecordsRequest.rtype,
                "scope": getDomainRecordsRequest.scope,
                "viewId": getDomainRecordsRequest.viewId,
                "sortBy": getDomainRecordsRequest.sortBy,
                "sortOrder": getDomainRecordsRequest.sortOrder,
                "compartmentId": getDomainRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getDomainRecordsRequest.ifNoneMatch,
                "If-Modified-Since": getDomainRecordsRequest.ifModifiedSince,
                "opc-request-id": getDomainRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDomainRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getDomainRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllDomainRecords(request) {
        return oci_common_1.genericPaginateRecords(request, req => this.getDomainRecords(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken), res => res.recordCollection.items || []);
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the getDomainRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllDomainRecordsResponses(request) {
        return oci_common_1.genericPaginateResponses(request, req => this.getDomainRecords(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken));
    }
    /**
     * Gets a list of all records in the specified RRSet. The results are
     * sorted by `recordHash` by default.
     *
     * @param GetRRSetRequest
     * @return GetRRSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetRRSet.ts.html |here} to see how to use GetRRSet API.
     */
    getRRSet(getRRSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getRRSet.");
            const pathParams = {
                "{zoneNameOrId}": getRRSetRequest.zoneNameOrId,
                "{domain}": getRRSetRequest.domain,
                "{rtype}": getRRSetRequest.rtype
            };
            const queryParams = {
                "limit": getRRSetRequest.limit,
                "page": getRRSetRequest.page,
                "zoneVersion": getRRSetRequest.zoneVersion,
                "compartmentId": getRRSetRequest.compartmentId,
                "scope": getRRSetRequest.scope,
                "viewId": getRRSetRequest.viewId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getRRSetRequest.ifNoneMatch,
                "If-Modified-Since": getRRSetRequest.ifModifiedSince,
                "opc-request-id": getRRSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRRSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "rRSet",
                    bodyModel: "model.RRSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getRRSet operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllRRSet(request) {
        return oci_common_1.genericPaginateRecords(request, req => this.getRRSet(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken), res => res.rRSet.items || []);
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the getRRSet operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllRRSetResponses(request) {
        return oci_common_1.genericPaginateResponses(request, req => this.getRRSet(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken));
    }
    /**
     * Get information about a specific resolver. Note that attempting to get a
     * resolver in the DELETED lifecycleState will result in a 404 to be
     * consistent with other operations of the API.
     *
     * @param GetResolverRequest
     * @return GetResolverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetResolver.ts.html |here} to see how to use GetResolver API.
     */
    getResolver(getResolverRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getResolver.");
            const pathParams = {
                "{resolverId}": getResolverRequest.resolverId
            };
            const queryParams = {
                "scope": getResolverRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Modified-Since": getResolverRequest.ifModifiedSince,
                "If-None-Match": getResolverRequest.ifNoneMatch,
                "opc-request-id": getResolverRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResolverRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resolver",
                    bodyModel: "model.Resolver",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get information about a specific resolver endpoint. Note that attempting to get a resolver endpoint
     * in the DELETED lifecycle state will result in a 404 to be consistent with other operations of the API.
     *
     * @param GetResolverEndpointRequest
     * @return GetResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetResolverEndpoint.ts.html |here} to see how to use GetResolverEndpoint API.
     */
    getResolverEndpoint(getResolverEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getResolverEndpoint.");
            const pathParams = {
                "{resolverId}": getResolverEndpointRequest.resolverId,
                "{resolverEndpointName}": getResolverEndpointRequest.resolverEndpointName
            };
            const queryParams = {
                "scope": getResolverEndpointRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Modified-Since": getResolverEndpointRequest.ifModifiedSince,
                "If-None-Match": getResolverEndpointRequest.ifNoneMatch,
                "opc-request-id": getResolverEndpointRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResolverEndpointRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resolverEndpoint",
                    bodyModel: "model.ResolverEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified steering policy.
     *
     * @param GetSteeringPolicyRequest
     * @return GetSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetSteeringPolicy.ts.html |here} to see how to use GetSteeringPolicy API.
     */
    getSteeringPolicy(getSteeringPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getSteeringPolicy.");
            const pathParams = {
                "{steeringPolicyId}": getSteeringPolicyRequest.steeringPolicyId
            };
            const queryParams = {
                "scope": getSteeringPolicyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getSteeringPolicyRequest.ifNoneMatch,
                "If-Modified-Since": getSteeringPolicyRequest.ifModifiedSince,
                "opc-request-id": getSteeringPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies/{steeringPolicyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSteeringPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicy",
                    bodyModel: "model.SteeringPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified steering policy attachment.
     *
     * @param GetSteeringPolicyAttachmentRequest
     * @return GetSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetSteeringPolicyAttachment.ts.html |here} to see how to use GetSteeringPolicyAttachment API.
     */
    getSteeringPolicyAttachment(getSteeringPolicyAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getSteeringPolicyAttachment.");
            const pathParams = {
                "{steeringPolicyAttachmentId}": getSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
            };
            const queryParams = {
                "scope": getSteeringPolicyAttachmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getSteeringPolicyAttachmentRequest.ifNoneMatch,
                "If-Modified-Since": getSteeringPolicyAttachmentRequest.ifModifiedSince,
                "opc-request-id": getSteeringPolicyAttachmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSteeringPolicyAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicyAttachment",
                    bodyModel: "model.SteeringPolicyAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified TSIG key.
     *
     * @param GetTsigKeyRequest
     * @return GetTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetTsigKey.ts.html |here} to see how to use GetTsigKey API.
     */
    getTsigKey(getTsigKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getTsigKey.");
            const pathParams = {
                "{tsigKeyId}": getTsigKeyRequest.tsigKeyId
            };
            const queryParams = {
                "scope": getTsigKeyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getTsigKeyRequest.ifNoneMatch,
                "If-Modified-Since": getTsigKeyRequest.ifModifiedSince,
                "opc-request-id": getTsigKeyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys/{tsigKeyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTsigKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tsigKey",
                    bodyModel: "model.TsigKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get information about a specific view. Note that attempting to get a
     * view in the DELETED lifecycleState will result in a 404 to be
     * consistent with other operations of the API.
     *
     * @param GetViewRequest
     * @return GetViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetView.ts.html |here} to see how to use GetView API.
     */
    getView(getViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getView.");
            const pathParams = {
                "{viewId}": getViewRequest.viewId
            };
            const queryParams = {
                "scope": getViewRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Modified-Since": getViewRequest.ifModifiedSince,
                "If-None-Match": getViewRequest.ifNoneMatch,
                "opc-request-id": getViewRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views/{viewId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getViewRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "view",
                    bodyModel: "model.View",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified zone, including its creation date,
     * zone type, and serial.
     *
     * @param GetZoneRequest
     * @return GetZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetZone.ts.html |here} to see how to use GetZone API.
     */
    getZone(getZoneRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getZone.");
            const pathParams = {
                "{zoneNameOrId}": getZoneRequest.zoneNameOrId
            };
            const queryParams = {
                "scope": getZoneRequest.scope,
                "viewId": getZoneRequest.viewId,
                "compartmentId": getZoneRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getZoneRequest.ifNoneMatch,
                "If-Modified-Since": getZoneRequest.ifModifiedSince,
                "opc-request-id": getZoneRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getZoneRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "zone",
                    bodyModel: "model.Zone",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets all records in the specified zone. The results are
     * sorted by `domain` in alphabetical order by default. For more
     * information about records, see [Resource Record (RR) TYPEs](https://www.iana.org/assignments/dns-parameters/dns-parameters.xhtml#dns-parameters-4).
     *
     * @param GetZoneRecordsRequest
     * @return GetZoneRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/GetZoneRecords.ts.html |here} to see how to use GetZoneRecords API.
     */
    getZoneRecords(getZoneRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#getZoneRecords.");
            const pathParams = {
                "{zoneNameOrId}": getZoneRecordsRequest.zoneNameOrId
            };
            const queryParams = {
                "limit": getZoneRecordsRequest.limit,
                "page": getZoneRecordsRequest.page,
                "zoneVersion": getZoneRecordsRequest.zoneVersion,
                "domain": getZoneRecordsRequest.domain,
                "domainContains": getZoneRecordsRequest.domainContains,
                "rtype": getZoneRecordsRequest.rtype,
                "sortBy": getZoneRecordsRequest.sortBy,
                "sortOrder": getZoneRecordsRequest.sortOrder,
                "compartmentId": getZoneRecordsRequest.compartmentId,
                "scope": getZoneRecordsRequest.scope,
                "viewId": getZoneRecordsRequest.viewId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-None-Match": getZoneRecordsRequest.ifNoneMatch,
                "If-Modified-Since": getZoneRecordsRequest.ifModifiedSince,
                "opc-request-id": getZoneRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getZoneRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Record objects
     * contained in responses from the getZoneRecords operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllZoneRecords(request) {
        return oci_common_1.genericPaginateRecords(request, req => this.getZoneRecords(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken), res => res.recordCollection.items || []);
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the getZoneRecords operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllZoneRecordsResponses(request) {
        return oci_common_1.genericPaginateResponses(request, req => this.getZoneRecords(req), res => res.opcNextPage, (req, nextPageToken) => (req.page = nextPageToken));
    }
    /**
     * Gets a list of all endpoints within a resolver. The collection can be filtered by name or lifecycle state.
     * It can be sorted on creation time or name both in ASC or DESC order. Note that when no lifecycleState
     * query parameter is provided that the collection does not include resolver endpoints in the DELETED
     * lifecycle state to be consistent with other operations of the API.
     *
     * @param ListResolverEndpointsRequest
     * @return ListResolverEndpointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListResolverEndpoints.ts.html |here} to see how to use ListResolverEndpoints API.
     */
    listResolverEndpoints(listResolverEndpointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listResolverEndpoints.");
            const pathParams = {
                "{resolverId}": listResolverEndpointsRequest.resolverId
            };
            const queryParams = {
                "name": listResolverEndpointsRequest.name,
                "page": listResolverEndpointsRequest.page,
                "limit": listResolverEndpointsRequest.limit,
                "sortOrder": listResolverEndpointsRequest.sortOrder,
                "sortBy": listResolverEndpointsRequest.sortBy,
                "lifecycleState": listResolverEndpointsRequest.lifecycleState,
                "scope": listResolverEndpointsRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResolverEndpointsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/endpoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResolverEndpointsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ResolverEndpointSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ResolverEndpointSummary objects
     * contained in responses from the listResolverEndpoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolverEndpoints(request) {
        return oci_common_1.paginateRecords(request, req => this.listResolverEndpoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listResolverEndpoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolverEndpointsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listResolverEndpoints(req));
    }
    /**
     * Gets a list of all resolvers within a compartment. The collection can
     * be filtered by display name, id, or lifecycle state. It can be sorted
     * on creation time or displayName both in ASC or DESC order. Note that
     * when no lifecycleState query parameter is provided that the collection
     * does not include resolvers in the DELETED lifecycleState to be consistent
     * with other operations of the API.
     *
     * @param ListResolversRequest
     * @return ListResolversResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListResolvers.ts.html |here} to see how to use ListResolvers API.
     */
    listResolvers(listResolversRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listResolvers.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listResolversRequest.compartmentId,
                "displayName": listResolversRequest.displayName,
                "id": listResolversRequest.id,
                "page": listResolversRequest.page,
                "limit": listResolversRequest.limit,
                "sortOrder": listResolversRequest.sortOrder,
                "sortBy": listResolversRequest.sortBy,
                "lifecycleState": listResolversRequest.lifecycleState,
                "scope": listResolversRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResolversRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResolversRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ResolverSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ResolverSummary objects
     * contained in responses from the listResolvers operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolvers(request) {
        return oci_common_1.paginateRecords(request, req => this.listResolvers(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listResolvers operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllResolversResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listResolvers(req));
    }
    /**
     * Gets a list of all steering policies in the specified compartment.
     *
     * @param ListSteeringPoliciesRequest
     * @return ListSteeringPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListSteeringPolicies.ts.html |here} to see how to use ListSteeringPolicies API.
     */
    listSteeringPolicies(listSteeringPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listSteeringPolicies.");
            const pathParams = {};
            const queryParams = {
                "limit": listSteeringPoliciesRequest.limit,
                "page": listSteeringPoliciesRequest.page,
                "compartmentId": listSteeringPoliciesRequest.compartmentId,
                "id": listSteeringPoliciesRequest.id,
                "displayName": listSteeringPoliciesRequest.displayName,
                "displayNameContains": listSteeringPoliciesRequest.displayNameContains,
                "healthCheckMonitorId": listSteeringPoliciesRequest.healthCheckMonitorId,
                "timeCreatedGreaterThanOrEqualTo": listSteeringPoliciesRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSteeringPoliciesRequest.timeCreatedLessThan,
                "template": listSteeringPoliciesRequest.template,
                "lifecycleState": listSteeringPoliciesRequest.lifecycleState,
                "sortBy": listSteeringPoliciesRequest.sortBy,
                "sortOrder": listSteeringPoliciesRequest.sortOrder,
                "scope": listSteeringPoliciesRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSteeringPoliciesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSteeringPoliciesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "SteeringPolicySummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.SteeringPolicySummary objects
     * contained in responses from the listSteeringPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicies(request) {
        return oci_common_1.paginateRecords(request, req => this.listSteeringPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPoliciesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSteeringPolicies(req));
    }
    /**
     * Lists the steering policy attachments in the specified compartment.
     *
     * @param ListSteeringPolicyAttachmentsRequest
     * @return ListSteeringPolicyAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListSteeringPolicyAttachments.ts.html |here} to see how to use ListSteeringPolicyAttachments API.
     */
    listSteeringPolicyAttachments(listSteeringPolicyAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listSteeringPolicyAttachments.");
            const pathParams = {};
            const queryParams = {
                "limit": listSteeringPolicyAttachmentsRequest.limit,
                "page": listSteeringPolicyAttachmentsRequest.page,
                "compartmentId": listSteeringPolicyAttachmentsRequest.compartmentId,
                "id": listSteeringPolicyAttachmentsRequest.id,
                "displayName": listSteeringPolicyAttachmentsRequest.displayName,
                "steeringPolicyId": listSteeringPolicyAttachmentsRequest.steeringPolicyId,
                "zoneId": listSteeringPolicyAttachmentsRequest.zoneId,
                "domain": listSteeringPolicyAttachmentsRequest.domain,
                "domainContains": listSteeringPolicyAttachmentsRequest.domainContains,
                "timeCreatedGreaterThanOrEqualTo": listSteeringPolicyAttachmentsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listSteeringPolicyAttachmentsRequest.timeCreatedLessThan,
                "lifecycleState": listSteeringPolicyAttachmentsRequest.lifecycleState,
                "sortBy": listSteeringPolicyAttachmentsRequest.sortBy,
                "sortOrder": listSteeringPolicyAttachmentsRequest.sortOrder,
                "scope": listSteeringPolicyAttachmentsRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSteeringPolicyAttachmentsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicyAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSteeringPolicyAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "SteeringPolicyAttachmentSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.SteeringPolicyAttachmentSummary objects
     * contained in responses from the listSteeringPolicyAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicyAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.listSteeringPolicyAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSteeringPolicyAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSteeringPolicyAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSteeringPolicyAttachments(req));
    }
    /**
     * Gets a list of all TSIG keys in the specified compartment.
     *
     * @param ListTsigKeysRequest
     * @return ListTsigKeysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListTsigKeys.ts.html |here} to see how to use ListTsigKeys API.
     */
    listTsigKeys(listTsigKeysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listTsigKeys.");
            const pathParams = {};
            const queryParams = {
                "limit": listTsigKeysRequest.limit,
                "page": listTsigKeysRequest.page,
                "compartmentId": listTsigKeysRequest.compartmentId,
                "id": listTsigKeysRequest.id,
                "name": listTsigKeysRequest.name,
                "lifecycleState": listTsigKeysRequest.lifecycleState,
                "sortBy": listTsigKeysRequest.sortBy,
                "sortOrder": listTsigKeysRequest.sortOrder,
                "scope": listTsigKeysRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTsigKeysRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTsigKeysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "TsigKeySummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.TsigKeySummary objects
     * contained in responses from the listTsigKeys operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTsigKeys(request) {
        return oci_common_1.paginateRecords(request, req => this.listTsigKeys(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listTsigKeys operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllTsigKeysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listTsigKeys(req));
    }
    /**
     * Gets a list of all views within a compartment. The collection can
     * be filtered by display name, id, or lifecycle state. It can be sorted
     * on creation time or displayName both in ASC or DESC order. Note that
     * when no lifecycleState query parameter is provided that the collection
     * does not include views in the DELETED lifecycleState to be consistent
     * with other operations of the API.
     *
     * @param ListViewsRequest
     * @return ListViewsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListViews.ts.html |here} to see how to use ListViews API.
     */
    listViews(listViewsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listViews.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listViewsRequest.compartmentId,
                "displayName": listViewsRequest.displayName,
                "id": listViewsRequest.id,
                "page": listViewsRequest.page,
                "limit": listViewsRequest.limit,
                "sortOrder": listViewsRequest.sortOrder,
                "sortBy": listViewsRequest.sortBy,
                "lifecycleState": listViewsRequest.lifecycleState,
                "scope": listViewsRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listViewsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listViewsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ViewSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ViewSummary objects
     * contained in responses from the listViews operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllViews(request) {
        return oci_common_1.paginateRecords(request, req => this.listViews(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listViews operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllViewsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listViews(req));
    }
    /**
     * Gets a list of all zones in the specified compartment. The collection
     * can be filtered by name, time created, scope, associated view, and zone type.
     *
     * @param ListZonesRequest
     * @return ListZonesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/ListZones.ts.html |here} to see how to use ListZones API.
     */
    listZones(listZonesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#listZones.");
            const pathParams = {};
            const queryParams = {
                "limit": listZonesRequest.limit,
                "page": listZonesRequest.page,
                "compartmentId": listZonesRequest.compartmentId,
                "name": listZonesRequest.name,
                "nameContains": listZonesRequest.nameContains,
                "zoneType": listZonesRequest.zoneType,
                "timeCreatedGreaterThanOrEqualTo": listZonesRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThan": listZonesRequest.timeCreatedLessThan,
                "lifecycleState": listZonesRequest.lifecycleState,
                "sortBy": listZonesRequest.sortBy,
                "sortOrder": listZonesRequest.sortOrder,
                "scope": listZonesRequest.scope,
                "viewId": listZonesRequest.viewId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listZonesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listZonesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ZoneSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ZoneSummary objects
     * contained in responses from the listZones operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZones(request) {
        return oci_common_1.paginateRecords(request, req => this.listZones(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listZones operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllZonesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listZones(req));
    }
    /**
     * Updates records in the specified zone at a domain. You can update
     * one record or all records for the specified zone depending on the changes
     * provided in the request body. You can also add or remove records using this
     * function.
     *
     * @param PatchDomainRecordsRequest
     * @return PatchDomainRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/PatchDomainRecords.ts.html |here} to see how to use PatchDomainRecords API.
     */
    patchDomainRecords(patchDomainRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#patchDomainRecords.");
            const pathParams = {
                "{zoneNameOrId}": patchDomainRecordsRequest.zoneNameOrId,
                "{domain}": patchDomainRecordsRequest.domain
            };
            const queryParams = {
                "scope": patchDomainRecordsRequest.scope,
                "viewId": patchDomainRecordsRequest.viewId,
                "compartmentId": patchDomainRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": patchDomainRecordsRequest.ifMatch,
                "If-Unmodified-Since": patchDomainRecordsRequest.ifUnmodifiedSince,
                "opc-request-id": patchDomainRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchDomainRecordsRequest.patchDomainRecordsDetails, "PatchDomainRecordsDetails", models.PatchDomainRecordsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, patchDomainRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates records in the specified RRSet.
     * @param PatchRRSetRequest
     * @return PatchRRSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/PatchRRSet.ts.html |here} to see how to use PatchRRSet API.
     */
    patchRRSet(patchRRSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#patchRRSet.");
            const pathParams = {
                "{zoneNameOrId}": patchRRSetRequest.zoneNameOrId,
                "{domain}": patchRRSetRequest.domain,
                "{rtype}": patchRRSetRequest.rtype
            };
            const queryParams = {
                "scope": patchRRSetRequest.scope,
                "viewId": patchRRSetRequest.viewId,
                "compartmentId": patchRRSetRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": patchRRSetRequest.ifMatch,
                "If-Unmodified-Since": patchRRSetRequest.ifUnmodifiedSince,
                "opc-request-id": patchRRSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchRRSetRequest.patchRRSetDetails, "PatchRRSetDetails", models.PatchRRSetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, patchRRSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a collection of records in the specified zone. You can update
     * one record or all records for the specified zone depending on the
     * changes provided in the request body. You can also add or remove records
     * using this function.
     *
     * @param PatchZoneRecordsRequest
     * @return PatchZoneRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/PatchZoneRecords.ts.html |here} to see how to use PatchZoneRecords API.
     */
    patchZoneRecords(patchZoneRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#patchZoneRecords.");
            const pathParams = {
                "{zoneNameOrId}": patchZoneRecordsRequest.zoneNameOrId
            };
            const queryParams = {
                "scope": patchZoneRecordsRequest.scope,
                "viewId": patchZoneRecordsRequest.viewId,
                "compartmentId": patchZoneRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": patchZoneRecordsRequest.ifMatch,
                "If-Unmodified-Since": patchZoneRecordsRequest.ifUnmodifiedSince,
                "opc-request-id": patchZoneRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchZoneRecordsRequest.patchZoneRecordsDetails, "PatchZoneRecordsDetails", models.PatchZoneRecordsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, patchZoneRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replaces records in the specified zone at a domain with the records
     * specified in the request body. If a specified record does not exist,
     * it will be created. If the record exists, then it will be updated to
     * represent the record in the body of the request. If a record in the zone
     * does not exist in the request body, the record will be removed from the
     * zone.
     *
     * @param UpdateDomainRecordsRequest
     * @return UpdateDomainRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateDomainRecords.ts.html |here} to see how to use UpdateDomainRecords API.
     */
    updateDomainRecords(updateDomainRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateDomainRecords.");
            const pathParams = {
                "{zoneNameOrId}": updateDomainRecordsRequest.zoneNameOrId,
                "{domain}": updateDomainRecordsRequest.domain
            };
            const queryParams = {
                "scope": updateDomainRecordsRequest.scope,
                "viewId": updateDomainRecordsRequest.viewId,
                "compartmentId": updateDomainRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateDomainRecordsRequest.ifMatch,
                "If-Unmodified-Since": updateDomainRecordsRequest.ifUnmodifiedSince,
                "opc-request-id": updateDomainRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDomainRecordsRequest.updateDomainRecordsDetails, "UpdateDomainRecordsDetails", models.UpdateDomainRecordsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDomainRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replaces records in the specified RRSet.
     * @param UpdateRRSetRequest
     * @return UpdateRRSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateRRSet.ts.html |here} to see how to use UpdateRRSet API.
     */
    updateRRSet(updateRRSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateRRSet.");
            const pathParams = {
                "{zoneNameOrId}": updateRRSetRequest.zoneNameOrId,
                "{domain}": updateRRSetRequest.domain,
                "{rtype}": updateRRSetRequest.rtype
            };
            const queryParams = {
                "scope": updateRRSetRequest.scope,
                "viewId": updateRRSetRequest.viewId,
                "compartmentId": updateRRSetRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateRRSetRequest.ifMatch,
                "If-Unmodified-Since": updateRRSetRequest.ifUnmodifiedSince,
                "opc-request-id": updateRRSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records/{domain}/{rtype}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRRSetRequest.updateRRSetDetails, "UpdateRRSetDetails", models.UpdateRRSetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRRSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified resolver with your new information.
     *
     * @param UpdateResolverRequest
     * @return UpdateResolverResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateResolver.ts.html |here} to see how to use UpdateResolver API.
     */
    updateResolver(updateResolverRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateResolver.");
            const pathParams = {
                "{resolverId}": updateResolverRequest.resolverId
            };
            const queryParams = {
                "scope": updateResolverRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateResolverRequest.ifMatch,
                "If-Unmodified-Since": updateResolverRequest.ifUnmodifiedSince,
                "opc-request-id": updateResolverRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateResolverRequest.updateResolverDetails, "UpdateResolverDetails", models.UpdateResolverDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateResolverRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resolver",
                    bodyModel: "model.Resolver",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified resolver endpoint with your new information.
     *
     * @param UpdateResolverEndpointRequest
     * @return UpdateResolverEndpointResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateResolverEndpoint.ts.html |here} to see how to use UpdateResolverEndpoint API.
     */
    updateResolverEndpoint(updateResolverEndpointRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateResolverEndpoint.");
            const pathParams = {
                "{resolverId}": updateResolverEndpointRequest.resolverId,
                "{resolverEndpointName}": updateResolverEndpointRequest.resolverEndpointName
            };
            const queryParams = {
                "scope": updateResolverEndpointRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateResolverEndpointRequest.ifMatch,
                "If-Unmodified-Since": updateResolverEndpointRequest.ifUnmodifiedSince,
                "opc-request-id": updateResolverEndpointRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resolvers/{resolverId}/endpoints/{resolverEndpointName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateResolverEndpointRequest.updateResolverEndpointDetails, "UpdateResolverEndpointDetails", models.UpdateResolverEndpointDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateResolverEndpointRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resolverEndpoint",
                    bodyModel: "model.ResolverEndpoint",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of the specified steering policy.
     *
     * @param UpdateSteeringPolicyRequest
     * @return UpdateSteeringPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateSteeringPolicy.ts.html |here} to see how to use UpdateSteeringPolicy API.
     */
    updateSteeringPolicy(updateSteeringPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateSteeringPolicy.");
            const pathParams = {
                "{steeringPolicyId}": updateSteeringPolicyRequest.steeringPolicyId
            };
            const queryParams = {
                "scope": updateSteeringPolicyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateSteeringPolicyRequest.ifMatch,
                "If-Unmodified-Since": updateSteeringPolicyRequest.ifUnmodifiedSince,
                "opc-request-id": updateSteeringPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicies/{steeringPolicyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSteeringPolicyRequest.updateSteeringPolicyDetails, "UpdateSteeringPolicyDetails", models.UpdateSteeringPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateSteeringPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicy",
                    bodyModel: "model.SteeringPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified steering policy attachment with your new information.
     *
     * @param UpdateSteeringPolicyAttachmentRequest
     * @return UpdateSteeringPolicyAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateSteeringPolicyAttachment.ts.html |here} to see how to use UpdateSteeringPolicyAttachment API.
     */
    updateSteeringPolicyAttachment(updateSteeringPolicyAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateSteeringPolicyAttachment.");
            const pathParams = {
                "{steeringPolicyAttachmentId}": updateSteeringPolicyAttachmentRequest.steeringPolicyAttachmentId
            };
            const queryParams = {
                "scope": updateSteeringPolicyAttachmentRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateSteeringPolicyAttachmentRequest.ifMatch,
                "If-Unmodified-Since": updateSteeringPolicyAttachmentRequest.ifUnmodifiedSince,
                "opc-request-id": updateSteeringPolicyAttachmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/steeringPolicyAttachments/{steeringPolicyAttachmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSteeringPolicyAttachmentRequest.updateSteeringPolicyAttachmentDetails, "UpdateSteeringPolicyAttachmentDetails", models.UpdateSteeringPolicyAttachmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateSteeringPolicyAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "steeringPolicyAttachment",
                    bodyModel: "model.SteeringPolicyAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified TSIG key.
     *
     * @param UpdateTsigKeyRequest
     * @return UpdateTsigKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateTsigKey.ts.html |here} to see how to use UpdateTsigKey API.
     */
    updateTsigKey(updateTsigKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateTsigKey.");
            const pathParams = {
                "{tsigKeyId}": updateTsigKeyRequest.tsigKeyId
            };
            const queryParams = {
                "scope": updateTsigKeyRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateTsigKeyRequest.ifMatch,
                "If-Unmodified-Since": updateTsigKeyRequest.ifUnmodifiedSince,
                "opc-request-id": updateTsigKeyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/tsigKeys/{tsigKeyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTsigKeyRequest.updateTsigKeyDetails, "UpdateTsigKeyDetails", models.UpdateTsigKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTsigKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tsigKey",
                    bodyModel: "model.TsigKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified view with your new information.
     *
     * @param UpdateViewRequest
     * @return UpdateViewResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateView.ts.html |here} to see how to use UpdateView API.
     */
    updateView(updateViewRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateView.");
            const pathParams = {
                "{viewId}": updateViewRequest.viewId
            };
            const queryParams = {
                "scope": updateViewRequest.scope
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateViewRequest.ifMatch,
                "If-Unmodified-Since": updateViewRequest.ifUnmodifiedSince,
                "opc-request-id": updateViewRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/views/{viewId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateViewRequest.updateViewDetails, "UpdateViewDetails", models.UpdateViewDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateViewRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "view",
                    bodyModel: "model.View",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified secondary zone with your new external master
     * server information. For more information about secondary zone, see
     * [Manage DNS Service Zone](https://docs.cloud.oracle.com/iaas/Content/DNS/Tasks/managingdnszones.htm).
     *
     * @param UpdateZoneRequest
     * @return UpdateZoneResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateZone.ts.html |here} to see how to use UpdateZone API.
     */
    updateZone(updateZoneRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateZone.");
            const pathParams = {
                "{zoneNameOrId}": updateZoneRequest.zoneNameOrId
            };
            const queryParams = {
                "scope": updateZoneRequest.scope,
                "viewId": updateZoneRequest.viewId,
                "compartmentId": updateZoneRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateZoneRequest.ifMatch,
                "If-Unmodified-Since": updateZoneRequest.ifUnmodifiedSince,
                "opc-request-id": updateZoneRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateZoneRequest.updateZoneDetails, "UpdateZoneDetails", models.UpdateZoneDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateZoneRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "zone",
                    bodyModel: "model.Zone",
                    responseHeaders: [
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Replaces records in the specified zone with the records specified in the
     * request body. If a specified record does not exist, it will be created.
     * If the record exists, then it will be updated to represent the record in
     * the body of the request. If a record in the zone does not exist in the
     * request body, the record will be removed from the zone.
     *
     * @param UpdateZoneRecordsRequest
     * @return UpdateZoneRecordsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/dns/UpdateZoneRecords.ts.html |here} to see how to use UpdateZoneRecords API.
     */
    updateZoneRecords(updateZoneRecordsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DnsClient#updateZoneRecords.");
            const pathParams = {
                "{zoneNameOrId}": updateZoneRecordsRequest.zoneNameOrId
            };
            const queryParams = {
                "scope": updateZoneRecordsRequest.scope,
                "viewId": updateZoneRecordsRequest.viewId,
                "compartmentId": updateZoneRecordsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "If-Match": updateZoneRecordsRequest.ifMatch,
                "If-Unmodified-Since": updateZoneRecordsRequest.ifUnmodifiedSince,
                "opc-request-id": updateZoneRecordsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/zones/{zoneNameOrId}/records",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateZoneRecordsRequest.updateZoneRecordsDetails, "UpdateZoneRecordsDetails", models.UpdateZoneRecordsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateZoneRecordsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recordCollection",
                    bodyModel: "model.RecordCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DnsClient = DnsClient;
DnsClient.serviceEndpointTemplate = "https://dns.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map