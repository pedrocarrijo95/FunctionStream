/**
 * DNS API
 * API for the DNS service. Use this API to manage DNS zones, records, and other DNS resources.
For more information, see [Overview of the DNS Service](/iaas/Content/DNS/Concepts/dnszonemanagement.htm).

 * OpenAPI spec version: 20180115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DnsClient } from "./client";
export declare class DnsWaiter {
    private client;
    private readonly config?;
    constructor(client: DnsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forResolver till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverResponse | null (null in case of 404 response)
     */
    forResolver(request: serviceRequests.GetResolverRequest, ...targetStates: models.Resolver.LifecycleState[]): Promise<serviceResponses.GetResolverResponse | null>;
    /**
     * Waits forResolverEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResolverEndpointResponse | null (null in case of 404 response)
     */
    forResolverEndpoint(request: serviceRequests.GetResolverEndpointRequest, ...targetStates: models.ResolverEndpoint.LifecycleState[]): Promise<serviceResponses.GetResolverEndpointResponse | null>;
    /**
     * Waits forSteeringPolicy till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyResponse | null (null in case of 404 response)
     */
    forSteeringPolicy(request: serviceRequests.GetSteeringPolicyRequest, ...targetStates: models.SteeringPolicy.LifecycleState[]): Promise<serviceResponses.GetSteeringPolicyResponse | null>;
    /**
     * Waits forSteeringPolicyAttachment till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetSteeringPolicyAttachmentResponse
     */
    forSteeringPolicyAttachment(request: serviceRequests.GetSteeringPolicyAttachmentRequest, ...targetStates: models.SteeringPolicyAttachment.LifecycleState[]): Promise<serviceResponses.GetSteeringPolicyAttachmentResponse>;
    /**
     * Waits forTsigKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTsigKeyResponse
     */
    forTsigKey(request: serviceRequests.GetTsigKeyRequest, ...targetStates: models.TsigKey.LifecycleState[]): Promise<serviceResponses.GetTsigKeyResponse>;
    /**
     * Waits forView till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetViewResponse | null (null in case of 404 response)
     */
    forView(request: serviceRequests.GetViewRequest, ...targetStates: models.View.LifecycleState[]): Promise<serviceResponses.GetViewResponse | null>;
    /**
     * Waits forZone till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetZoneResponse | null (null in case of 404 response)
     */
    forZone(request: serviceRequests.GetZoneRequest, ...targetStates: models.Zone.LifecycleState[]): Promise<serviceResponses.GetZoneResponse | null>;
}
