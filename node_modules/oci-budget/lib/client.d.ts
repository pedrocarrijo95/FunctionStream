/**
 * Budgets API
 * Use the Budgets API to manage budgets and budget alerts.
 * OpenAPI spec version: 20190111
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { BudgetWaiter } from "./budget-waiter";
export declare enum BudgetApiKeys {
}
export declare class BudgetClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": BudgetWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new BudgetWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): BudgetWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): BudgetWaiter;
    /**
     * Creates a new Alert Rule.
     *
     * @param CreateAlertRuleRequest
     * @return CreateAlertRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/CreateAlertRule.ts.html |here} to see how to use CreateAlertRule API.
     */
    createAlertRule(createAlertRuleRequest: requests.CreateAlertRuleRequest): Promise<responses.CreateAlertRuleResponse>;
    /**
     * Creates a new Budget.
     *
     * @param CreateBudgetRequest
     * @return CreateBudgetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/CreateBudget.ts.html |here} to see how to use CreateBudget API.
     */
    createBudget(createBudgetRequest: requests.CreateBudgetRequest): Promise<responses.CreateBudgetResponse>;
    /**
     * Deletes a specified Alert Rule resource.
     * @param DeleteAlertRuleRequest
     * @return DeleteAlertRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/DeleteAlertRule.ts.html |here} to see how to use DeleteAlertRule API.
     */
    deleteAlertRule(deleteAlertRuleRequest: requests.DeleteAlertRuleRequest): Promise<responses.DeleteAlertRuleResponse>;
    /**
     * Deletes a specified Budget resource
     * @param DeleteBudgetRequest
     * @return DeleteBudgetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/DeleteBudget.ts.html |here} to see how to use DeleteBudget API.
     */
    deleteBudget(deleteBudgetRequest: requests.DeleteBudgetRequest): Promise<responses.DeleteBudgetResponse>;
    /**
     * Gets an Alert Rule for a specified Budget.
     * @param GetAlertRuleRequest
     * @return GetAlertRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/GetAlertRule.ts.html |here} to see how to use GetAlertRule API.
     */
    getAlertRule(getAlertRuleRequest: requests.GetAlertRuleRequest): Promise<responses.GetAlertRuleResponse>;
    /**
     * Gets a Budget by identifier
     * @param GetBudgetRequest
     * @return GetBudgetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/GetBudget.ts.html |here} to see how to use GetBudget API.
     */
    getBudget(getBudgetRequest: requests.GetBudgetRequest): Promise<responses.GetBudgetResponse>;
    /**
     * Returns a list of Alert Rules for a specified Budget.
     *
     * @param ListAlertRulesRequest
     * @return ListAlertRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/ListAlertRules.ts.html |here} to see how to use ListAlertRules API.
     */
    listAlertRules(listAlertRulesRequest: requests.ListAlertRulesRequest): Promise<responses.ListAlertRulesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AlertRuleSummary objects
     * contained in responses from the listAlertRules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlertRules(request: requests.ListAlertRulesRequest): AsyncIterableIterator<models.AlertRuleSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlertRules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlertRulesResponses(request: requests.ListAlertRulesRequest): AsyncIterableIterator<responses.ListAlertRulesResponse>;
    /**
       * Gets a list of Budgets in a compartment.
  * <p>
  By default, ListBudgets returns budgets of 'COMPARTMENT' target type and the budget records with only ONE target compartment OCID.
  * <p>
  To list ALL budgets, set the targetType query parameter to ALL.
  * Example:
  *   'targetType=ALL'
  * <p>
  Additional targetTypes would be available in future releases. Clients should ignore new targetType
  * or upgrade to latest version of client SDK to handle new targetType.
  *
       * @param ListBudgetsRequest
       * @return ListBudgetsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/ListBudgets.ts.html |here} to see how to use ListBudgets API.
       */
    listBudgets(listBudgetsRequest: requests.ListBudgetsRequest): Promise<responses.ListBudgetsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.BudgetSummary objects
     * contained in responses from the listBudgets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBudgets(request: requests.ListBudgetsRequest): AsyncIterableIterator<models.BudgetSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBudgets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBudgetsResponses(request: requests.ListBudgetsRequest): AsyncIterableIterator<responses.ListBudgetsResponse>;
    /**
     * Update an Alert Rule for the budget identified by the OCID.
     * @param UpdateAlertRuleRequest
     * @return UpdateAlertRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/UpdateAlertRule.ts.html |here} to see how to use UpdateAlertRule API.
     */
    updateAlertRule(updateAlertRuleRequest: requests.UpdateAlertRuleRequest): Promise<responses.UpdateAlertRuleResponse>;
    /**
     * Update a Budget identified by the OCID
     * @param UpdateBudgetRequest
     * @return UpdateBudgetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/budget/UpdateBudget.ts.html |here} to see how to use UpdateBudget API.
     */
    updateBudget(updateBudgetRequest: requests.UpdateBudgetRequest): Promise<responses.UpdateBudgetResponse>;
}
