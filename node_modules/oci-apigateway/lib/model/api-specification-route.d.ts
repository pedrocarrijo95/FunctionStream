/**
 * API Gateway API
 * API for the API Gateway service. Use this API to manage gateways, deployments, and related items.
For more information, see
[Overview of API Gateway](/iaas/Content/APIGateway/Concepts/apigatewayoverview.htm).

 * OpenAPI spec version: 20190501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * A single route that forwards requests to a particular backend and may contain some additional policies.
 *
 */
export interface ApiSpecificationRoute {
    /**
     * A URL path pattern that must be matched on this route. The path pattern may contain a subset of RFC 6570 identifiers
     * to allow wildcard and parameterized matching.
     *
     */
    "path": string;
    /**
     * A list of allowed methods on this route.
     *
     */
    "methods"?: Array<ApiSpecificationRoute.Methods>;
    "requestPolicies"?: model.ApiSpecificationRouteRequestPolicies;
    "responsePolicies"?: model.ApiSpecificationRouteResponsePolicies;
    "loggingPolicies"?: model.ApiSpecificationLoggingPolicies;
    "backend": model.HTTPBackend | model.OracleFunctionBackend | model.StockResponseBackend;
}
export declare namespace ApiSpecificationRoute {
    enum Methods {
        Any = "ANY",
        Head = "HEAD",
        Get = "GET",
        Post = "POST",
        Put = "PUT",
        Patch = "PATCH",
        Delete = "DELETE",
        Options = "OPTIONS",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ApiSpecificationRoute): object;
}
