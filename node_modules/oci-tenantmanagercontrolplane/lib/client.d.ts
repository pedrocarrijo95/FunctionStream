/**
 * Organizations API
 * The Organizations API allows you to consolidate multiple OCI tenancies into an organization, and centrally manage your tenancies and its resources.
 * OpenAPI spec version: 20200801
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { DomainWaiter } from "./domain-waiter";
import { DomainGovernanceWaiter } from "./domaingovernance-waiter";
import { LinkWaiter } from "./link-waiter";
import { RecipientInvitationWaiter } from "./recipientinvitation-waiter";
import { SenderInvitationWaiter } from "./senderinvitation-waiter";
import { WorkRequestWaiter } from "./workrequest-waiter";
export declare enum DomainApiKeys {
}
export declare class DomainClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DomainWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DomainWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DomainWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DomainWaiter;
    /**
     * Begins the registration process for claiming a domain.
     * @param CreateDomainRequest
     * @return CreateDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/CreateDomain.ts.html |here} to see how to use CreateDomain API.
     */
    createDomain(createDomainRequest: requests.CreateDomainRequest): Promise<responses.CreateDomainResponse>;
    /**
     * Releases the domain, making it available to be claimed again by another tenancy.
     * @param DeleteDomainRequest
     * @return DeleteDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/DeleteDomain.ts.html |here} to see how to use DeleteDomain API.
     */
    deleteDomain(deleteDomainRequest: requests.DeleteDomainRequest): Promise<responses.DeleteDomainResponse>;
    /**
     * Gets information about the domain.
     * @param GetDomainRequest
     * @return GetDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetDomain.ts.html |here} to see how to use GetDomain API.
     */
    getDomain(getDomainRequest: requests.GetDomainRequest): Promise<responses.GetDomainResponse>;
    /**
     * Return a (paginated) list of domains.
     *
     * @param ListDomainsRequest
     * @return ListDomainsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListDomains.ts.html |here} to see how to use ListDomains API.
     */
    listDomains(listDomainsRequest: requests.ListDomainsRequest): Promise<responses.ListDomainsResponse>;
    /**
     * Updates the domain.
     * @param UpdateDomainRequest
     * @return UpdateDomainResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/UpdateDomain.ts.html |here} to see how to use UpdateDomain API.
     */
    updateDomain(updateDomainRequest: requests.UpdateDomainRequest): Promise<responses.UpdateDomainResponse>;
}
export declare enum DomainGovernanceApiKeys {
}
export declare class DomainGovernanceClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": DomainGovernanceWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new DomainGovernanceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): DomainGovernanceWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): DomainGovernanceWaiter;
    /**
     * Adds domain governance to a claimed domain.
     * @param CreateDomainGovernanceRequest
     * @return CreateDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/CreateDomainGovernance.ts.html |here} to see how to use CreateDomainGovernance API.
     */
    createDomainGovernance(createDomainGovernanceRequest: requests.CreateDomainGovernanceRequest): Promise<responses.CreateDomainGovernanceResponse>;
    /**
     * Removes domain governance from a claimed domain.
     * @param DeleteDomainGovernanceRequest
     * @return DeleteDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/DeleteDomainGovernance.ts.html |here} to see how to use DeleteDomainGovernance API.
     */
    deleteDomainGovernance(deleteDomainGovernanceRequest: requests.DeleteDomainGovernanceRequest): Promise<responses.DeleteDomainGovernanceResponse>;
    /**
     * Gets information about the domain governance entity.
     * @param GetDomainGovernanceRequest
     * @return GetDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetDomainGovernance.ts.html |here} to see how to use GetDomainGovernance API.
     */
    getDomainGovernance(getDomainGovernanceRequest: requests.GetDomainGovernanceRequest): Promise<responses.GetDomainGovernanceResponse>;
    /**
     * Return a (paginated) list of domain governance entities.
     *
     * @param ListDomainGovernancesRequest
     * @return ListDomainGovernancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListDomainGovernances.ts.html |here} to see how to use ListDomainGovernances API.
     */
    listDomainGovernances(listDomainGovernancesRequest: requests.ListDomainGovernancesRequest): Promise<responses.ListDomainGovernancesResponse>;
    /**
     * Updates the domain governance entity.
     * @param UpdateDomainGovernanceRequest
     * @return UpdateDomainGovernanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/UpdateDomainGovernance.ts.html |here} to see how to use UpdateDomainGovernance API.
     */
    updateDomainGovernance(updateDomainGovernanceRequest: requests.UpdateDomainGovernanceRequest): Promise<responses.UpdateDomainGovernanceResponse>;
}
export declare enum LinkApiKeys {
}
export declare class LinkClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": LinkWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new LinkWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): LinkWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): LinkWaiter;
    /**
     * Terminate the link.
     * @param DeleteLinkRequest
     * @return DeleteLinkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/DeleteLink.ts.html |here} to see how to use DeleteLink API.
     */
    deleteLink(deleteLinkRequest: requests.DeleteLinkRequest): Promise<responses.DeleteLinkResponse>;
    /**
     * Gets information about the link.
     * @param GetLinkRequest
     * @return GetLinkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetLink.ts.html |here} to see how to use GetLink API.
     */
    getLink(getLinkRequest: requests.GetLinkRequest): Promise<responses.GetLinkResponse>;
    /**
     * Return a (paginated) list of links.
     * @param ListLinksRequest
     * @return ListLinksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListLinks.ts.html |here} to see how to use ListLinks API.
     */
    listLinks(listLinksRequest: requests.ListLinksRequest): Promise<responses.ListLinksResponse>;
}
export declare enum RecipientInvitationApiKeys {
}
export declare class RecipientInvitationClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": RecipientInvitationWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new RecipientInvitationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): RecipientInvitationWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): RecipientInvitationWaiter;
    /**
     * Accepts a recipient invitation.
     * @param AcceptRecipientInvitationRequest
     * @return AcceptRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/AcceptRecipientInvitation.ts.html |here} to see how to use AcceptRecipientInvitation API.
     */
    acceptRecipientInvitation(acceptRecipientInvitationRequest: requests.AcceptRecipientInvitationRequest): Promise<responses.AcceptRecipientInvitationResponse>;
    /**
     * Gets information about the recipient invitation.
     * @param GetRecipientInvitationRequest
     * @return GetRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetRecipientInvitation.ts.html |here} to see how to use GetRecipientInvitation API.
     */
    getRecipientInvitation(getRecipientInvitationRequest: requests.GetRecipientInvitationRequest): Promise<responses.GetRecipientInvitationResponse>;
    /**
     * Ignores a recipient invitation.
     * @param IgnoreRecipientInvitationRequest
     * @return IgnoreRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/IgnoreRecipientInvitation.ts.html |here} to see how to use IgnoreRecipientInvitation API.
     */
    ignoreRecipientInvitation(ignoreRecipientInvitationRequest: requests.IgnoreRecipientInvitationRequest): Promise<responses.IgnoreRecipientInvitationResponse>;
    /**
     * Return a (paginated) list of recipient invitations.
     *
     * @param ListRecipientInvitationsRequest
     * @return ListRecipientInvitationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListRecipientInvitations.ts.html |here} to see how to use ListRecipientInvitations API.
     */
    listRecipientInvitations(listRecipientInvitationsRequest: requests.ListRecipientInvitationsRequest): Promise<responses.ListRecipientInvitationsResponse>;
    /**
     * Updates the RecipientInvitation.
     * @param UpdateRecipientInvitationRequest
     * @return UpdateRecipientInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/UpdateRecipientInvitation.ts.html |here} to see how to use UpdateRecipientInvitation API.
     */
    updateRecipientInvitation(updateRecipientInvitationRequest: requests.UpdateRecipientInvitationRequest): Promise<responses.UpdateRecipientInvitationResponse>;
}
export declare enum SenderInvitationApiKeys {
}
export declare class SenderInvitationClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": SenderInvitationWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new SenderInvitationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): SenderInvitationWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): SenderInvitationWaiter;
    /**
     * Cancels a sender invitation.
     * @param CancelSenderInvitationRequest
     * @return CancelSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/CancelSenderInvitation.ts.html |here} to see how to use CancelSenderInvitation API.
     */
    cancelSenderInvitation(cancelSenderInvitationRequest: requests.CancelSenderInvitationRequest): Promise<responses.CancelSenderInvitationResponse>;
    /**
     * Creates a sender invitation and asynchronously sends the invitation to the recipient.
     * @param CreateSenderInvitationRequest
     * @return CreateSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/CreateSenderInvitation.ts.html |here} to see how to use CreateSenderInvitation API.
     */
    createSenderInvitation(createSenderInvitationRequest: requests.CreateSenderInvitationRequest): Promise<responses.CreateSenderInvitationResponse>;
    /**
     * Gets information about the sender invitation.
     * @param GetSenderInvitationRequest
     * @return GetSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetSenderInvitation.ts.html |here} to see how to use GetSenderInvitation API.
     */
    getSenderInvitation(getSenderInvitationRequest: requests.GetSenderInvitationRequest): Promise<responses.GetSenderInvitationResponse>;
    /**
     * Return a (paginated) list of sender invitations.
     *
     * @param ListSenderInvitationsRequest
     * @return ListSenderInvitationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListSenderInvitations.ts.html |here} to see how to use ListSenderInvitations API.
     */
    listSenderInvitations(listSenderInvitationsRequest: requests.ListSenderInvitationsRequest): Promise<responses.ListSenderInvitationsResponse>;
    /**
     * Updates the SenderInvitation.
     * @param UpdateSenderInvitationRequest
     * @return UpdateSenderInvitationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/UpdateSenderInvitation.ts.html |here} to see how to use UpdateSenderInvitation API.
     */
    updateSenderInvitation(updateSenderInvitationRequest: requests.UpdateSenderInvitationRequest): Promise<responses.UpdateSenderInvitationResponse>;
}
export declare enum WorkRequestApiKeys {
}
export declare class WorkRequestClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": WorkRequestWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): WorkRequestWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): WorkRequestWaiter;
    /**
     * Gets the status of the work request with the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in a compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/tenantmanagercontrolplane/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
}
