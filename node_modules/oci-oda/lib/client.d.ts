/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { OdaWaiter } from "./oda-waiter";
export declare enum OdaApiKeys {
}
export declare class OdaClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": OdaWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new OdaWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): OdaWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): OdaWaiter;
    /**
     * Moves an Digital Assistant instance into a different compartment. When provided, If-Match is checked against
     * ETag values of the resource.
     *
     * @param ChangeOdaInstanceCompartmentRequest
     * @return ChangeOdaInstanceCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/ChangeOdaInstanceCompartment.ts.html |here} to see how to use ChangeOdaInstanceCompartment API.
     */
    changeOdaInstanceCompartment(changeOdaInstanceCompartmentRequest: requests.ChangeOdaInstanceCompartmentRequest): Promise<responses.ChangeOdaInstanceCompartmentResponse>;
    /**
       * Starts an asynchronous job to create a Digital Assistant instance.
  * <p>
  To monitor the status of the job, take the `opc-work-request-id` response
  * header value and use it to call `GET /workRequests/{workRequestID}`.
  *
       * @param CreateOdaInstanceRequest
       * @return CreateOdaInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/CreateOdaInstance.ts.html |here} to see how to use CreateOdaInstance API.
       */
    createOdaInstance(createOdaInstanceRequest: requests.CreateOdaInstanceRequest): Promise<responses.CreateOdaInstanceResponse>;
    /**
     * Starts an asynchronous job to delete the specified Digital Assistant instance.
     * To monitor the status of the job, take the `opc-work-request-id` response header value and use it to call `GET /workRequests/{workRequestID}`.
     * @param DeleteOdaInstanceRequest
     * @return DeleteOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/DeleteOdaInstance.ts.html |here} to see how to use DeleteOdaInstance API.
     */
    deleteOdaInstance(deleteOdaInstanceRequest: requests.DeleteOdaInstanceRequest): Promise<responses.DeleteOdaInstanceResponse>;
    /**
     * Gets the specified Digital Assistant instance.
     * @param GetOdaInstanceRequest
     * @return GetOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/GetOdaInstance.ts.html |here} to see how to use GetOdaInstance API.
     */
    getOdaInstance(getOdaInstanceRequest: requests.GetOdaInstanceRequest): Promise<responses.GetOdaInstanceResponse>;
    /**
       * Gets information about the work request with the specified ID, including its status.
  * <p>
  You can use this operation to monitor the status of jobs that you
  * requested to create, delete, and update instances.
  *
       * @param GetWorkRequestRequest
       * @return GetWorkRequestResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
       */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
       * Returns a page of Digital Assistant instances that belong to the specified
  * compartment.
  * <p>
  If the `opc-next-page` header appears in the response, then
  * there are more items to retrieve. To get the next page in the subsequent
  * GET request, include the header's value as the `page` query parameter.
  *
       * @param ListOdaInstancesRequest
       * @return ListOdaInstancesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/ListOdaInstances.ts.html |here} to see how to use ListOdaInstances API.
       */
    listOdaInstances(listOdaInstancesRequest: requests.ListOdaInstancesRequest): Promise<responses.ListOdaInstancesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.OdaInstanceSummary objects
     * contained in responses from the listOdaInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOdaInstances(request: requests.ListOdaInstancesRequest): AsyncIterableIterator<models.OdaInstanceSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listOdaInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllOdaInstancesResponses(request: requests.ListOdaInstancesRequest): AsyncIterableIterator<responses.ListOdaInstancesResponse>;
    /**
       * Returns a page of errors for the specified work request.
  * <p>
  If the `opc-next-page` header appears in the response, then
  * there are more items to retrieve. To get the next page in the subsequent
  * GET request, include the header's value as the `page` query parameter.
  *
       * @param ListWorkRequestErrorsRequest
       * @return ListWorkRequestErrorsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
       */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<models.WorkRequestError>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request: requests.ListWorkRequestErrorsRequest): AsyncIterableIterator<responses.ListWorkRequestErrorsResponse>;
    /**
       * Returns a page of of log messages for a given work request.
  * <p>
  If the `opc-next-page` header appears in the response, then
  * there are more items to retrieve. To get the next page in the subsequent
  * GET request, include the header's value as the `page` query parameter.
  *
       * @param ListWorkRequestLogsRequest
       * @return ListWorkRequestLogsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
       */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<models.WorkRequestLogEntry>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request: requests.ListWorkRequestLogsRequest): AsyncIterableIterator<responses.ListWorkRequestLogsResponse>;
    /**
       * Returns a page of work requests for the specified compartment.
  * <p>
  If the `opc-next-page` header appears in the response, then
  * there are more items to retrieve. To get the next page in the subsequent
  * GET request, include the header's value as the `page` query parameter.
  *
       * @param ListWorkRequestsRequest
       * @return ListWorkRequestsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
       */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<models.WorkRequestSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request: requests.ListWorkRequestsRequest): AsyncIterableIterator<responses.ListWorkRequestsResponse>;
    /**
     * Starts an inactive Digital Assistant instance. Once active, the instance will be accessible and metering
     * of requests will be started again.
     *
     * @param StartOdaInstanceRequest
     * @return StartOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/StartOdaInstance.ts.html |here} to see how to use StartOdaInstance API.
     */
    startOdaInstance(startOdaInstanceRequest: requests.StartOdaInstanceRequest): Promise<responses.StartOdaInstanceResponse>;
    /**
     * Stops an active Digital Assistant instance. Once inactive, the instance will not be accessible and metering
     * of requests will be stopped until the instance is started again. Data associated with the instance
     * is not affected.
     *
     * @param StopOdaInstanceRequest
     * @return StopOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/StopOdaInstance.ts.html |here} to see how to use StopOdaInstance API.
     */
    stopOdaInstance(stopOdaInstanceRequest: requests.StopOdaInstanceRequest): Promise<responses.StopOdaInstanceResponse>;
    /**
     * Updates the specified Digital Assistant instance with the information in the request body.
     * @param UpdateOdaInstanceRequest
     * @return UpdateOdaInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/oda/UpdateOdaInstance.ts.html |here} to see how to use UpdateOdaInstance API.
     */
    updateOdaInstance(updateOdaInstanceRequest: requests.UpdateOdaInstanceRequest): Promise<responses.UpdateOdaInstanceResponse>;
}
