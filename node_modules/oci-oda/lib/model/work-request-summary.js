"use strict";
/**
 * Digital Assistant Service Instance API
 * API to create and maintain Oracle Digital Assistant service instances.
 * OpenAPI spec version: 20190506
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkRequestSummary = void 0;
const model = __importStar(require("../model"));
var WorkRequestSummary;
(function (WorkRequestSummary) {
    let RequestAction;
    (function (RequestAction) {
        RequestAction["CreateOdaInstance"] = "CREATE_ODA_INSTANCE";
        RequestAction["UpgradeOdaInstance"] = "UPGRADE_ODA_INSTANCE";
        RequestAction["DeleteOdaInstance"] = "DELETE_ODA_INSTANCE";
        RequestAction["PurgeOdaInstance"] = "PURGE_ODA_INSTANCE";
        RequestAction["RecoverOdaInstance"] = "RECOVER_ODA_INSTANCE";
        RequestAction["StopOdaInstance"] = "STOP_ODA_INSTANCE";
        RequestAction["StartOdaInstance"] = "START_ODA_INSTANCE";
        RequestAction["ChangeOdaInstanceCompartment"] = "CHANGE_ODA_INSTANCE_COMPARTMENT";
        RequestAction["CreateAssociation"] = "CREATE_ASSOCIATION";
        RequestAction["DeleteAssociation"] = "DELETE_ASSOCIATION";
        RequestAction["UpdateEntitlementsForCacct"] = "UPDATE_ENTITLEMENTS_FOR_CACCT";
        RequestAction["LookupOdaInstancesForCacct"] = "LOOKUP_ODA_INSTANCES_FOR_CACCT";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        RequestAction["UnknownValue"] = "UNKNOWN_VALUE";
    })(RequestAction = WorkRequestSummary.RequestAction || (WorkRequestSummary.RequestAction = {}));
    let Status;
    (function (Status) {
        Status["Accepted"] = "ACCEPTED";
        Status["InProgress"] = "IN_PROGRESS";
        Status["Succeeded"] = "SUCCEEDED";
        Status["Failed"] = "FAILED";
        Status["Canceling"] = "CANCELING";
        Status["Canceled"] = "CANCELED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Status["UnknownValue"] = "UNKNOWN_VALUE";
    })(Status = WorkRequestSummary.Status || (WorkRequestSummary.Status = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "resources": obj.resources
                ? obj.resources.map(item => {
                    return model.WorkRequestResource.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    WorkRequestSummary.getJsonObj = getJsonObj;
})(WorkRequestSummary = exports.WorkRequestSummary || (exports.WorkRequestSummary = {}));
//# sourceMappingURL=work-request-summary.js.map