"use strict";
/**
 * Core Services API
 * API covering the [Networking](/iaas/Content/Network/Concepts/overview.htm),
[Compute](/iaas/Content/Compute/Concepts/computeoverview.htm), and
[Block Volume](/iaas/Content/Block/Concepts/overview.htm) services. Use this API
to manage resources such as virtual cloud networks (VCNs), compute instances, and
block storage volumes.

 * OpenAPI spec version: 20160918
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VirtualNetworkClient = exports.VirtualNetworkApiKeys = exports.ComputeManagementClient = exports.ComputeManagementApiKeys = exports.ComputeClient = exports.ComputeApiKeys = exports.BlockstorageClient = exports.BlockstorageApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const blockstorage_waiter_1 = require("./blockstorage-waiter");
const compute_waiter_1 = require("./compute-waiter");
const computemanagement_waiter_1 = require("./computemanagement-waiter");
const virtualnetwork_waiter_1 = require("./virtualnetwork-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var BlockstorageApiKeys;
(function (BlockstorageApiKeys) {
})(BlockstorageApiKeys = exports.BlockstorageApiKeys || (exports.BlockstorageApiKeys = {}));
class BlockstorageClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20160918";
        if (this.logger)
            this.logger.info(`BlockstorageClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(BlockstorageClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(BlockstorageClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new BlockstorageWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient, config) {
        this._waiters = new blockstorage_waiter_1.BlockstorageWaiter(this, workRequestClient, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a boot volume backup into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeBootVolumeBackupCompartmentRequest
     * @return ChangeBootVolumeBackupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeBootVolumeBackupCompartment.ts.html |here} to see how to use ChangeBootVolumeBackupCompartment API.
     */
    changeBootVolumeBackupCompartment(changeBootVolumeBackupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeBackupCompartment.");
            const pathParams = {
                "{bootVolumeBackupId}": changeBootVolumeBackupCompartmentRequest.bootVolumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeBootVolumeBackupCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeBootVolumeBackupCompartmentRequest.changeBootVolumeBackupCompartmentDetails, "ChangeBootVolumeBackupCompartmentDetails", models.ChangeBootVolumeBackupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeBootVolumeBackupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a boot volume into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeBootVolumeCompartmentRequest
     * @return ChangeBootVolumeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeBootVolumeCompartment.ts.html |here} to see how to use ChangeBootVolumeCompartment API.
     */
    changeBootVolumeCompartment(changeBootVolumeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeBootVolumeCompartment.");
            const pathParams = {
                "{bootVolumeId}": changeBootVolumeCompartmentRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeBootVolumeCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeBootVolumeCompartmentRequest.changeBootVolumeCompartmentDetails, "ChangeBootVolumeCompartmentDetails", models.ChangeBootVolumeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeBootVolumeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a volume backup into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVolumeBackupCompartmentRequest
     * @return ChangeVolumeBackupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVolumeBackupCompartment.ts.html |here} to see how to use ChangeVolumeBackupCompartment API.
     */
    changeVolumeBackupCompartment(changeVolumeBackupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeVolumeBackupCompartment.");
            const pathParams = {
                "{volumeBackupId}": changeVolumeBackupCompartmentRequest.volumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVolumeBackupCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups/{volumeBackupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVolumeBackupCompartmentRequest.changeVolumeBackupCompartmentDetails, "ChangeVolumeBackupCompartmentDetails", models.ChangeVolumeBackupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVolumeBackupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a volume into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVolumeCompartmentRequest
     * @return ChangeVolumeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVolumeCompartment.ts.html |here} to see how to use ChangeVolumeCompartment API.
     */
    changeVolumeCompartment(changeVolumeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeVolumeCompartment.");
            const pathParams = {
                "{volumeId}": changeVolumeCompartmentRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVolumeCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVolumeCompartmentRequest.changeVolumeCompartmentDetails, "ChangeVolumeCompartmentDetails", models.ChangeVolumeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVolumeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a volume group backup into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVolumeGroupBackupCompartmentRequest
     * @return ChangeVolumeGroupBackupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVolumeGroupBackupCompartment.ts.html |here} to see how to use ChangeVolumeGroupBackupCompartment API.
     */
    changeVolumeGroupBackupCompartment(changeVolumeGroupBackupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupBackupCompartment.");
            const pathParams = {
                "{volumeGroupBackupId}": changeVolumeGroupBackupCompartmentRequest.volumeGroupBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVolumeGroupBackupCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups/{volumeGroupBackupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVolumeGroupBackupCompartmentRequest.changeVolumeGroupBackupCompartmentDetails, "ChangeVolumeGroupBackupCompartmentDetails", models.ChangeVolumeGroupBackupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVolumeGroupBackupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a volume group into a different compartment within the same tenancy.
     * For information about moving resources between compartments,
     * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVolumeGroupCompartmentRequest
     * @return ChangeVolumeGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVolumeGroupCompartment.ts.html |here} to see how to use ChangeVolumeGroupCompartment API.
     */
    changeVolumeGroupCompartment(changeVolumeGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#changeVolumeGroupCompartment.");
            const pathParams = {
                "{volumeGroupId}": changeVolumeGroupCompartmentRequest.volumeGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVolumeGroupCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups/{volumeGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVolumeGroupCompartmentRequest.changeVolumeGroupCompartmentDetails, "ChangeVolumeGroupCompartmentDetails", models.ChangeVolumeGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVolumeGroupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a boot volume backup copy in specified region. For general information about volume backups,
     * see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumebackups.htm)
     *
     * @param CopyBootVolumeBackupRequest
     * @return CopyBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CopyBootVolumeBackup.ts.html |here} to see how to use CopyBootVolumeBackup API.
     */
    copyBootVolumeBackup(copyBootVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#copyBootVolumeBackup.");
            const pathParams = {
                "{bootVolumeBackupId}": copyBootVolumeBackupRequest.bootVolumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": copyBootVolumeBackupRequest.opcRetryToken,
                "opc-request-id": copyBootVolumeBackupRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups/{bootVolumeBackupId}/actions/copy",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(copyBootVolumeBackupRequest.copyBootVolumeBackupDetails, "CopyBootVolumeBackupDetails", models.CopyBootVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, copyBootVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeBackup",
                    bodyModel: "model.BootVolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a volume backup copy in specified region. For general information about volume backups,
     * see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumebackups.htm)
     *
     * @param CopyVolumeBackupRequest
     * @return CopyVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CopyVolumeBackup.ts.html |here} to see how to use CopyVolumeBackup API.
     */
    copyVolumeBackup(copyVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#copyVolumeBackup.");
            const pathParams = {
                "{volumeBackupId}": copyVolumeBackupRequest.volumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": copyVolumeBackupRequest.opcRetryToken,
                "opc-request-id": copyVolumeBackupRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups/{volumeBackupId}/actions/copy",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(copyVolumeBackupRequest.copyVolumeBackupDetails, "CopyVolumeBackupDetails", models.CopyVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, copyVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackup",
                    bodyModel: "model.VolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new boot volume in the specified compartment from an existing boot volume or a boot volume backup.
     * For general information about boot volumes, see [Boot Volumes](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumes.htm).
     * You may optionally specify a *display name* for the volume, which is simply a friendly name or
     * description. It does not have to be unique, and you can change it. Avoid entering confidential information.
     *
     * @param CreateBootVolumeRequest
     * @return CreateBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateBootVolume.ts.html |here} to see how to use CreateBootVolume API.
     */
    createBootVolume(createBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createBootVolume.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createBootVolumeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createBootVolumeRequest.createBootVolumeDetails, "CreateBootVolumeDetails", models.CreateBootVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolume",
                    bodyModel: "model.BootVolume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new boot volume backup of the specified boot volume. For general information about boot volume backups,
  * see [Overview of Boot Volume Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/bootvolumebackups.htm)
  * <p>
  When the request is received, the backup object is in a REQUEST_RECEIVED state.
  * When the data is imaged, it goes into a CREATING state.
  * After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
  *
       * @param CreateBootVolumeBackupRequest
       * @return CreateBootVolumeBackupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateBootVolumeBackup.ts.html |here} to see how to use CreateBootVolumeBackup API.
       */
    createBootVolumeBackup(createBootVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createBootVolumeBackup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createBootVolumeBackupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createBootVolumeBackupRequest.createBootVolumeBackupDetails, "CreateBootVolumeBackupDetails", models.CreateBootVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createBootVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeBackup",
                    bodyModel: "model.BootVolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new volume in the specified compartment. Volumes can be created in sizes ranging from
  * 50 GB (51200 MB) to 32 TB (33554432 MB), in 1 GB (1024 MB) increments. By default, volumes are 1 TB (1048576 MB).
  * For general information about block volumes, see
  * [Overview of Block Volume Service](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/overview.htm).
  * <p>
  A volume and instance can be in separate compartments but must be in the same availability domain.
  * For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about
  * availability domains, see [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the `ListAvailabilityDomains` operation
  * in the Identity and Access Management Service API.
  * <p>
  You may optionally specify a *display name* for the volume, which is simply a friendly name or
  * description. It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateVolumeRequest
       * @return CreateVolumeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolume.ts.html |here} to see how to use CreateVolume API.
       */
    createVolume(createVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolume.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVolumeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeRequest.createVolumeDetails, "CreateVolumeDetails", models.CreateVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volume",
                    bodyModel: "model.Volume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new backup of the specified volume. For general information about volume backups,
  * see [Overview of Block Volume Service Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/blockvolumebackups.htm)
  * <p>
  When the request is received, the backup object is in a REQUEST_RECEIVED state.
  * When the data is imaged, it goes into a CREATING state.
  * After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.
  *
       * @param CreateVolumeBackupRequest
       * @return CreateVolumeBackupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolumeBackup.ts.html |here} to see how to use CreateVolumeBackup API.
       */
    createVolumeBackup(createVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolumeBackup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVolumeBackupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeBackupRequest.createVolumeBackupDetails, "CreateVolumeBackupDetails", models.CreateVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackup",
                    bodyModel: "model.VolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new user defined backup policy.
  * <p>
  For more information about Oracle defined backup policies and user defined backup policies,
  * see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
  *
       * @param CreateVolumeBackupPolicyRequest
       * @return CreateVolumeBackupPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolumeBackupPolicy.ts.html |here} to see how to use CreateVolumeBackupPolicy API.
       */
    createVolumeBackupPolicy(createVolumeBackupPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicy.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVolumeBackupPolicyRequest.opcRetryToken,
                "opc-request-id": createVolumeBackupPolicyRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeBackupPolicyRequest.createVolumeBackupPolicyDetails, "CreateVolumeBackupPolicyDetails", models.CreateVolumeBackupPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeBackupPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackupPolicy",
                    bodyModel: "model.VolumeBackupPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Assigns a volume backup policy to the specified volume. Note that a given volume can
     * only have one backup policy assigned to it. If this operation is used for a volume that already
     * has a different backup policy assigned, the prior backup policy will be silently unassigned.
     *
     * @param CreateVolumeBackupPolicyAssignmentRequest
     * @return CreateVolumeBackupPolicyAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolumeBackupPolicyAssignment.ts.html |here} to see how to use CreateVolumeBackupPolicyAssignment API.
     */
    createVolumeBackupPolicyAssignment(createVolumeBackupPolicyAssignmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolumeBackupPolicyAssignment.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicyAssignments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeBackupPolicyAssignmentRequest.createVolumeBackupPolicyAssignmentDetails, "CreateVolumeBackupPolicyAssignmentDetails", models.CreateVolumeBackupPolicyAssignmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeBackupPolicyAssignmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackupPolicyAssignment",
                    bodyModel: "model.VolumeBackupPolicyAssignment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new volume group in the specified compartment.
  * A volume group is a collection of volumes and may be created from a list of volumes, cloning an existing
  * volume group, or by restoring a volume group backup. A volume group can contain up to 64 volumes.
  * You may optionally specify a *display name* for the volume group, which is simply a friendly name or
  * description. It does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
  *
       * @param CreateVolumeGroupRequest
       * @return CreateVolumeGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolumeGroup.ts.html |here} to see how to use CreateVolumeGroup API.
       */
    createVolumeGroup(createVolumeGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolumeGroup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVolumeGroupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeGroupRequest.createVolumeGroupDetails, "CreateVolumeGroupDetails", models.CreateVolumeGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroup",
                    bodyModel: "model.VolumeGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new backup volume group of the specified volume group.
     * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     *
     * @param CreateVolumeGroupBackupRequest
     * @return CreateVolumeGroupBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVolumeGroupBackup.ts.html |here} to see how to use CreateVolumeGroupBackup API.
     */
    createVolumeGroupBackup(createVolumeGroupBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#createVolumeGroupBackup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVolumeGroupBackupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVolumeGroupBackupRequest.createVolumeGroupBackupDetails, "CreateVolumeGroupBackupDetails", models.CreateVolumeGroupBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVolumeGroupBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroupBackup",
                    bodyModel: "model.VolumeGroupBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified boot volume. The volume cannot have an active connection to an instance.
     * To disconnect the boot volume from a connected instance, see
     * [Disconnecting From a Boot Volume](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/deletingbootvolume.htm).
     * **Warning:** All data on the boot volume will be permanently lost when the boot volume is deleted.
     *
     * @param DeleteBootVolumeRequest
     * @return DeleteBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteBootVolume.ts.html |here} to see how to use DeleteBootVolume API.
     */
    deleteBootVolume(deleteBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteBootVolume.");
            const pathParams = {
                "{bootVolumeId}": deleteBootVolumeRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteBootVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a boot volume backup.
     * @param DeleteBootVolumeBackupRequest
     * @return DeleteBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteBootVolumeBackup.ts.html |here} to see how to use DeleteBootVolumeBackup API.
     */
    deleteBootVolumeBackup(deleteBootVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeBackup.");
            const pathParams = {
                "{bootVolumeBackupId}": deleteBootVolumeBackupRequest.bootVolumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteBootVolumeBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups/{bootVolumeBackupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteBootVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the specified boot volume's assigned Key Management encryption key.
     *
     * @param DeleteBootVolumeKmsKeyRequest
     * @return DeleteBootVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteBootVolumeKmsKey.ts.html |here} to see how to use DeleteBootVolumeKmsKey API.
     */
    deleteBootVolumeKmsKey(deleteBootVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteBootVolumeKmsKey.");
            const pathParams = {
                "{bootVolumeId}": deleteBootVolumeKmsKeyRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteBootVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}/kmsKey",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteBootVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified volume. The volume cannot have an active connection to an instance.
     * To disconnect the volume from a connected instance, see
     * [Disconnecting From a Volume](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/disconnectingfromavolume.htm).
     * **Warning:** All data on the volume will be permanently lost when the volume is deleted.
     *
     * @param DeleteVolumeRequest
     * @return DeleteVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolume.ts.html |here} to see how to use DeleteVolume API.
     */
    deleteVolume(deleteVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolume.");
            const pathParams = {
                "{volumeId}": deleteVolumeRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a volume backup.
     * @param DeleteVolumeBackupRequest
     * @return DeleteVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeBackup.ts.html |here} to see how to use DeleteVolumeBackup API.
     */
    deleteVolumeBackup(deleteVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackup.");
            const pathParams = {
                "{volumeBackupId}": deleteVolumeBackupRequest.volumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups/{volumeBackupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes a user defined backup policy.
  *  For more information about user defined backup policies,
  *  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
  * <p>
   Avoid entering confidential information.
  *
       * @param DeleteVolumeBackupPolicyRequest
       * @return DeleteVolumeBackupPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeBackupPolicy.ts.html |here} to see how to use DeleteVolumeBackupPolicy API.
       */
    deleteVolumeBackupPolicy(deleteVolumeBackupPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicy.");
            const pathParams = {
                "{policyId}": deleteVolumeBackupPolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteVolumeBackupPolicyRequest.opcRequestId,
                "if-match": deleteVolumeBackupPolicyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicies/{policyId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeBackupPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a volume backup policy assignment.
     * @param DeleteVolumeBackupPolicyAssignmentRequest
     * @return DeleteVolumeBackupPolicyAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeBackupPolicyAssignment.ts.html |here} to see how to use DeleteVolumeBackupPolicyAssignment API.
     */
    deleteVolumeBackupPolicyAssignment(deleteVolumeBackupPolicyAssignmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeBackupPolicyAssignment.");
            const pathParams = {
                "{policyAssignmentId}": deleteVolumeBackupPolicyAssignmentRequest.policyAssignmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeBackupPolicyAssignmentRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeBackupPolicyAssignmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified volume group. Individual volumes are not deleted, only the volume group is deleted.
     * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     *
     * @param DeleteVolumeGroupRequest
     * @return DeleteVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeGroup.ts.html |here} to see how to use DeleteVolumeGroup API.
     */
    deleteVolumeGroup(deleteVolumeGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroup.");
            const pathParams = {
                "{volumeGroupId}": deleteVolumeGroupRequest.volumeGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups/{volumeGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a volume group backup. This operation deletes all the backups in
     * the volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     *
     * @param DeleteVolumeGroupBackupRequest
     * @return DeleteVolumeGroupBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeGroupBackup.ts.html |here} to see how to use DeleteVolumeGroupBackup API.
     */
    deleteVolumeGroupBackup(deleteVolumeGroupBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeGroupBackup.");
            const pathParams = {
                "{volumeGroupBackupId}": deleteVolumeGroupBackupRequest.volumeGroupBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeGroupBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups/{volumeGroupBackupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeGroupBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the specified volume's assigned Key Management encryption key.
     *
     * @param DeleteVolumeKmsKeyRequest
     * @return DeleteVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVolumeKmsKey.ts.html |here} to see how to use DeleteVolumeKmsKey API.
     */
    deleteVolumeKmsKey(deleteVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#deleteVolumeKmsKey.");
            const pathParams = {
                "{volumeId}": deleteVolumeKmsKeyRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}/kmsKey",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified block volume replica.
     * @param GetBlockVolumeReplicaRequest
     * @return GetBlockVolumeReplicaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBlockVolumeReplica.ts.html |here} to see how to use GetBlockVolumeReplica API.
     */
    getBlockVolumeReplica(getBlockVolumeReplicaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getBlockVolumeReplica.");
            const pathParams = {
                "{blockVolumeReplicaId}": getBlockVolumeReplicaRequest.blockVolumeReplicaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/blockVolumeReplicas/{blockVolumeReplicaId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBlockVolumeReplicaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "blockVolumeReplica",
                    bodyModel: "model.BlockVolumeReplica",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified boot volume.
     * @param GetBootVolumeRequest
     * @return GetBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBootVolume.ts.html |here} to see how to use GetBootVolume API.
     */
    getBootVolume(getBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getBootVolume.");
            const pathParams = {
                "{bootVolumeId}": getBootVolumeRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolume",
                    bodyModel: "model.BootVolume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified boot volume backup.
     * @param GetBootVolumeBackupRequest
     * @return GetBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBootVolumeBackup.ts.html |here} to see how to use GetBootVolumeBackup API.
     */
    getBootVolumeBackup(getBootVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getBootVolumeBackup.");
            const pathParams = {
                "{bootVolumeBackupId}": getBootVolumeBackupRequest.bootVolumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups/{bootVolumeBackupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBootVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeBackup",
                    bodyModel: "model.BootVolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Key Management encryption key assigned to the specified boot volume.
     *
     * @param GetBootVolumeKmsKeyRequest
     * @return GetBootVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBootVolumeKmsKey.ts.html |here} to see how to use GetBootVolumeKmsKey API.
     */
    getBootVolumeKmsKey(getBootVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getBootVolumeKmsKey.");
            const pathParams = {
                "{bootVolumeId}": getBootVolumeKmsKeyRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": getBootVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}/kmsKey",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBootVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeKmsKey",
                    bodyModel: "model.BootVolumeKmsKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified boot volume replica.
     * @param GetBootVolumeReplicaRequest
     * @return GetBootVolumeReplicaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBootVolumeReplica.ts.html |here} to see how to use GetBootVolumeReplica API.
     */
    getBootVolumeReplica(getBootVolumeReplicaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getBootVolumeReplica.");
            const pathParams = {
                "{bootVolumeReplicaId}": getBootVolumeReplicaRequest.bootVolumeReplicaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeReplicas/{bootVolumeReplicaId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBootVolumeReplicaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeReplica",
                    bodyModel: "model.BootVolumeReplica",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified volume.
     * @param GetVolumeRequest
     * @return GetVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolume.ts.html |here} to see how to use GetVolume API.
     */
    getVolume(getVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolume.");
            const pathParams = {
                "{volumeId}": getVolumeRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volume",
                    bodyModel: "model.Volume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified volume backup.
     * @param GetVolumeBackupRequest
     * @return GetVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeBackup.ts.html |here} to see how to use GetVolumeBackup API.
     */
    getVolumeBackup(getVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeBackup.");
            const pathParams = {
                "{volumeBackupId}": getVolumeBackupRequest.volumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups/{volumeBackupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackup",
                    bodyModel: "model.VolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified volume backup policy.
     * @param GetVolumeBackupPolicyRequest
     * @return GetVolumeBackupPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeBackupPolicy.ts.html |here} to see how to use GetVolumeBackupPolicy API.
     */
    getVolumeBackupPolicy(getVolumeBackupPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicy.");
            const pathParams = {
                "{policyId}": getVolumeBackupPolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicies/{policyId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeBackupPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackupPolicy",
                    bodyModel: "model.VolumeBackupPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the volume backup policy assignment for the specified volume. The
     * `assetId` query parameter is required, and the returned list will contain at most
     * one item, since volume can only have one volume backup policy assigned at a time.
     *
     * @param GetVolumeBackupPolicyAssetAssignmentRequest
     * @return GetVolumeBackupPolicyAssetAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeBackupPolicyAssetAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssetAssignment API.
     */
    getVolumeBackupPolicyAssetAssignment(getVolumeBackupPolicyAssetAssignmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicyAssetAssignment.");
            const pathParams = {};
            const queryParams = {
                "assetId": getVolumeBackupPolicyAssetAssignmentRequest.assetId,
                "limit": getVolumeBackupPolicyAssetAssignmentRequest.limit,
                "page": getVolumeBackupPolicyAssetAssignmentRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicyAssignments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeBackupPolicyAssetAssignmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeBackupPolicyAssignment[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeBackupPolicyAssignment objects
     * contained in responses from the getVolumeBackupPolicyAssetAssignment operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllVolumeBackupPolicyAssetAssignment(request) {
        return oci_common_1.paginateRecords(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the getVolumeBackupPolicyAssetAssignment operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllVolumeBackupPolicyAssetAssignmentResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.getVolumeBackupPolicyAssetAssignment(req));
    }
    /**
     * Gets information for the specified volume backup policy assignment.
     * @param GetVolumeBackupPolicyAssignmentRequest
     * @return GetVolumeBackupPolicyAssignmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeBackupPolicyAssignment.ts.html |here} to see how to use GetVolumeBackupPolicyAssignment API.
     */
    getVolumeBackupPolicyAssignment(getVolumeBackupPolicyAssignmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeBackupPolicyAssignment.");
            const pathParams = {
                "{policyAssignmentId}": getVolumeBackupPolicyAssignmentRequest.policyAssignmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicyAssignments/{policyAssignmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeBackupPolicyAssignmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackupPolicyAssignment",
                    bodyModel: "model.VolumeBackupPolicyAssignment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified volume group. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     * @param GetVolumeGroupRequest
     * @return GetVolumeGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeGroup.ts.html |here} to see how to use GetVolumeGroup API.
     */
    getVolumeGroup(getVolumeGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeGroup.");
            const pathParams = {
                "{volumeGroupId}": getVolumeGroupRequest.volumeGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups/{volumeGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroup",
                    bodyModel: "model.VolumeGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     * @param GetVolumeGroupBackupRequest
     * @return GetVolumeGroupBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeGroupBackup.ts.html |here} to see how to use GetVolumeGroupBackup API.
     */
    getVolumeGroupBackup(getVolumeGroupBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeGroupBackup.");
            const pathParams = {
                "{volumeGroupBackupId}": getVolumeGroupBackupRequest.volumeGroupBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups/{volumeGroupBackupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeGroupBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroupBackup",
                    bodyModel: "model.VolumeGroupBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Key Management encryption key assigned to the specified volume.
     *
     * @param GetVolumeKmsKeyRequest
     * @return GetVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeKmsKey.ts.html |here} to see how to use GetVolumeKmsKey API.
     */
    getVolumeKmsKey(getVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#getVolumeKmsKey.");
            const pathParams = {
                "{volumeId}": getVolumeKmsKeyRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": getVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}/kmsKey",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeKmsKey",
                    bodyModel: "model.VolumeKmsKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the block volume replicas in the specified compartment and availability domain.
     *
     * @param ListBlockVolumeReplicasRequest
     * @return ListBlockVolumeReplicasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListBlockVolumeReplicas.ts.html |here} to see how to use ListBlockVolumeReplicas API.
     */
    listBlockVolumeReplicas(listBlockVolumeReplicasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listBlockVolumeReplicas.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listBlockVolumeReplicasRequest.availabilityDomain,
                "compartmentId": listBlockVolumeReplicasRequest.compartmentId,
                "limit": listBlockVolumeReplicasRequest.limit,
                "page": listBlockVolumeReplicasRequest.page,
                "displayName": listBlockVolumeReplicasRequest.displayName,
                "sortBy": listBlockVolumeReplicasRequest.sortBy,
                "sortOrder": listBlockVolumeReplicasRequest.sortOrder,
                "lifecycleState": listBlockVolumeReplicasRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/blockVolumeReplicas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBlockVolumeReplicasRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BlockVolumeReplica[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BlockVolumeReplica objects
     * contained in responses from the listBlockVolumeReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBlockVolumeReplicas(request) {
        return oci_common_1.paginateRecords(request, req => this.listBlockVolumeReplicas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBlockVolumeReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBlockVolumeReplicasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBlockVolumeReplicas(req));
    }
    /**
     * Lists the boot volume backups in the specified compartment. You can filter the results by boot volume.
     *
     * @param ListBootVolumeBackupsRequest
     * @return ListBootVolumeBackupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListBootVolumeBackups.ts.html |here} to see how to use ListBootVolumeBackups API.
     */
    listBootVolumeBackups(listBootVolumeBackupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listBootVolumeBackups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listBootVolumeBackupsRequest.compartmentId,
                "bootVolumeId": listBootVolumeBackupsRequest.bootVolumeId,
                "limit": listBootVolumeBackupsRequest.limit,
                "page": listBootVolumeBackupsRequest.page,
                "displayName": listBootVolumeBackupsRequest.displayName,
                "sourceBootVolumeBackupId": listBootVolumeBackupsRequest.sourceBootVolumeBackupId,
                "sortBy": listBootVolumeBackupsRequest.sortBy,
                "sortOrder": listBootVolumeBackupsRequest.sortOrder,
                "lifecycleState": listBootVolumeBackupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBootVolumeBackupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BootVolumeBackup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BootVolumeBackup objects
     * contained in responses from the listBootVolumeBackups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeBackups(request) {
        return oci_common_1.paginateRecords(request, req => this.listBootVolumeBackups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBootVolumeBackups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeBackupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBootVolumeBackups(req));
    }
    /**
     * Lists the boot volume replicas in the specified compartment and availability domain.
     *
     * @param ListBootVolumeReplicasRequest
     * @return ListBootVolumeReplicasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListBootVolumeReplicas.ts.html |here} to see how to use ListBootVolumeReplicas API.
     */
    listBootVolumeReplicas(listBootVolumeReplicasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listBootVolumeReplicas.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listBootVolumeReplicasRequest.availabilityDomain,
                "compartmentId": listBootVolumeReplicasRequest.compartmentId,
                "limit": listBootVolumeReplicasRequest.limit,
                "page": listBootVolumeReplicasRequest.page,
                "displayName": listBootVolumeReplicasRequest.displayName,
                "sortBy": listBootVolumeReplicasRequest.sortBy,
                "sortOrder": listBootVolumeReplicasRequest.sortOrder,
                "lifecycleState": listBootVolumeReplicasRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeReplicas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBootVolumeReplicasRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BootVolumeReplica[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BootVolumeReplica objects
     * contained in responses from the listBootVolumeReplicas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeReplicas(request) {
        return oci_common_1.paginateRecords(request, req => this.listBootVolumeReplicas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBootVolumeReplicas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeReplicasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBootVolumeReplicas(req));
    }
    /**
     * Lists the boot volumes in the specified compartment and availability domain.
     *
     * @param ListBootVolumesRequest
     * @return ListBootVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListBootVolumes.ts.html |here} to see how to use ListBootVolumes API.
     */
    listBootVolumes(listBootVolumesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listBootVolumes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listBootVolumesRequest.availabilityDomain,
                "compartmentId": listBootVolumesRequest.compartmentId,
                "limit": listBootVolumesRequest.limit,
                "page": listBootVolumesRequest.page,
                "volumeGroupId": listBootVolumesRequest.volumeGroupId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBootVolumesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BootVolume[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BootVolume objects
     * contained in responses from the listBootVolumes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumes(request) {
        return oci_common_1.paginateRecords(request, req => this.listBootVolumes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBootVolumes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBootVolumes(req));
    }
    /**
       * Lists all the volume backup policies available in the specified compartment.
  * <p>
  For more information about Oracle defined backup policies and user defined backup policies,
  * see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm).
  *
       * @param ListVolumeBackupPoliciesRequest
       * @return ListVolumeBackupPoliciesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumeBackupPolicies.ts.html |here} to see how to use ListVolumeBackupPolicies API.
       */
    listVolumeBackupPolicies(listVolumeBackupPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listVolumeBackupPolicies.");
            const pathParams = {};
            const queryParams = {
                "limit": listVolumeBackupPoliciesRequest.limit,
                "page": listVolumeBackupPoliciesRequest.page,
                "compartmentId": listVolumeBackupPoliciesRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumeBackupPoliciesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeBackupPolicy[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeBackupPolicy objects
     * contained in responses from the listVolumeBackupPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeBackupPolicies(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumeBackupPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumeBackupPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeBackupPoliciesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumeBackupPolicies(req));
    }
    /**
     * Lists the volume backups in the specified compartment. You can filter the results by volume.
     *
     * @param ListVolumeBackupsRequest
     * @return ListVolumeBackupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumeBackups.ts.html |here} to see how to use ListVolumeBackups API.
     */
    listVolumeBackups(listVolumeBackupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listVolumeBackups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVolumeBackupsRequest.compartmentId,
                "volumeId": listVolumeBackupsRequest.volumeId,
                "limit": listVolumeBackupsRequest.limit,
                "page": listVolumeBackupsRequest.page,
                "displayName": listVolumeBackupsRequest.displayName,
                "sourceVolumeBackupId": listVolumeBackupsRequest.sourceVolumeBackupId,
                "sortBy": listVolumeBackupsRequest.sortBy,
                "sortOrder": listVolumeBackupsRequest.sortOrder,
                "lifecycleState": listVolumeBackupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumeBackupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeBackup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeBackup objects
     * contained in responses from the listVolumeBackups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeBackups(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumeBackups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumeBackups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeBackupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumeBackups(req));
    }
    /**
     * Lists the volume group backups in the specified compartment. You can filter the results by volume group.
     * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     *
     * @param ListVolumeGroupBackupsRequest
     * @return ListVolumeGroupBackupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumeGroupBackups.ts.html |here} to see how to use ListVolumeGroupBackups API.
     */
    listVolumeGroupBackups(listVolumeGroupBackupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listVolumeGroupBackups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVolumeGroupBackupsRequest.compartmentId,
                "volumeGroupId": listVolumeGroupBackupsRequest.volumeGroupId,
                "limit": listVolumeGroupBackupsRequest.limit,
                "page": listVolumeGroupBackupsRequest.page,
                "displayName": listVolumeGroupBackupsRequest.displayName,
                "sortBy": listVolumeGroupBackupsRequest.sortBy,
                "sortOrder": listVolumeGroupBackupsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumeGroupBackupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeGroupBackup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeGroupBackup objects
     * contained in responses from the listVolumeGroupBackups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeGroupBackups(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumeGroupBackups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumeGroupBackups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeGroupBackupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumeGroupBackups(req));
    }
    /**
     * Lists the volume groups in the specified compartment and availability domain.
     * For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     *
     * @param ListVolumeGroupsRequest
     * @return ListVolumeGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumeGroups.ts.html |here} to see how to use ListVolumeGroups API.
     */
    listVolumeGroups(listVolumeGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listVolumeGroups.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listVolumeGroupsRequest.availabilityDomain,
                "compartmentId": listVolumeGroupsRequest.compartmentId,
                "limit": listVolumeGroupsRequest.limit,
                "page": listVolumeGroupsRequest.page,
                "displayName": listVolumeGroupsRequest.displayName,
                "sortBy": listVolumeGroupsRequest.sortBy,
                "sortOrder": listVolumeGroupsRequest.sortOrder,
                "lifecycleState": listVolumeGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumeGroupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeGroup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeGroup objects
     * contained in responses from the listVolumeGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumeGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumeGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumeGroups(req));
    }
    /**
     * Lists the volumes in the specified compartment and availability domain.
     *
     * @param ListVolumesRequest
     * @return ListVolumesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumes.ts.html |here} to see how to use ListVolumes API.
     */
    listVolumes(listVolumesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#listVolumes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listVolumesRequest.availabilityDomain,
                "compartmentId": listVolumesRequest.compartmentId,
                "limit": listVolumesRequest.limit,
                "page": listVolumesRequest.page,
                "displayName": listVolumesRequest.displayName,
                "sortBy": listVolumesRequest.sortBy,
                "sortOrder": listVolumesRequest.sortOrder,
                "volumeGroupId": listVolumesRequest.volumeGroupId,
                "lifecycleState": listVolumesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Volume[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Volume objects
     * contained in responses from the listVolumes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumes(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumes(req));
    }
    /**
     * Updates the specified boot volume's display name, defined tags, and free-form tags.
     * @param UpdateBootVolumeRequest
     * @return UpdateBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateBootVolume.ts.html |here} to see how to use UpdateBootVolume API.
     */
    updateBootVolume(updateBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateBootVolume.");
            const pathParams = {
                "{bootVolumeId}": updateBootVolumeRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateBootVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateBootVolumeRequest.updateBootVolumeDetails, "UpdateBootVolumeDetails", models.UpdateBootVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolume",
                    bodyModel: "model.BootVolume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the display name for the specified boot volume backup.
     * Avoid entering confidential information.
     *
     * @param UpdateBootVolumeBackupRequest
     * @return UpdateBootVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateBootVolumeBackup.ts.html |here} to see how to use UpdateBootVolumeBackup API.
     */
    updateBootVolumeBackup(updateBootVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeBackup.");
            const pathParams = {
                "{bootVolumeBackupId}": updateBootVolumeBackupRequest.bootVolumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateBootVolumeBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeBackups/{bootVolumeBackupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateBootVolumeBackupRequest.updateBootVolumeBackupDetails, "UpdateBootVolumeBackupDetails", models.UpdateBootVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBootVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeBackup",
                    bodyModel: "model.BootVolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified volume with a new Key Management master encryption key.
     *
     * @param UpdateBootVolumeKmsKeyRequest
     * @return UpdateBootVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateBootVolumeKmsKey.ts.html |here} to see how to use UpdateBootVolumeKmsKey API.
     */
    updateBootVolumeKmsKey(updateBootVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateBootVolumeKmsKey.");
            const pathParams = {
                "{bootVolumeId}": updateBootVolumeKmsKeyRequest.bootVolumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateBootVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumes/{bootVolumeId}/kmsKey",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateBootVolumeKmsKeyRequest.updateBootVolumeKmsKeyDetails, "UpdateBootVolumeKmsKeyDetails", models.UpdateBootVolumeKmsKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBootVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeKmsKey",
                    bodyModel: "model.BootVolumeKmsKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified volume's display name.
     * Avoid entering confidential information.
     *
     * @param UpdateVolumeRequest
     * @return UpdateVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolume.ts.html |here} to see how to use UpdateVolume API.
     */
    updateVolume(updateVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolume.");
            const pathParams = {
                "{volumeId}": updateVolumeRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeRequest.updateVolumeDetails, "UpdateVolumeDetails", models.UpdateVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volume",
                    bodyModel: "model.Volume",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the display name for the specified volume backup.
     * Avoid entering confidential information.
     *
     * @param UpdateVolumeBackupRequest
     * @return UpdateVolumeBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolumeBackup.ts.html |here} to see how to use UpdateVolumeBackup API.
     */
    updateVolumeBackup(updateVolumeBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackup.");
            const pathParams = {
                "{volumeBackupId}": updateVolumeBackupRequest.volumeBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackups/{volumeBackupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeBackupRequest.updateVolumeBackupDetails, "UpdateVolumeBackupDetails", models.UpdateVolumeBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackup",
                    bodyModel: "model.VolumeBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates a user defined backup policy.
  *  For more information about user defined backup policies,
  *  see [Policy-Based Backups](https://docs.cloud.oracle.com/iaas/Content/Block/Tasks/schedulingvolumebackups.htm#UserDefinedBackupPolicies).
  * <p>
   Avoid entering confidential information.
  *
       * @param UpdateVolumeBackupPolicyRequest
       * @return UpdateVolumeBackupPolicyResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolumeBackupPolicy.ts.html |here} to see how to use UpdateVolumeBackupPolicy API.
       */
    updateVolumeBackupPolicy(updateVolumeBackupPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolumeBackupPolicy.");
            const pathParams = {
                "{policyId}": updateVolumeBackupPolicyRequest.policyId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeBackupPolicyRequest.ifMatch,
                "opc-request-id": updateVolumeBackupPolicyRequest.opcRequestId,
                "opc-retry-token": updateVolumeBackupPolicyRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeBackupPolicies/{policyId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeBackupPolicyRequest.updateVolumeBackupPolicyDetails, "UpdateVolumeBackupPolicyDetails", models.UpdateVolumeBackupPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeBackupPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeBackupPolicy",
                    bodyModel: "model.VolumeBackupPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the set of volumes in a volume group along with the display name. Use this operation
  * to add or remove volumes in a volume group. Specify the full list of volume IDs to include in the
  * volume group. If the volume ID is not specified in the call, it will be removed from the volume group.
  * Avoid entering confidential information.
  * <p>
  For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
  *
       * @param UpdateVolumeGroupRequest
       * @return UpdateVolumeGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolumeGroup.ts.html |here} to see how to use UpdateVolumeGroup API.
       */
    updateVolumeGroup(updateVolumeGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroup.");
            const pathParams = {
                "{volumeGroupId}": updateVolumeGroupRequest.volumeGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroups/{volumeGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeGroupRequest.updateVolumeGroupDetails, "UpdateVolumeGroupDetails", models.UpdateVolumeGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroup",
                    bodyModel: "model.VolumeGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the display name for the specified volume group backup. For more information, see [Volume Groups](https://docs.cloud.oracle.com/iaas/Content/Block/Concepts/volumegroups.htm).
     * @param UpdateVolumeGroupBackupRequest
     * @return UpdateVolumeGroupBackupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolumeGroupBackup.ts.html |here} to see how to use UpdateVolumeGroupBackup API.
     */
    updateVolumeGroupBackup(updateVolumeGroupBackupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolumeGroupBackup.");
            const pathParams = {
                "{volumeGroupBackupId}": updateVolumeGroupBackupRequest.volumeGroupBackupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeGroupBackupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeGroupBackups/{volumeGroupBackupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeGroupBackupRequest.updateVolumeGroupBackupDetails, "UpdateVolumeGroupBackupDetails", models.UpdateVolumeGroupBackupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeGroupBackupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeGroupBackup",
                    bodyModel: "model.VolumeGroupBackup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified volume with a new Key Management master encryption key.
     *
     * @param UpdateVolumeKmsKeyRequest
     * @return UpdateVolumeKmsKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVolumeKmsKey.ts.html |here} to see how to use UpdateVolumeKmsKey API.
     */
    updateVolumeKmsKey(updateVolumeKmsKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation BlockstorageClient#updateVolumeKmsKey.");
            const pathParams = {
                "{volumeId}": updateVolumeKmsKeyRequest.volumeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVolumeKmsKeyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumes/{volumeId}/kmsKey",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVolumeKmsKeyRequest.updateVolumeKmsKeyDetails, "UpdateVolumeKmsKeyDetails", models.UpdateVolumeKmsKeyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVolumeKmsKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeKmsKey",
                    bodyModel: "model.VolumeKmsKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.BlockstorageClient = BlockstorageClient;
BlockstorageClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
var ComputeApiKeys;
(function (ComputeApiKeys) {
})(ComputeApiKeys = exports.ComputeApiKeys || (exports.ComputeApiKeys = {}));
class ComputeClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20160918";
        if (this.logger)
            this.logger.info(`ComputeClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputeClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputeClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ComputeWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient, config) {
        this._waiters = new compute_waiter_1.ComputeWaiter(this, workRequestClient, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Adds a shape to the compatible shapes list for the image.
     * @param AddImageShapeCompatibilityEntryRequest
     * @return AddImageShapeCompatibilityEntryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddImageShapeCompatibilityEntry.ts.html |here} to see how to use AddImageShapeCompatibilityEntry API.
     */
    addImageShapeCompatibilityEntry(addImageShapeCompatibilityEntryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#addImageShapeCompatibilityEntry.");
            const pathParams = {
                "{imageId}": addImageShapeCompatibilityEntryRequest.imageId,
                "{shapeName}": addImageShapeCompatibilityEntryRequest.shapeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/shapes/{shapeName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(addImageShapeCompatibilityEntryRequest.addImageShapeCompatibilityEntryDetails, "AddImageShapeCompatibilityEntryDetails", models.AddImageShapeCompatibilityEntryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addImageShapeCompatibilityEntryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "imageShapeCompatibilityEntry",
                    bodyModel: "model.ImageShapeCompatibilityEntry",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attaches the specified boot volume to the specified instance.
     *
     * @param AttachBootVolumeRequest
     * @return AttachBootVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachBootVolume.ts.html |here} to see how to use AttachBootVolume API.
     */
    attachBootVolume(attachBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#attachBootVolume.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": attachBootVolumeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeAttachments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachBootVolumeRequest.attachBootVolumeDetails, "AttachBootVolumeDetails", models.AttachBootVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeAttachment",
                    bodyModel: "model.BootVolumeAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a secondary VNIC and attaches it to the specified instance.
     * For more information about secondary VNICs, see
     * [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
     *
     * @param AttachVnicRequest
     * @return AttachVnicResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachVnic.ts.html |here} to see how to use AttachVnic API.
     */
    attachVnic(attachVnicRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#attachVnic.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": attachVnicRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnicAttachments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachVnicRequest.attachVnicDetails, "AttachVnicDetails", models.AttachVnicDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachVnicRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vnicAttachment",
                    bodyModel: "model.VnicAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attaches the specified storage volume to the specified instance.
     *
     * @param AttachVolumeRequest
     * @return AttachVolumeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachVolume.ts.html |here} to see how to use AttachVolume API.
     */
    attachVolume(attachVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#attachVolume.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": attachVolumeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeAttachments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachVolumeRequest.attachVolumeDetails, "AttachVolumeDetails", models.AttachVolumeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeAttachment",
                    bodyModel: "model.VolumeAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Captures the most recent serial console data (up to a megabyte) for the
  * specified instance.
  * <p>
  The `CaptureConsoleHistory` operation works with the other console history operations
  * as described below.
  * <p>
  1. Use `CaptureConsoleHistory` to request the capture of up to a megabyte of the
  * most recent console history. This call returns a `ConsoleHistory`
  * object. The object will have a state of REQUESTED.
  * 2. Wait for the capture operation to succeed by polling `GetConsoleHistory` with
  * the identifier of the console history metadata. The state of the
  * `ConsoleHistory` object will go from REQUESTED to GETTING-HISTORY and
  * then SUCCEEDED (or FAILED).
  * 3. Use `GetConsoleHistoryContent` to get the actual console history data (not the
  * metadata).
  * 4. Optionally, use `DeleteConsoleHistory` to delete the console history metadata
  * and the console history data.
  *
       * @param CaptureConsoleHistoryRequest
       * @return CaptureConsoleHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CaptureConsoleHistory.ts.html |here} to see how to use CaptureConsoleHistory API.
       */
    captureConsoleHistory(captureConsoleHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#captureConsoleHistory.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": captureConsoleHistoryRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(captureConsoleHistoryRequest.captureConsoleHistoryDetails, "CaptureConsoleHistoryDetails", models.CaptureConsoleHistoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, captureConsoleHistoryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "consoleHistory",
                    bodyModel: "model.ConsoleHistory",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a compute capacity reservation into a different compartment. For information about
     * moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeComputeCapacityReservationCompartmentRequest
     * @return ChangeComputeCapacityReservationCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeComputeCapacityReservationCompartment.ts.html |here} to see how to use ChangeComputeCapacityReservationCompartment API.
     */
    changeComputeCapacityReservationCompartment(changeComputeCapacityReservationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#changeComputeCapacityReservationCompartment.");
            const pathParams = {
                "{capacityReservationId}": changeComputeCapacityReservationCompartmentRequest.capacityReservationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeComputeCapacityReservationCompartmentRequest.ifMatch,
                "opc-request-id": changeComputeCapacityReservationCompartmentRequest.opcRequestId,
                "opc-retry-token": changeComputeCapacityReservationCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations/{capacityReservationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeComputeCapacityReservationCompartmentRequest.changeComputeCapacityReservationCompartmentDetails, "ChangeComputeCapacityReservationCompartmentDetails", models.ChangeComputeCapacityReservationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeComputeCapacityReservationCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a compute image capability schema into a different compartment within the same tenancy.
     * For information about moving resources between compartments, see
     *         [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeComputeImageCapabilitySchemaCompartmentRequest
     * @return ChangeComputeImageCapabilitySchemaCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeComputeImageCapabilitySchemaCompartment.ts.html |here} to see how to use ChangeComputeImageCapabilitySchemaCompartment API.
     */
    changeComputeImageCapabilitySchemaCompartment(changeComputeImageCapabilitySchemaCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#changeComputeImageCapabilitySchemaCompartment.");
            const pathParams = {
                "{computeImageCapabilitySchemaId}": changeComputeImageCapabilitySchemaCompartmentRequest.computeImageCapabilitySchemaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeComputeImageCapabilitySchemaCompartmentRequest.ifMatch,
                "opc-request-id": changeComputeImageCapabilitySchemaCompartmentRequest.opcRequestId,
                "opc-retry-token": changeComputeImageCapabilitySchemaCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeComputeImageCapabilitySchemaCompartmentRequest.changeComputeImageCapabilitySchemaCompartmentDetails, "ChangeComputeImageCapabilitySchemaCompartmentDetails", models.ChangeComputeImageCapabilitySchemaCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeComputeImageCapabilitySchemaCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a dedicated virtual machine host from one compartment to another.
     * @param ChangeDedicatedVmHostCompartmentRequest
     * @return ChangeDedicatedVmHostCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeDedicatedVmHostCompartment.ts.html |here} to see how to use ChangeDedicatedVmHostCompartment API.
     */
    changeDedicatedVmHostCompartment(changeDedicatedVmHostCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#changeDedicatedVmHostCompartment.");
            const pathParams = {
                "{dedicatedVmHostId}": changeDedicatedVmHostCompartmentRequest.dedicatedVmHostId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDedicatedVmHostCompartmentRequest.ifMatch,
                "opc-request-id": changeDedicatedVmHostCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDedicatedVmHostCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts/{dedicatedVmHostId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDedicatedVmHostCompartmentRequest.changeDedicatedVmHostCompartmentDetails, "ChangeDedicatedVmHostCompartmentDetails", models.ChangeDedicatedVmHostCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDedicatedVmHostCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an image into a different compartment within the same tenancy. For information about moving
     * resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeImageCompartmentRequest
     * @return ChangeImageCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeImageCompartment.ts.html |here} to see how to use ChangeImageCompartment API.
     */
    changeImageCompartment(changeImageCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#changeImageCompartment.");
            const pathParams = {
                "{imageId}": changeImageCompartmentRequest.imageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeImageCompartmentRequest.ifMatch,
                "opc-request-id": changeImageCompartmentRequest.opcRequestId,
                "opc-retry-token": changeImageCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeImageCompartmentRequest.changeImageCompartmentDetails, "ChangeImageCompartmentDetails", models.ChangeImageCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeImageCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves an instance into a different compartment within the same tenancy. For information about
  * moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When you move an instance to a different compartment, associated resources such as boot volumes and VNICs
  * are not moved.
  *
       * @param ChangeInstanceCompartmentRequest
       * @return ChangeInstanceCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeInstanceCompartment.ts.html |here} to see how to use ChangeInstanceCompartment API.
       */
    changeInstanceCompartment(changeInstanceCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#changeInstanceCompartment.");
            const pathParams = {
                "{instanceId}": changeInstanceCompartmentRequest.instanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeInstanceCompartmentRequest.ifMatch,
                "opc-request-id": changeInstanceCompartmentRequest.opcRequestId,
                "opc-retry-token": changeInstanceCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeInstanceCompartmentRequest.changeInstanceCompartmentDetails, "ChangeInstanceCompartmentDetails", models.ChangeInstanceCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeInstanceCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a subscription for listing resource version for a compartment. It will take some time to propagate to all regions.
     *
     * @param CreateAppCatalogSubscriptionRequest
     * @return CreateAppCatalogSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateAppCatalogSubscription.ts.html |here} to see how to use CreateAppCatalogSubscription API.
     */
    createAppCatalogSubscription(createAppCatalogSubscriptionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createAppCatalogSubscription.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createAppCatalogSubscriptionRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogSubscriptions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAppCatalogSubscriptionRequest.createAppCatalogSubscriptionDetails, "CreateAppCatalogSubscriptionDetails", models.CreateAppCatalogSubscriptionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createAppCatalogSubscriptionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "appCatalogSubscription",
                    bodyModel: "model.AppCatalogSubscription",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new compute capacity reservation in the specified compartment and availability domain.
     * Compute capacity reservations let you reserve instances in a compartment.
     * When you launch an instance using this reservation, you are assured that you have enough space for your instance,
     * and you won't get out of capacity errors.
     * For more information, see [Reserved Capacity](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/reserve-capacity.htm).
     *
     * @param CreateComputeCapacityReservationRequest
     * @return CreateComputeCapacityReservationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateComputeCapacityReservation.ts.html |here} to see how to use CreateComputeCapacityReservation API.
     */
    createComputeCapacityReservation(createComputeCapacityReservationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createComputeCapacityReservation.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createComputeCapacityReservationRequest.opcRequestId,
                "opc-retry-token": createComputeCapacityReservationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createComputeCapacityReservationRequest.createComputeCapacityReservationDetails, "CreateComputeCapacityReservationDetails", models.CreateComputeCapacityReservationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createComputeCapacityReservationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeCapacityReservation",
                    bodyModel: "model.ComputeCapacityReservation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates compute image capability schema.
     *
     * @param CreateComputeImageCapabilitySchemaRequest
     * @return CreateComputeImageCapabilitySchemaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateComputeImageCapabilitySchema.ts.html |here} to see how to use CreateComputeImageCapabilitySchema API.
     */
    createComputeImageCapabilitySchema(createComputeImageCapabilitySchemaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createComputeImageCapabilitySchema.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createComputeImageCapabilitySchemaRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createComputeImageCapabilitySchemaRequest.createComputeImageCapabilitySchemaDetails, "CreateComputeImageCapabilitySchemaDetails", models.CreateComputeImageCapabilitySchemaDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createComputeImageCapabilitySchemaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeImageCapabilitySchema",
                    bodyModel: "model.ComputeImageCapabilitySchema",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new dedicated virtual machine host in the specified compartment and the specified availability domain.
     * Dedicated virtual machine hosts enable you to run your Compute virtual machine (VM) instances on dedicated servers
     * that are a single tenant and not shared with other customers.
     * For more information, see [Dedicated Virtual Machine Hosts](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/dedicatedvmhosts.htm).
     *
     * @param CreateDedicatedVmHostRequest
     * @return CreateDedicatedVmHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDedicatedVmHost.ts.html |here} to see how to use CreateDedicatedVmHost API.
     */
    createDedicatedVmHost(createDedicatedVmHostRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createDedicatedVmHost.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createDedicatedVmHostRequest.opcRequestId,
                "opc-retry-token": createDedicatedVmHostRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDedicatedVmHostRequest.createDedicatedVmHostDetails, "CreateDedicatedVmHostDetails", models.CreateDedicatedVmHostDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDedicatedVmHostRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dedicatedVmHost",
                    bodyModel: "model.DedicatedVmHost",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a boot disk image for the specified instance or imports an exported image from the Oracle Cloud Infrastructure Object Storage service.
  * <p>
  When creating a new image, you must provide the OCID of the instance you want to use as the basis for the image, and
  * the OCID of the compartment containing that instance. For more information about images,
  * see [Managing Custom Images](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingcustomimages.htm).
  * <p>
  When importing an exported image from Object Storage, you specify the source information
  * in {@link #imageSourceDetails(ImageSourceDetailsRequest) imageSourceDetails}.
  * <p>
  When importing an image based on the namespace, bucket name, and object name,
  * use {@link #imageSourceViaObjectStorageTupleDetails(ImageSourceViaObjectStorageTupleDetailsRequest) imageSourceViaObjectStorageTupleDetails}.
  * <p>
  When importing an image based on the Object Storage URL, use
  * {@link #imageSourceViaObjectStorageUriDetails(ImageSourceViaObjectStorageUriDetailsRequest) imageSourceViaObjectStorageUriDetails}.
  * See [Object Storage URLs](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/iaas/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
  * for constructing URLs for image import/export.
  * <p>
  For more information about importing exported images, see
  * [Image Import/Export](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm).
  * <p>
  You may optionally specify a *display name* for the image, which is simply a friendly name or description.
  * It does not have to be unique, and you can change it. See {@link #updateImage(UpdateImageRequest) updateImage}.
  * Avoid entering confidential information.
  *
       * @param CreateImageRequest
       * @return CreateImageResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateImage.ts.html |here} to see how to use CreateImage API.
       */
    createImage(createImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createImage.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createImageRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createImageRequest.createImageDetails, "CreateImageDetails", models.CreateImageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createImageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "image",
                    bodyModel: "model.Image",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new console connection to the specified instance.
  * After the console connection has been created and is available,
  * you connect to the console using SSH.
  * <p>
  For more information about instance console connections, see [Troubleshooting Instances Using Instance Console Connections](https://docs.cloud.oracle.com/iaas/Content/Compute/References/serialconsole.htm).
  *
       * @param CreateInstanceConsoleConnectionRequest
       * @return CreateInstanceConsoleConnectionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateInstanceConsoleConnection.ts.html |here} to see how to use CreateInstanceConsoleConnection API.
       */
    createInstanceConsoleConnection(createInstanceConsoleConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#createInstanceConsoleConnection.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createInstanceConsoleConnectionRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleConnections",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInstanceConsoleConnectionRequest.createInstanceConsoleConnectionDetails, "CreateInstanceConsoleConnectionDetails", models.CreateInstanceConsoleConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createInstanceConsoleConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConsoleConnection",
                    bodyModel: "model.InstanceConsoleConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete a subscription for a listing resource version for a compartment.
     * @param DeleteAppCatalogSubscriptionRequest
     * @return DeleteAppCatalogSubscriptionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteAppCatalogSubscription.ts.html |here} to see how to use DeleteAppCatalogSubscription API.
     */
    deleteAppCatalogSubscription(deleteAppCatalogSubscriptionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteAppCatalogSubscription.");
            const pathParams = {};
            const queryParams = {
                "listingId": deleteAppCatalogSubscriptionRequest.listingId,
                "compartmentId": deleteAppCatalogSubscriptionRequest.compartmentId,
                "resourceVersion": deleteAppCatalogSubscriptionRequest.resourceVersion
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogSubscriptions",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAppCatalogSubscriptionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified compute capacity reservation.
     * @param DeleteComputeCapacityReservationRequest
     * @return DeleteComputeCapacityReservationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteComputeCapacityReservation.ts.html |here} to see how to use DeleteComputeCapacityReservation API.
     */
    deleteComputeCapacityReservation(deleteComputeCapacityReservationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteComputeCapacityReservation.");
            const pathParams = {
                "{capacityReservationId}": deleteComputeCapacityReservationRequest.capacityReservationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteComputeCapacityReservationRequest.opcRequestId,
                "if-match": deleteComputeCapacityReservationRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations/{capacityReservationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteComputeCapacityReservationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified Compute Image Capability Schema
     *
     * @param DeleteComputeImageCapabilitySchemaRequest
     * @return DeleteComputeImageCapabilitySchemaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteComputeImageCapabilitySchema.ts.html |here} to see how to use DeleteComputeImageCapabilitySchema API.
     */
    deleteComputeImageCapabilitySchema(deleteComputeImageCapabilitySchemaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteComputeImageCapabilitySchema.");
            const pathParams = {
                "{computeImageCapabilitySchemaId}": deleteComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteComputeImageCapabilitySchemaRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteComputeImageCapabilitySchemaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified console history metadata and the console history data.
     *
     * @param DeleteConsoleHistoryRequest
     * @return DeleteConsoleHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteConsoleHistory.ts.html |here} to see how to use DeleteConsoleHistory API.
     */
    deleteConsoleHistory(deleteConsoleHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteConsoleHistory.");
            const pathParams = {
                "{instanceConsoleHistoryId}": deleteConsoleHistoryRequest.instanceConsoleHistoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteConsoleHistoryRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteConsoleHistoryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified dedicated virtual machine host.
  * <p>
  If any VM instances are assigned to the dedicated virtual machine host,
  * the delete operation will fail and the service will return a 409 response code.
  *
       * @param DeleteDedicatedVmHostRequest
       * @return DeleteDedicatedVmHostResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDedicatedVmHost.ts.html |here} to see how to use DeleteDedicatedVmHost API.
       */
    deleteDedicatedVmHost(deleteDedicatedVmHostRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteDedicatedVmHost.");
            const pathParams = {
                "{dedicatedVmHostId}": deleteDedicatedVmHostRequest.dedicatedVmHostId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteDedicatedVmHostRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts/{dedicatedVmHostId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDedicatedVmHostRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an image.
     * @param DeleteImageRequest
     * @return DeleteImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteImage.ts.html |here} to see how to use DeleteImage API.
     */
    deleteImage(deleteImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteImage.");
            const pathParams = {
                "{imageId}": deleteImageRequest.imageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteImageRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteImageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified instance console connection.
     * @param DeleteInstanceConsoleConnectionRequest
     * @return DeleteInstanceConsoleConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteInstanceConsoleConnection.ts.html |here} to see how to use DeleteInstanceConsoleConnection API.
     */
    deleteInstanceConsoleConnection(deleteInstanceConsoleConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#deleteInstanceConsoleConnection.");
            const pathParams = {
                "{instanceConsoleConnectionId}": deleteInstanceConsoleConnectionRequest.instanceConsoleConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteInstanceConsoleConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteInstanceConsoleConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Detaches a boot volume from an instance. You must specify the OCID of the boot volume attachment.
  * <p>
  This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
  * until the attachment is completely removed.
  *
       * @param DetachBootVolumeRequest
       * @return DetachBootVolumeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachBootVolume.ts.html |here} to see how to use DetachBootVolume API.
       */
    detachBootVolume(detachBootVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#detachBootVolume.");
            const pathParams = {
                "{bootVolumeAttachmentId}": detachBootVolumeRequest.bootVolumeAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachBootVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachBootVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches and deletes the specified secondary VNIC.
     * This operation cannot be used on the instance's primary VNIC.
     * When you terminate an instance, all attached VNICs (primary
     * and secondary) are automatically detached and deleted.
     * <p>
     **Important:** If the VNIC has a
     * {@link PrivateIp} that is the
     * [target of a route rule](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip),
     * deleting the VNIC causes that route rule to blackhole and the traffic
     * will be dropped.
     *
     * @param DetachVnicRequest
     * @return DetachVnicResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachVnic.ts.html |here} to see how to use DetachVnic API.
     */
    detachVnic(detachVnicRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#detachVnic.");
            const pathParams = {
                "{vnicAttachmentId}": detachVnicRequest.vnicAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachVnicRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnicAttachments/{vnicAttachmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachVnicRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Detaches a storage volume from an instance. You must specify the OCID of the volume attachment.
  * <p>
  This is an asynchronous operation. The attachment's `lifecycleState` will change to DETACHING temporarily
  * until the attachment is completely removed.
  *
       * @param DetachVolumeRequest
       * @return DetachVolumeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachVolume.ts.html |here} to see how to use DetachVolume API.
       */
    detachVolume(detachVolumeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#detachVolume.");
            const pathParams = {
                "{volumeAttachmentId}": detachVolumeRequest.volumeAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachVolumeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeAttachments/{volumeAttachmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachVolumeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Exports the specified image to the Oracle Cloud Infrastructure Object Storage service. You can use the Object Storage URL,
  * or the namespace, bucket name, and object name when specifying the location to export to.
  * <p>
  For more information about exporting images, see [Image Import/Export](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm).
  * <p>
  To perform an image export, you need write access to the Object Storage bucket for the image,
  * see [Let Users Write Objects to Object Storage Buckets](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/commonpolicies.htm#Let4).
  * <p>
  See [Object Storage URLs](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/imageimportexport.htm#URLs) and [Using Pre-Authenticated Requests](https://docs.cloud.oracle.com/iaas/Content/Object/Tasks/usingpreauthenticatedrequests.htm)
  * for constructing URLs for image import/export.
  *
       * @param ExportImageRequest
       * @return ExportImageResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ExportImage.ts.html |here} to see how to use ExportImage API.
       */
    exportImage(exportImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#exportImage.");
            const pathParams = {
                "{imageId}": exportImageRequest.imageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": exportImageRequest.opcRetryToken,
                "if-match": exportImageRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/actions/export",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportImageRequest.exportImageDetails, "ExportImageDetails", models.ExportImageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, exportImageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "image",
                    bodyModel: "model.Image",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified listing.
     * @param GetAppCatalogListingRequest
     * @return GetAppCatalogListingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetAppCatalogListing.ts.html |here} to see how to use GetAppCatalogListing API.
     */
    getAppCatalogListing(getAppCatalogListingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getAppCatalogListing.");
            const pathParams = {
                "{listingId}": getAppCatalogListingRequest.listingId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogListings/{listingId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAppCatalogListingRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "appCatalogListing",
                    bodyModel: "model.AppCatalogListing",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves the agreements for a particular resource version of a listing.
     * @param GetAppCatalogListingAgreementsRequest
     * @return GetAppCatalogListingAgreementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetAppCatalogListingAgreements.ts.html |here} to see how to use GetAppCatalogListingAgreements API.
     */
    getAppCatalogListingAgreements(getAppCatalogListingAgreementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getAppCatalogListingAgreements.");
            const pathParams = {
                "{listingId}": getAppCatalogListingAgreementsRequest.listingId,
                "{resourceVersion}": getAppCatalogListingAgreementsRequest.resourceVersion
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}/agreements",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAppCatalogListingAgreementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "appCatalogListingResourceVersionAgreements",
                    bodyModel: "model.AppCatalogListingResourceVersionAgreements",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified listing resource version.
     * @param GetAppCatalogListingResourceVersionRequest
     * @return GetAppCatalogListingResourceVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetAppCatalogListingResourceVersion.ts.html |here} to see how to use GetAppCatalogListingResourceVersion API.
     */
    getAppCatalogListingResourceVersion(getAppCatalogListingResourceVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getAppCatalogListingResourceVersion.");
            const pathParams = {
                "{listingId}": getAppCatalogListingResourceVersionRequest.listingId,
                "{resourceVersion}": getAppCatalogListingResourceVersionRequest.resourceVersion
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogListings/{listingId}/resourceVersions/{resourceVersion}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAppCatalogListingResourceVersionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "appCatalogListingResourceVersion",
                    bodyModel: "model.AppCatalogListingResourceVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified boot volume attachment.
     * @param GetBootVolumeAttachmentRequest
     * @return GetBootVolumeAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetBootVolumeAttachment.ts.html |here} to see how to use GetBootVolumeAttachment API.
     */
    getBootVolumeAttachment(getBootVolumeAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getBootVolumeAttachment.");
            const pathParams = {
                "{bootVolumeAttachmentId}": getBootVolumeAttachmentRequest.bootVolumeAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeAttachments/{bootVolumeAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBootVolumeAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bootVolumeAttachment",
                    bodyModel: "model.BootVolumeAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified compute capacity reservation.
     * @param GetComputeCapacityReservationRequest
     * @return GetComputeCapacityReservationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetComputeCapacityReservation.ts.html |here} to see how to use GetComputeCapacityReservation API.
     */
    getComputeCapacityReservation(getComputeCapacityReservationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getComputeCapacityReservation.");
            const pathParams = {
                "{capacityReservationId}": getComputeCapacityReservationRequest.capacityReservationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getComputeCapacityReservationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations/{capacityReservationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getComputeCapacityReservationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeCapacityReservation",
                    bodyModel: "model.ComputeCapacityReservation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified Compute Global Image Capability Schema
     * @param GetComputeGlobalImageCapabilitySchemaRequest
     * @return GetComputeGlobalImageCapabilitySchemaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetComputeGlobalImageCapabilitySchema.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchema API.
     */
    getComputeGlobalImageCapabilitySchema(getComputeGlobalImageCapabilitySchemaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getComputeGlobalImageCapabilitySchema.");
            const pathParams = {
                "{computeGlobalImageCapabilitySchemaId}": getComputeGlobalImageCapabilitySchemaRequest.computeGlobalImageCapabilitySchemaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getComputeGlobalImageCapabilitySchemaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeGlobalImageCapabilitySchema",
                    bodyModel: "model.ComputeGlobalImageCapabilitySchema",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified Compute Global Image Capability Schema Version
     * @param GetComputeGlobalImageCapabilitySchemaVersionRequest
     * @return GetComputeGlobalImageCapabilitySchemaVersionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetComputeGlobalImageCapabilitySchemaVersion.ts.html |here} to see how to use GetComputeGlobalImageCapabilitySchemaVersion API.
     */
    getComputeGlobalImageCapabilitySchemaVersion(getComputeGlobalImageCapabilitySchemaVersionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getComputeGlobalImageCapabilitySchemaVersion.");
            const pathParams = {
                "{computeGlobalImageCapabilitySchemaId}": getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaId,
                "{computeGlobalImageCapabilitySchemaVersionName}": getComputeGlobalImageCapabilitySchemaVersionRequest.computeGlobalImageCapabilitySchemaVersionName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions/{computeGlobalImageCapabilitySchemaVersionName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getComputeGlobalImageCapabilitySchemaVersionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeGlobalImageCapabilitySchemaVersion",
                    bodyModel: "model.ComputeGlobalImageCapabilitySchemaVersion",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified Compute Image Capability Schema
     *
     * @param GetComputeImageCapabilitySchemaRequest
     * @return GetComputeImageCapabilitySchemaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetComputeImageCapabilitySchema.ts.html |here} to see how to use GetComputeImageCapabilitySchema API.
     */
    getComputeImageCapabilitySchema(getComputeImageCapabilitySchemaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getComputeImageCapabilitySchema.");
            const pathParams = {
                "{computeImageCapabilitySchemaId}": getComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
            };
            const queryParams = {
                "isMergeEnabled": getComputeImageCapabilitySchemaRequest.isMergeEnabled
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getComputeImageCapabilitySchemaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeImageCapabilitySchema",
                    bodyModel: "model.ComputeImageCapabilitySchema",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Shows the metadata for the specified console history.
     * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
     * for details about using the console history operations.
     *
     * @param GetConsoleHistoryRequest
     * @return GetConsoleHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetConsoleHistory.ts.html |here} to see how to use GetConsoleHistory API.
     */
    getConsoleHistory(getConsoleHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getConsoleHistory.");
            const pathParams = {
                "{instanceConsoleHistoryId}": getConsoleHistoryRequest.instanceConsoleHistoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConsoleHistoryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "consoleHistory",
                    bodyModel: "model.ConsoleHistory",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the actual console history data (not the metadata).
     * See {@link #captureConsoleHistory(CaptureConsoleHistoryRequest) captureConsoleHistory}
     * for details about using the console history operations.
     *
     * @param GetConsoleHistoryContentRequest
     * @return GetConsoleHistoryContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetConsoleHistoryContent.ts.html |here} to see how to use GetConsoleHistoryContent API.
     */
    getConsoleHistoryContent(getConsoleHistoryContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getConsoleHistoryContent.");
            const pathParams = {
                "{instanceConsoleHistoryId}": getConsoleHistoryContentRequest.instanceConsoleHistoryId
            };
            const queryParams = {
                "offset": getConsoleHistoryContentRequest.offset,
                "length": getConsoleHistoryContentRequest.length
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories/{instanceConsoleHistoryId}/data",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConsoleHistoryContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-bytes-remaining"),
                            key: "opcBytesRemaining",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified dedicated virtual machine host.
     * @param GetDedicatedVmHostRequest
     * @return GetDedicatedVmHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDedicatedVmHost.ts.html |here} to see how to use GetDedicatedVmHost API.
     */
    getDedicatedVmHost(getDedicatedVmHostRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getDedicatedVmHost.");
            const pathParams = {
                "{dedicatedVmHostId}": getDedicatedVmHostRequest.dedicatedVmHostId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDedicatedVmHostRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts/{dedicatedVmHostId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDedicatedVmHostRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dedicatedVmHost",
                    bodyModel: "model.DedicatedVmHost",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified image.
     * @param GetImageRequest
     * @return GetImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetImage.ts.html |here} to see how to use GetImage API.
     */
    getImage(getImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getImage.");
            const pathParams = {
                "{imageId}": getImageRequest.imageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getImageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "image",
                    bodyModel: "model.Image",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves an image shape compatibility entry.
     * @param GetImageShapeCompatibilityEntryRequest
     * @return GetImageShapeCompatibilityEntryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetImageShapeCompatibilityEntry.ts.html |here} to see how to use GetImageShapeCompatibilityEntry API.
     */
    getImageShapeCompatibilityEntry(getImageShapeCompatibilityEntryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getImageShapeCompatibilityEntry.");
            const pathParams = {
                "{imageId}": getImageShapeCompatibilityEntryRequest.imageId,
                "{shapeName}": getImageShapeCompatibilityEntryRequest.shapeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getImageShapeCompatibilityEntryRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/shapes/{shapeName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getImageShapeCompatibilityEntryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "imageShapeCompatibilityEntry",
                    bodyModel: "model.ImageShapeCompatibilityEntry",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified instance.
     * @param GetInstanceRequest
     * @return GetInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstance.ts.html |here} to see how to use GetInstance API.
     */
    getInstance(getInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getInstance.");
            const pathParams = {
                "{instanceId}": getInstanceRequest.instanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instance",
                    bodyModel: "model.Instance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified instance console connection's information.
     * @param GetInstanceConsoleConnectionRequest
     * @return GetInstanceConsoleConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstanceConsoleConnection.ts.html |here} to see how to use GetInstanceConsoleConnection API.
     */
    getInstanceConsoleConnection(getInstanceConsoleConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getInstanceConsoleConnection.");
            const pathParams = {
                "{instanceConsoleConnectionId}": getInstanceConsoleConnectionRequest.instanceConsoleConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceConsoleConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConsoleConnection",
                    bodyModel: "model.InstanceConsoleConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the information for the specified VNIC attachment.
     *
     * @param GetVnicAttachmentRequest
     * @return GetVnicAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVnicAttachment.ts.html |here} to see how to use GetVnicAttachment API.
     */
    getVnicAttachment(getVnicAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getVnicAttachment.");
            const pathParams = {
                "{vnicAttachmentId}": getVnicAttachmentRequest.vnicAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnicAttachments/{vnicAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVnicAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vnicAttachment",
                    bodyModel: "model.VnicAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified volume attachment.
     * @param GetVolumeAttachmentRequest
     * @return GetVolumeAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVolumeAttachment.ts.html |here} to see how to use GetVolumeAttachment API.
     */
    getVolumeAttachment(getVolumeAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getVolumeAttachment.");
            const pathParams = {
                "{volumeAttachmentId}": getVolumeAttachmentRequest.volumeAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeAttachments/{volumeAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVolumeAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "volumeAttachment",
                    bodyModel: "model.VolumeAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the generated credentials for the instance. Only works for instances that require a password to log in, such as Windows.
     * For certain operating systems, users will be forced to change the initial credentials.
     *
     * @param GetWindowsInstanceInitialCredentialsRequest
     * @return GetWindowsInstanceInitialCredentialsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetWindowsInstanceInitialCredentials.ts.html |here} to see how to use GetWindowsInstanceInitialCredentials API.
     */
    getWindowsInstanceInitialCredentials(getWindowsInstanceInitialCredentialsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#getWindowsInstanceInitialCredentials.");
            const pathParams = {
                "{instanceId}": getWindowsInstanceInitialCredentialsRequest.instanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}/initialCredentials",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWindowsInstanceInitialCredentialsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceCredentials",
                    bodyModel: "model.InstanceCredentials",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Performs one of the following power actions on the specified instance:
  * <p>
  - **START** - Powers on the instance.
  * <p>
  - **STOP** - Powers off the instance.
  * <p>
  - **RESET** - Powers off the instance and then powers it back on.
  * <p>
  - **SOFTSTOP** - Gracefully shuts down the instance by sending a shutdown command to the operating system.
  * After waiting 15 minutes for the OS to shut down, the instance is powered off.
  * If the applications that run on the instance take more than 15 minutes to shut down, they could be improperly stopped, resulting
  * in data corruption. To avoid this, manually shut down the instance using the commands available in the OS before you softstop the
  * instance.
  * <p>
  - **SOFTRESET** - Gracefully reboots the instance by sending a shutdown command to the operating system.
  * After waiting 15 minutes for the OS to shut down, the instance is powered off and
  * then powered back on.
  * <p>
  - **SENDDIAGNOSTICINTERRUPT** - For advanced users. **Warning: Sending a diagnostic interrupt to a live system can
  * cause data corruption or system failure.** Sends a diagnostic interrupt that causes the instance's
  * OS to crash and then reboot. Before you send a diagnostic interrupt, you must configure the instance to generate a
  * crash dump file when it crashes. The crash dump captures information about the state of the OS at the time of
  * the crash. After the OS restarts, you can analyze the crash dump to diagnose the issue. For more information, see
  * [Sending a Diagnostic Interrupt](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/sendingdiagnosticinterrupt.htm).
  * <p>
  
  * For more information about managing instance lifecycle states, see
  * [Stopping and Starting an Instance](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/restartinginstance.htm).
  *
       * @param InstanceActionRequest
       * @return InstanceActionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/InstanceAction.ts.html |here} to see how to use InstanceAction API.
       */
    instanceAction(instanceActionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#instanceAction.");
            const pathParams = {
                "{instanceId}": instanceActionRequest.instanceId
            };
            const queryParams = {
                "action": instanceActionRequest.action
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": instanceActionRequest.opcRetryToken,
                "if-match": instanceActionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, instanceActionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instance",
                    bodyModel: "model.Instance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new instance in the specified compartment and the specified availability domain.
  * For general information about instances, see
  * [Overview of the Compute Service](https://docs.cloud.oracle.com/iaas/Content/Compute/Concepts/computeoverview.htm).
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about availability domains, see
  * [Regions and Availability Domains](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the `ListAvailabilityDomains` operation
  * in the Identity and Access Management Service API.
  * <p>
  All Oracle Cloud Infrastructure resources, including instances, get an Oracle-assigned,
  * unique ID called an Oracle Cloud Identifier (OCID).
  * When you create a resource, you can find its OCID in the response. You can
  * also retrieve a resource's OCID by using a List API operation
  * on that resource type, or by viewing the resource in the Console.
  * <p>
  To launch an instance using an image or a boot volume use the `sourceDetails` parameter in {@link LaunchInstanceDetails}.
  * <p>
  When you launch an instance, it is automatically attached to a virtual
  * network interface card (VNIC), called the *primary VNIC*. The VNIC
  * has a private IP address from the subnet's CIDR. You can either assign a
  * private IP address of your choice or let Oracle automatically assign one.
  * You can choose whether the instance has a public IP address. To retrieve the
  * addresses, use the {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
  * operation to get the VNIC ID for the instance, and then call
  * {@link #getVnic(GetVnicRequest) getVnic} with the VNIC ID.
  * <p>
  You can later add secondary VNICs to an instance. For more information, see
  * [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
  * <p>
  To launch an instance from a Marketplace image listing, you must provide the image ID of the
  * listing resource version that you want, but you also must subscribe to the listing before you try
  * to launch the instance. To subscribe to the listing, use the {@link #getAppCatalogListingAgreements(GetAppCatalogListingAgreementsRequest) getAppCatalogListingAgreements}
  * operation to get the signature for the terms of use agreement for the desired listing resource version.
  * Then, call {@link #createAppCatalogSubscription(CreateAppCatalogSubscriptionRequest) createAppCatalogSubscription}
  * with the signature. To get the image ID for the LaunchInstance operation, call
  * {@link #getAppCatalogListingResourceVersion(GetAppCatalogListingResourceVersionRequest) getAppCatalogListingResourceVersion}.
  *
       * @param LaunchInstanceRequest
       * @return LaunchInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/LaunchInstance.ts.html |here} to see how to use LaunchInstance API.
       */
    launchInstance(launchInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#launchInstance.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": launchInstanceRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(launchInstanceRequest.launchInstanceDetails, "LaunchInstanceDetails", models.LaunchInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, launchInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instance",
                    bodyModel: "model.Instance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets all resource versions for a particular listing.
     * @param ListAppCatalogListingResourceVersionsRequest
     * @return ListAppCatalogListingResourceVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListAppCatalogListingResourceVersions.ts.html |here} to see how to use ListAppCatalogListingResourceVersions API.
     */
    listAppCatalogListingResourceVersions(listAppCatalogListingResourceVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listAppCatalogListingResourceVersions.");
            const pathParams = {
                "{listingId}": listAppCatalogListingResourceVersionsRequest.listingId
            };
            const queryParams = {
                "limit": listAppCatalogListingResourceVersionsRequest.limit,
                "page": listAppCatalogListingResourceVersionsRequest.page,
                "sortOrder": listAppCatalogListingResourceVersionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogListings/{listingId}/resourceVersions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAppCatalogListingResourceVersionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AppCatalogListingResourceVersionSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AppCatalogListingResourceVersionSummary objects
     * contained in responses from the listAppCatalogListingResourceVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogListingResourceVersions(request) {
        return oci_common_1.paginateRecords(request, req => this.listAppCatalogListingResourceVersions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListingResourceVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogListingResourceVersionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAppCatalogListingResourceVersions(req));
    }
    /**
     * Lists the published listings.
     * @param ListAppCatalogListingsRequest
     * @return ListAppCatalogListingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListAppCatalogListings.ts.html |here} to see how to use ListAppCatalogListings API.
     */
    listAppCatalogListings(listAppCatalogListingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listAppCatalogListings.");
            const pathParams = {};
            const queryParams = {
                "limit": listAppCatalogListingsRequest.limit,
                "page": listAppCatalogListingsRequest.page,
                "sortOrder": listAppCatalogListingsRequest.sortOrder,
                "publisherName": listAppCatalogListingsRequest.publisherName,
                "publisherType": listAppCatalogListingsRequest.publisherType,
                "displayName": listAppCatalogListingsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogListings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAppCatalogListingsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AppCatalogListingSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AppCatalogListingSummary objects
     * contained in responses from the listAppCatalogListings operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogListings(request) {
        return oci_common_1.paginateRecords(request, req => this.listAppCatalogListings(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAppCatalogListings operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogListingsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAppCatalogListings(req));
    }
    /**
     * Lists subscriptions for a compartment.
     * @param ListAppCatalogSubscriptionsRequest
     * @return ListAppCatalogSubscriptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListAppCatalogSubscriptions.ts.html |here} to see how to use ListAppCatalogSubscriptions API.
     */
    listAppCatalogSubscriptions(listAppCatalogSubscriptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listAppCatalogSubscriptions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAppCatalogSubscriptionsRequest.compartmentId,
                "limit": listAppCatalogSubscriptionsRequest.limit,
                "page": listAppCatalogSubscriptionsRequest.page,
                "sortBy": listAppCatalogSubscriptionsRequest.sortBy,
                "sortOrder": listAppCatalogSubscriptionsRequest.sortOrder,
                "listingId": listAppCatalogSubscriptionsRequest.listingId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/appCatalogSubscriptions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAppCatalogSubscriptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AppCatalogSubscriptionSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AppCatalogSubscriptionSummary objects
     * contained in responses from the listAppCatalogSubscriptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogSubscriptions(request) {
        return oci_common_1.paginateRecords(request, req => this.listAppCatalogSubscriptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAppCatalogSubscriptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAppCatalogSubscriptionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAppCatalogSubscriptions(req));
    }
    /**
     * Lists the boot volume attachments in the specified compartment. You can filter the
     * list by specifying an instance OCID, boot volume OCID, or both.
     *
     * @param ListBootVolumeAttachmentsRequest
     * @return ListBootVolumeAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListBootVolumeAttachments.ts.html |here} to see how to use ListBootVolumeAttachments API.
     */
    listBootVolumeAttachments(listBootVolumeAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listBootVolumeAttachments.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listBootVolumeAttachmentsRequest.availabilityDomain,
                "compartmentId": listBootVolumeAttachmentsRequest.compartmentId,
                "limit": listBootVolumeAttachmentsRequest.limit,
                "page": listBootVolumeAttachmentsRequest.page,
                "instanceId": listBootVolumeAttachmentsRequest.instanceId,
                "bootVolumeId": listBootVolumeAttachmentsRequest.bootVolumeId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/bootVolumeAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBootVolumeAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BootVolumeAttachment[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BootVolumeAttachment objects
     * contained in responses from the listBootVolumeAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.listBootVolumeAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBootVolumeAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBootVolumeAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBootVolumeAttachments(req));
    }
    /**
     * Lists the shapes that can be reserved within the specified compartment.
     *
     * @param ListComputeCapacityReservationInstanceShapesRequest
     * @return ListComputeCapacityReservationInstanceShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeCapacityReservationInstanceShapes.ts.html |here} to see how to use ListComputeCapacityReservationInstanceShapes API.
     */
    listComputeCapacityReservationInstanceShapes(listComputeCapacityReservationInstanceShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeCapacityReservationInstanceShapes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listComputeCapacityReservationInstanceShapesRequest.availabilityDomain,
                "compartmentId": listComputeCapacityReservationInstanceShapesRequest.compartmentId,
                "limit": listComputeCapacityReservationInstanceShapesRequest.limit,
                "page": listComputeCapacityReservationInstanceShapesRequest.page,
                "displayName": listComputeCapacityReservationInstanceShapesRequest.displayName,
                "sortBy": listComputeCapacityReservationInstanceShapesRequest.sortBy,
                "sortOrder": listComputeCapacityReservationInstanceShapesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listComputeCapacityReservationInstanceShapesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservationInstanceShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeCapacityReservationInstanceShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ComputeCapacityReservationInstanceShapeSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationInstanceShapeSummary objects
     * contained in responses from the listComputeCapacityReservationInstanceShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservationInstanceShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeCapacityReservationInstanceShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstanceShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservationInstanceShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeCapacityReservationInstanceShapes(req));
    }
    /**
     * Lists the instances launched under a capacity reservation. You can filter results by specifying criteria.
     *
     * @param ListComputeCapacityReservationInstancesRequest
     * @return ListComputeCapacityReservationInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeCapacityReservationInstances.ts.html |here} to see how to use ListComputeCapacityReservationInstances API.
     */
    listComputeCapacityReservationInstances(listComputeCapacityReservationInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeCapacityReservationInstances.");
            const pathParams = {
                "{capacityReservationId}": listComputeCapacityReservationInstancesRequest.capacityReservationId
            };
            const queryParams = {
                "availabilityDomain": listComputeCapacityReservationInstancesRequest.availabilityDomain,
                "compartmentId": listComputeCapacityReservationInstancesRequest.compartmentId,
                "limit": listComputeCapacityReservationInstancesRequest.limit,
                "page": listComputeCapacityReservationInstancesRequest.page,
                "sortBy": listComputeCapacityReservationInstancesRequest.sortBy,
                "sortOrder": listComputeCapacityReservationInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listComputeCapacityReservationInstancesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations/{capacityReservationId}/instances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeCapacityReservationInstancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CapacityReservationInstanceSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CapacityReservationInstanceSummary objects
     * contained in responses from the listComputeCapacityReservationInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservationInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeCapacityReservationInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservationInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservationInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeCapacityReservationInstances(req));
    }
    /**
       * Lists the compute capacity reservations that match the specified criteria and compartment.
  * <p>
  You can limit the list by specifying a compute capacity reservation display name
  * (the list will include all the identically-named compute capacity reservations in the compartment).
  *
       * @param ListComputeCapacityReservationsRequest
       * @return ListComputeCapacityReservationsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeCapacityReservations.ts.html |here} to see how to use ListComputeCapacityReservations API.
       */
    listComputeCapacityReservations(listComputeCapacityReservationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeCapacityReservations.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listComputeCapacityReservationsRequest.availabilityDomain,
                "compartmentId": listComputeCapacityReservationsRequest.compartmentId,
                "lifecycleState": listComputeCapacityReservationsRequest.lifecycleState,
                "displayName": listComputeCapacityReservationsRequest.displayName,
                "limit": listComputeCapacityReservationsRequest.limit,
                "page": listComputeCapacityReservationsRequest.page,
                "sortBy": listComputeCapacityReservationsRequest.sortBy,
                "sortOrder": listComputeCapacityReservationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listComputeCapacityReservationsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeCapacityReservationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ComputeCapacityReservationSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputeCapacityReservationSummary objects
     * contained in responses from the listComputeCapacityReservations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservations(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeCapacityReservations(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeCapacityReservations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeCapacityReservationsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeCapacityReservations(req));
    }
    /**
     * Lists Compute Global Image Capability Schema versions in the specified compartment.
     *
     * @param ListComputeGlobalImageCapabilitySchemaVersionsRequest
     * @return ListComputeGlobalImageCapabilitySchemaVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeGlobalImageCapabilitySchemaVersions.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemaVersions API.
     */
    listComputeGlobalImageCapabilitySchemaVersions(listComputeGlobalImageCapabilitySchemaVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemaVersions.");
            const pathParams = {
                "{computeGlobalImageCapabilitySchemaId}": listComputeGlobalImageCapabilitySchemaVersionsRequest.computeGlobalImageCapabilitySchemaId
            };
            const queryParams = {
                "displayName": listComputeGlobalImageCapabilitySchemaVersionsRequest.displayName,
                "limit": listComputeGlobalImageCapabilitySchemaVersionsRequest.limit,
                "page": listComputeGlobalImageCapabilitySchemaVersionsRequest.page,
                "sortBy": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortBy,
                "sortOrder": listComputeGlobalImageCapabilitySchemaVersionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeGlobalImageCapabilitySchemas/{computeGlobalImageCapabilitySchemaId}/versions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeGlobalImageCapabilitySchemaVersionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ComputeGlobalImageCapabilitySchemaVersionSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaVersionSummary objects
     * contained in responses from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeGlobalImageCapabilitySchemaVersions(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeGlobalImageCapabilitySchemaVersions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemaVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeGlobalImageCapabilitySchemaVersionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeGlobalImageCapabilitySchemaVersions(req));
    }
    /**
     * Lists Compute Global Image Capability Schema in the specified compartment.
     *
     * @param ListComputeGlobalImageCapabilitySchemasRequest
     * @return ListComputeGlobalImageCapabilitySchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeGlobalImageCapabilitySchemas.ts.html |here} to see how to use ListComputeGlobalImageCapabilitySchemas API.
     */
    listComputeGlobalImageCapabilitySchemas(listComputeGlobalImageCapabilitySchemasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeGlobalImageCapabilitySchemas.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listComputeGlobalImageCapabilitySchemasRequest.compartmentId,
                "displayName": listComputeGlobalImageCapabilitySchemasRequest.displayName,
                "limit": listComputeGlobalImageCapabilitySchemasRequest.limit,
                "page": listComputeGlobalImageCapabilitySchemasRequest.page,
                "sortBy": listComputeGlobalImageCapabilitySchemasRequest.sortBy,
                "sortOrder": listComputeGlobalImageCapabilitySchemasRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeGlobalImageCapabilitySchemas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeGlobalImageCapabilitySchemasRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ComputeGlobalImageCapabilitySchemaSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputeGlobalImageCapabilitySchemaSummary objects
     * contained in responses from the listComputeGlobalImageCapabilitySchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeGlobalImageCapabilitySchemas(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeGlobalImageCapabilitySchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeGlobalImageCapabilitySchemasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeGlobalImageCapabilitySchemas(req));
    }
    /**
     * Lists Compute Image Capability Schema in the specified compartment. You can also query by a specific imageId.
     *
     * @param ListComputeImageCapabilitySchemasRequest
     * @return ListComputeImageCapabilitySchemasResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListComputeImageCapabilitySchemas.ts.html |here} to see how to use ListComputeImageCapabilitySchemas API.
     */
    listComputeImageCapabilitySchemas(listComputeImageCapabilitySchemasRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listComputeImageCapabilitySchemas.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listComputeImageCapabilitySchemasRequest.compartmentId,
                "imageId": listComputeImageCapabilitySchemasRequest.imageId,
                "displayName": listComputeImageCapabilitySchemasRequest.displayName,
                "limit": listComputeImageCapabilitySchemasRequest.limit,
                "page": listComputeImageCapabilitySchemasRequest.page,
                "sortBy": listComputeImageCapabilitySchemasRequest.sortBy,
                "sortOrder": listComputeImageCapabilitySchemasRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listComputeImageCapabilitySchemasRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ComputeImageCapabilitySchemaSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ComputeImageCapabilitySchemaSummary objects
     * contained in responses from the listComputeImageCapabilitySchemas operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeImageCapabilitySchemas(request) {
        return oci_common_1.paginateRecords(request, req => this.listComputeImageCapabilitySchemas(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listComputeImageCapabilitySchemas operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllComputeImageCapabilitySchemasResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listComputeImageCapabilitySchemas(req));
    }
    /**
     * Lists the console history metadata for the specified compartment or instance.
     *
     * @param ListConsoleHistoriesRequest
     * @return ListConsoleHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListConsoleHistories.ts.html |here} to see how to use ListConsoleHistories API.
     */
    listConsoleHistories(listConsoleHistoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listConsoleHistories.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listConsoleHistoriesRequest.availabilityDomain,
                "compartmentId": listConsoleHistoriesRequest.compartmentId,
                "limit": listConsoleHistoriesRequest.limit,
                "page": listConsoleHistoriesRequest.page,
                "instanceId": listConsoleHistoriesRequest.instanceId,
                "sortBy": listConsoleHistoriesRequest.sortBy,
                "sortOrder": listConsoleHistoriesRequest.sortOrder,
                "lifecycleState": listConsoleHistoriesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listConsoleHistoriesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ConsoleHistory[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ConsoleHistory objects
     * contained in responses from the listConsoleHistories operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConsoleHistories(request) {
        return oci_common_1.paginateRecords(request, req => this.listConsoleHistories(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listConsoleHistories operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConsoleHistoriesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listConsoleHistories(req));
    }
    /**
     * Lists the shapes that can be used to launch a virtual machine instance on a dedicated virtual machine host within the specified compartment.
     * You can filter the list by compatibility with a specific dedicated virtual machine host shape.
     *
     * @param ListDedicatedVmHostInstanceShapesRequest
     * @return ListDedicatedVmHostInstanceShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDedicatedVmHostInstanceShapes.ts.html |here} to see how to use ListDedicatedVmHostInstanceShapes API.
     */
    listDedicatedVmHostInstanceShapes(listDedicatedVmHostInstanceShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstanceShapes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listDedicatedVmHostInstanceShapesRequest.availabilityDomain,
                "compartmentId": listDedicatedVmHostInstanceShapesRequest.compartmentId,
                "dedicatedVmHostShape": listDedicatedVmHostInstanceShapesRequest.dedicatedVmHostShape,
                "limit": listDedicatedVmHostInstanceShapesRequest.limit,
                "page": listDedicatedVmHostInstanceShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDedicatedVmHostInstanceShapesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHostInstanceShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDedicatedVmHostInstanceShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DedicatedVmHostInstanceShapeSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceShapeSummary objects
     * contained in responses from the listDedicatedVmHostInstanceShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostInstanceShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listDedicatedVmHostInstanceShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstanceShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostInstanceShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDedicatedVmHostInstanceShapes(req));
    }
    /**
     * Returns the list of instances on the dedicated virtual machine hosts that match the specified criteria.
     *
     * @param ListDedicatedVmHostInstancesRequest
     * @return ListDedicatedVmHostInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDedicatedVmHostInstances.ts.html |here} to see how to use ListDedicatedVmHostInstances API.
     */
    listDedicatedVmHostInstances(listDedicatedVmHostInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostInstances.");
            const pathParams = {
                "{dedicatedVmHostId}": listDedicatedVmHostInstancesRequest.dedicatedVmHostId
            };
            const queryParams = {
                "availabilityDomain": listDedicatedVmHostInstancesRequest.availabilityDomain,
                "compartmentId": listDedicatedVmHostInstancesRequest.compartmentId,
                "limit": listDedicatedVmHostInstancesRequest.limit,
                "page": listDedicatedVmHostInstancesRequest.page,
                "sortBy": listDedicatedVmHostInstancesRequest.sortBy,
                "sortOrder": listDedicatedVmHostInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDedicatedVmHostInstancesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts/{dedicatedVmHostId}/instances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDedicatedVmHostInstancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DedicatedVmHostInstanceSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DedicatedVmHostInstanceSummary objects
     * contained in responses from the listDedicatedVmHostInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listDedicatedVmHostInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDedicatedVmHostInstances(req));
    }
    /**
     * Lists the shapes that can be used to launch a dedicated virtual machine host within the specified compartment.
     *
     * @param ListDedicatedVmHostShapesRequest
     * @return ListDedicatedVmHostShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDedicatedVmHostShapes.ts.html |here} to see how to use ListDedicatedVmHostShapes API.
     */
    listDedicatedVmHostShapes(listDedicatedVmHostShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listDedicatedVmHostShapes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listDedicatedVmHostShapesRequest.availabilityDomain,
                "compartmentId": listDedicatedVmHostShapesRequest.compartmentId,
                "instanceShapeName": listDedicatedVmHostShapesRequest.instanceShapeName,
                "limit": listDedicatedVmHostShapesRequest.limit,
                "page": listDedicatedVmHostShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDedicatedVmHostShapesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHostShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDedicatedVmHostShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DedicatedVmHostShapeSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DedicatedVmHostShapeSummary objects
     * contained in responses from the listDedicatedVmHostShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listDedicatedVmHostShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHostShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDedicatedVmHostShapes(req));
    }
    /**
       * Returns the list of dedicated virtual machine hosts that match the specified criteria in the specified compartment.
  * <p>
  You can limit the list by specifying a dedicated virtual machine host display name. The list will include all the identically-named
  * dedicated virtual machine hosts in the compartment.
  *
       * @param ListDedicatedVmHostsRequest
       * @return ListDedicatedVmHostsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDedicatedVmHosts.ts.html |here} to see how to use ListDedicatedVmHosts API.
       */
    listDedicatedVmHosts(listDedicatedVmHostsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listDedicatedVmHosts.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listDedicatedVmHostsRequest.availabilityDomain,
                "compartmentId": listDedicatedVmHostsRequest.compartmentId,
                "lifecycleState": listDedicatedVmHostsRequest.lifecycleState,
                "displayName": listDedicatedVmHostsRequest.displayName,
                "instanceShapeName": listDedicatedVmHostsRequest.instanceShapeName,
                "limit": listDedicatedVmHostsRequest.limit,
                "page": listDedicatedVmHostsRequest.page,
                "sortBy": listDedicatedVmHostsRequest.sortBy,
                "sortOrder": listDedicatedVmHostsRequest.sortOrder,
                "remainingMemoryInGBsGreaterThanOrEqualTo": listDedicatedVmHostsRequest.remainingMemoryInGBsGreaterThanOrEqualTo,
                "remainingOcpusGreaterThanOrEqualTo": listDedicatedVmHostsRequest.remainingOcpusGreaterThanOrEqualTo
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDedicatedVmHostsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDedicatedVmHostsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DedicatedVmHostSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DedicatedVmHostSummary objects
     * contained in responses from the listDedicatedVmHosts operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHosts(request) {
        return oci_common_1.paginateRecords(request, req => this.listDedicatedVmHosts(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDedicatedVmHosts operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDedicatedVmHostsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDedicatedVmHosts(req));
    }
    /**
     * Lists the compatible shapes for the specified image.
     * @param ListImageShapeCompatibilityEntriesRequest
     * @return ListImageShapeCompatibilityEntriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListImageShapeCompatibilityEntries.ts.html |here} to see how to use ListImageShapeCompatibilityEntries API.
     */
    listImageShapeCompatibilityEntries(listImageShapeCompatibilityEntriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listImageShapeCompatibilityEntries.");
            const pathParams = {
                "{imageId}": listImageShapeCompatibilityEntriesRequest.imageId
            };
            const queryParams = {
                "limit": listImageShapeCompatibilityEntriesRequest.limit,
                "page": listImageShapeCompatibilityEntriesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImageShapeCompatibilityEntriesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/shapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listImageShapeCompatibilityEntriesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ImageShapeCompatibilitySummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ImageShapeCompatibilitySummary objects
     * contained in responses from the listImageShapeCompatibilityEntries operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllImageShapeCompatibilityEntries(request) {
        return oci_common_1.paginateRecords(request, req => this.listImageShapeCompatibilityEntries(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listImageShapeCompatibilityEntries operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllImageShapeCompatibilityEntriesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listImageShapeCompatibilityEntries(req));
    }
    /**
       * Lists the available images in the specified compartment, including
  * [platform images](https://docs.cloud.oracle.com/iaas/Content/Compute/References/images.htm) and
  * [custom images](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingcustomimages.htm) that have
  * been created.
  * <p>
  The list of images that's returned is ordered to first show all
  * platform images, then all custom images. The order of images might
  * change when new images are released.
  *
       * @param ListImagesRequest
       * @return ListImagesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListImages.ts.html |here} to see how to use ListImages API.
       */
    listImages(listImagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listImages.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listImagesRequest.compartmentId,
                "displayName": listImagesRequest.displayName,
                "operatingSystem": listImagesRequest.operatingSystem,
                "operatingSystemVersion": listImagesRequest.operatingSystemVersion,
                "shape": listImagesRequest.shape,
                "limit": listImagesRequest.limit,
                "page": listImagesRequest.page,
                "sortBy": listImagesRequest.sortBy,
                "sortOrder": listImagesRequest.sortOrder,
                "lifecycleState": listImagesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listImagesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Image[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Image objects
     * contained in responses from the listImages operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllImages(request) {
        return oci_common_1.paginateRecords(request, req => this.listImages(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listImages operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllImagesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listImages(req));
    }
    /**
       * Lists the console connections for the specified compartment or instance.
  * <p>
  For more information about instance console connections, see [Troubleshooting Instances Using Instance Console Connections](https://docs.cloud.oracle.com/iaas/Content/Compute/References/serialconsole.htm).
  *
       * @param ListInstanceConsoleConnectionsRequest
       * @return ListInstanceConsoleConnectionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstanceConsoleConnections.ts.html |here} to see how to use ListInstanceConsoleConnections API.
       */
    listInstanceConsoleConnections(listInstanceConsoleConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listInstanceConsoleConnections.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstanceConsoleConnectionsRequest.compartmentId,
                "instanceId": listInstanceConsoleConnectionsRequest.instanceId,
                "limit": listInstanceConsoleConnectionsRequest.limit,
                "page": listInstanceConsoleConnectionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleConnections",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceConsoleConnectionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceConsoleConnection[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceConsoleConnection objects
     * contained in responses from the listInstanceConsoleConnections operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceConsoleConnections(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceConsoleConnections(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceConsoleConnections operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceConsoleConnectionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceConsoleConnections(req));
    }
    /**
     * Gets a list of all the devices for given instance. You can optionally filter results by device availability.
     * @param ListInstanceDevicesRequest
     * @return ListInstanceDevicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstanceDevices.ts.html |here} to see how to use ListInstanceDevices API.
     */
    listInstanceDevices(listInstanceDevicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listInstanceDevices.");
            const pathParams = {
                "{instanceId}": listInstanceDevicesRequest.instanceId
            };
            const queryParams = {
                "isAvailable": listInstanceDevicesRequest.isAvailable,
                "name": listInstanceDevicesRequest.name,
                "limit": listInstanceDevicesRequest.limit,
                "page": listInstanceDevicesRequest.page,
                "sortBy": listInstanceDevicesRequest.sortBy,
                "sortOrder": listInstanceDevicesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listInstanceDevicesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}/devices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceDevicesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Device[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Device objects
     * contained in responses from the listInstanceDevices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceDevices(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceDevices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceDevices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceDevicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceDevices(req));
    }
    /**
     * Lists the instances in the specified compartment and the specified availability domain.
     * You can filter the results by specifying an instance name (the list will include all the identically-named
     * instances in the compartment).
     *
     * @param ListInstancesRequest
     * @return ListInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstances.ts.html |here} to see how to use ListInstances API.
     */
    listInstances(listInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listInstances.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listInstancesRequest.availabilityDomain,
                "capacityReservationId": listInstancesRequest.capacityReservationId,
                "compartmentId": listInstancesRequest.compartmentId,
                "displayName": listInstancesRequest.displayName,
                "limit": listInstancesRequest.limit,
                "page": listInstancesRequest.page,
                "sortBy": listInstancesRequest.sortBy,
                "sortOrder": listInstancesRequest.sortOrder,
                "lifecycleState": listInstancesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Instance[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Instance objects
     * contained in responses from the listInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstances(req));
    }
    /**
     * Lists the shapes that can be used to launch an instance within the specified compartment. You can
     * filter the list by compatibility with a specific image.
     *
     * @param ListShapesRequest
     * @return ListShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListShapes.ts.html |here} to see how to use ListShapes API.
     */
    listShapes(listShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listShapes.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listShapesRequest.availabilityDomain,
                "compartmentId": listShapesRequest.compartmentId,
                "limit": listShapesRequest.limit,
                "page": listShapesRequest.page,
                "imageId": listShapesRequest.imageId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/shapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Shape[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Shape objects
     * contained in responses from the listShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listShapes(req));
    }
    /**
     * Lists the VNIC attachments in the specified compartment. A VNIC attachment
     * resides in the same compartment as the attached instance. The list can be
     * filtered by instance, VNIC, or availability domain.
     *
     * @param ListVnicAttachmentsRequest
     * @return ListVnicAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVnicAttachments.ts.html |here} to see how to use ListVnicAttachments API.
     */
    listVnicAttachments(listVnicAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listVnicAttachments.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listVnicAttachmentsRequest.availabilityDomain,
                "compartmentId": listVnicAttachmentsRequest.compartmentId,
                "instanceId": listVnicAttachmentsRequest.instanceId,
                "limit": listVnicAttachmentsRequest.limit,
                "page": listVnicAttachmentsRequest.page,
                "vnicId": listVnicAttachmentsRequest.vnicId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnicAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVnicAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VnicAttachment[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VnicAttachment objects
     * contained in responses from the listVnicAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVnicAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.listVnicAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVnicAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVnicAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVnicAttachments(req));
    }
    /**
       * Lists the volume attachments in the specified compartment. You can filter the
  * list by specifying an instance OCID, volume OCID, or both.
  * <p>
  Currently, the only supported volume attachment type are {@link IScsiVolumeAttachment} and
  * {@link ParavirtualizedVolumeAttachment}.
  *
       * @param ListVolumeAttachmentsRequest
       * @return ListVolumeAttachmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVolumeAttachments.ts.html |here} to see how to use ListVolumeAttachments API.
       */
    listVolumeAttachments(listVolumeAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#listVolumeAttachments.");
            const pathParams = {};
            const queryParams = {
                "availabilityDomain": listVolumeAttachmentsRequest.availabilityDomain,
                "compartmentId": listVolumeAttachmentsRequest.compartmentId,
                "limit": listVolumeAttachmentsRequest.limit,
                "page": listVolumeAttachmentsRequest.page,
                "instanceId": listVolumeAttachmentsRequest.instanceId,
                "volumeId": listVolumeAttachmentsRequest.volumeId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/volumeAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVolumeAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VolumeAttachment[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VolumeAttachment objects
     * contained in responses from the listVolumeAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.listVolumeAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVolumeAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVolumeAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVolumeAttachments(req));
    }
    /**
     * Removes a shape from the compatible shapes list for the image.
     * @param RemoveImageShapeCompatibilityEntryRequest
     * @return RemoveImageShapeCompatibilityEntryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveImageShapeCompatibilityEntry.ts.html |here} to see how to use RemoveImageShapeCompatibilityEntry API.
     */
    removeImageShapeCompatibilityEntry(removeImageShapeCompatibilityEntryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#removeImageShapeCompatibilityEntry.");
            const pathParams = {
                "{imageId}": removeImageShapeCompatibilityEntryRequest.imageId,
                "{shapeName}": removeImageShapeCompatibilityEntryRequest.shapeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}/shapes/{shapeName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeImageShapeCompatibilityEntryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Terminates the specified instance. Any attached VNICs and volumes are automatically detached
  * when the instance terminates.
  * <p>
  To preserve the boot volume associated with the instance, specify `true` for `PreserveBootVolumeQueryParam`.
  * To delete the boot volume when the instance is deleted, specify `false` or do not specify a value for `PreserveBootVolumeQueryParam`.
  * <p>
  This is an asynchronous operation. The instance's `lifecycleState` will change to TERMINATING temporarily
  * until the instance is completely removed.
  *
       * @param TerminateInstanceRequest
       * @return TerminateInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/TerminateInstance.ts.html |here} to see how to use TerminateInstance API.
       */
    terminateInstance(terminateInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#terminateInstance.");
            const pathParams = {
                "{instanceId}": terminateInstanceRequest.instanceId
            };
            const queryParams = {
                "preserveBootVolume": terminateInstanceRequest.preserveBootVolume
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": terminateInstanceRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, terminateInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the display name, defined tag, and freeform tag fields for the specified compute capacity reservation.
  * Fields that are not provided in the request will not be updated. Avoid entering confidential information.
  * <p>
  The update also modifies the reservation configurations of the specified compute capacity reservation.
  *
       * @param UpdateComputeCapacityReservationRequest
       * @return UpdateComputeCapacityReservationResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateComputeCapacityReservation.ts.html |here} to see how to use UpdateComputeCapacityReservation API.
       */
    updateComputeCapacityReservation(updateComputeCapacityReservationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateComputeCapacityReservation.");
            const pathParams = {
                "{capacityReservationId}": updateComputeCapacityReservationRequest.capacityReservationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateComputeCapacityReservationRequest.ifMatch,
                "opc-request-id": updateComputeCapacityReservationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeCapacityReservations/{capacityReservationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateComputeCapacityReservationRequest.updateComputeCapacityReservationDetails, "UpdateComputeCapacityReservationDetails", models.UpdateComputeCapacityReservationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateComputeCapacityReservationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified Compute Image Capability Schema
     *
     * @param UpdateComputeImageCapabilitySchemaRequest
     * @return UpdateComputeImageCapabilitySchemaResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateComputeImageCapabilitySchema.ts.html |here} to see how to use UpdateComputeImageCapabilitySchema API.
     */
    updateComputeImageCapabilitySchema(updateComputeImageCapabilitySchemaRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateComputeImageCapabilitySchema.");
            const pathParams = {
                "{computeImageCapabilitySchemaId}": updateComputeImageCapabilitySchemaRequest.computeImageCapabilitySchemaId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateComputeImageCapabilitySchemaRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/computeImageCapabilitySchemas/{computeImageCapabilitySchemaId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateComputeImageCapabilitySchemaRequest.updateComputeImageCapabilitySchemaDetails, "UpdateComputeImageCapabilitySchemaDetails", models.UpdateComputeImageCapabilitySchemaDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateComputeImageCapabilitySchemaRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "computeImageCapabilitySchema",
                    bodyModel: "model.ComputeImageCapabilitySchema",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified console history metadata.
     * @param UpdateConsoleHistoryRequest
     * @return UpdateConsoleHistoryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateConsoleHistory.ts.html |here} to see how to use UpdateConsoleHistory API.
     */
    updateConsoleHistory(updateConsoleHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateConsoleHistory.");
            const pathParams = {
                "{instanceConsoleHistoryId}": updateConsoleHistoryRequest.instanceConsoleHistoryId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateConsoleHistoryRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleHistories/{instanceConsoleHistoryId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateConsoleHistoryRequest.updateConsoleHistoryDetails, "UpdateConsoleHistoryDetails", models.UpdateConsoleHistoryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateConsoleHistoryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "consoleHistory",
                    bodyModel: "model.ConsoleHistory",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the displayName, freeformTags, and definedTags attributes for the specified dedicated virtual machine host.
     * If an attribute value is not included, it will not be updated.
     *
     * @param UpdateDedicatedVmHostRequest
     * @return UpdateDedicatedVmHostResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDedicatedVmHost.ts.html |here} to see how to use UpdateDedicatedVmHost API.
     */
    updateDedicatedVmHost(updateDedicatedVmHostRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateDedicatedVmHost.");
            const pathParams = {
                "{dedicatedVmHostId}": updateDedicatedVmHostRequest.dedicatedVmHostId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDedicatedVmHostRequest.ifMatch,
                "opc-request-id": updateDedicatedVmHostRequest.opcRequestId,
                "opc-retry-token": updateDedicatedVmHostRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dedicatedVmHosts/{dedicatedVmHostId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDedicatedVmHostRequest.updateDedicatedVmHostDetails, "UpdateDedicatedVmHostDetails", models.UpdateDedicatedVmHostDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDedicatedVmHostRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dedicatedVmHost",
                    bodyModel: "model.DedicatedVmHost",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the display name of the image. Avoid entering confidential information.
     *
     * @param UpdateImageRequest
     * @return UpdateImageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateImage.ts.html |here} to see how to use UpdateImage API.
     */
    updateImage(updateImageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateImage.");
            const pathParams = {
                "{imageId}": updateImageRequest.imageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateImageRequest.opcRetryToken,
                "if-match": updateImageRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/images/{imageId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateImageRequest.updateImageDetails, "UpdateImageDetails", models.UpdateImageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateImageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "image",
                    bodyModel: "model.Image",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates certain fields on the specified instance. Fields that are not provided in the
  * request will not be updated. Avoid entering confidential information.
  * <p>
  Changes to metadata fields will be reflected in the instance metadata service (this may take
  * up to a minute).
  * <p>
  The OCID of the instance remains the same.
  *
       * @param UpdateInstanceRequest
       * @return UpdateInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateInstance.ts.html |here} to see how to use UpdateInstance API.
       */
    updateInstance(updateInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateInstance.");
            const pathParams = {
                "{instanceId}": updateInstanceRequest.instanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateInstanceRequest.opcRetryToken,
                "if-match": updateInstanceRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instances/{instanceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInstanceRequest.updateInstanceDetails, "UpdateInstanceDetails", models.UpdateInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instance",
                    bodyModel: "model.Instance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the defined tags and free-form tags for the specified instance console connection.
     * @param UpdateInstanceConsoleConnectionRequest
     * @return UpdateInstanceConsoleConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateInstanceConsoleConnection.ts.html |here} to see how to use UpdateInstanceConsoleConnection API.
     */
    updateInstanceConsoleConnection(updateInstanceConsoleConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeClient#updateInstanceConsoleConnection.");
            const pathParams = {
                "{instanceConsoleConnectionId}": updateInstanceConsoleConnectionRequest.instanceConsoleConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateInstanceConsoleConnectionRequest.opcRequestId,
                "if-match": updateInstanceConsoleConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConsoleConnections/{instanceConsoleConnectionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInstanceConsoleConnectionRequest.updateInstanceConsoleConnectionDetails, "UpdateInstanceConsoleConnectionDetails", models.UpdateInstanceConsoleConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateInstanceConsoleConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConsoleConnection",
                    bodyModel: "model.InstanceConsoleConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ComputeClient = ComputeClient;
ComputeClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
var ComputeManagementApiKeys;
(function (ComputeManagementApiKeys) {
})(ComputeManagementApiKeys = exports.ComputeManagementApiKeys || (exports.ComputeManagementApiKeys = {}));
class ComputeManagementClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20160918";
        if (this.logger)
            this.logger.info(`ComputeManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ComputeManagementClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ComputeManagementClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ComputeManagementWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient, config) {
        this._waiters = new computemanagement_waiter_1.ComputeManagementWaiter(this, workRequestClient, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Attaches an instance to an instance pool. For information about the prerequisites
     * that an instance must meet before you can attach it to a pool, see
     * [Attaching an Instance to an Instance Pool](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/updatinginstancepool.htm#attach-instance).
     *
     * @param AttachInstancePoolInstanceRequest
     * @return AttachInstancePoolInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachInstancePoolInstance.ts.html |here} to see how to use AttachInstancePoolInstance API.
     */
    attachInstancePoolInstance(attachInstancePoolInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#attachInstancePoolInstance.");
            const pathParams = {
                "{instancePoolId}": attachInstancePoolInstanceRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": attachInstancePoolInstanceRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/instances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachInstancePoolInstanceRequest.attachInstancePoolInstanceDetails, "AttachInstancePoolInstanceDetails", models.AttachInstancePoolInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachInstancePoolInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePoolInstance",
                    bodyModel: "model.InstancePoolInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attach a load balancer to the instance pool.
     *
     * @param AttachLoadBalancerRequest
     * @return AttachLoadBalancerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachLoadBalancer.ts.html |here} to see how to use AttachLoadBalancer API.
     */
    attachLoadBalancer(attachLoadBalancerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#attachLoadBalancer.");
            const pathParams = {
                "{instancePoolId}": attachLoadBalancerRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": attachLoadBalancerRequest.opcRetryToken,
                "if-match": attachLoadBalancerRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/attachLoadBalancer",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachLoadBalancerRequest.attachLoadBalancerDetails, "AttachLoadBalancerDetails", models.AttachLoadBalancerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachLoadBalancerRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a cluster network into a different compartment within the same tenancy. For
  * information about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When you move a cluster network to a different compartment, associated resources such as the instances
  * in the cluster network, boot volumes, and VNICs are not moved.
  *
       * @param ChangeClusterNetworkCompartmentRequest
       * @return ChangeClusterNetworkCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeClusterNetworkCompartment.ts.html |here} to see how to use ChangeClusterNetworkCompartment API.
       */
    changeClusterNetworkCompartment(changeClusterNetworkCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#changeClusterNetworkCompartment.");
            const pathParams = {
                "{clusterNetworkId}": changeClusterNetworkCompartmentRequest.clusterNetworkId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeClusterNetworkCompartmentRequest.ifMatch,
                "opc-request-id": changeClusterNetworkCompartmentRequest.opcRequestId,
                "opc-retry-token": changeClusterNetworkCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks/{clusterNetworkId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeClusterNetworkCompartmentRequest.changeClusterNetworkCompartmentDetails, "ChangeClusterNetworkCompartmentDetails", models.ChangeClusterNetworkCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeClusterNetworkCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves an instance configuration into a different compartment within the same tenancy.
  * For information about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When you move an instance configuration to a different compartment, associated resources such as
  * instance pools are not moved.
  * <p>
  **Important:** Most of the properties for an existing instance configuration, including the compartment,
  * cannot be modified after you create the instance configuration. Although you can move an instance configuration
  * to a different compartment, you will not be able to use the instance configuration to manage instance pools
  * in the new compartment. If you want to update an instance configuration to point to a different compartment,
  * you should instead create a new instance configuration in the target compartment using
  * [CreateInstanceConfiguration](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/InstanceConfiguration/CreateInstanceConfiguration).
  *
       * @param ChangeInstanceConfigurationCompartmentRequest
       * @return ChangeInstanceConfigurationCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeInstanceConfigurationCompartment.ts.html |here} to see how to use ChangeInstanceConfigurationCompartment API.
       */
    changeInstanceConfigurationCompartment(changeInstanceConfigurationCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#changeInstanceConfigurationCompartment.");
            const pathParams = {
                "{instanceConfigurationId}": changeInstanceConfigurationCompartmentRequest.instanceConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeInstanceConfigurationCompartmentRequest.ifMatch,
                "opc-request-id": changeInstanceConfigurationCompartmentRequest.opcRequestId,
                "opc-retry-token": changeInstanceConfigurationCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations/{instanceConfigurationId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeInstanceConfigurationCompartmentRequest.changeInstanceConfigurationCompartmentDetails, "ChangeInstanceConfigurationCompartmentDetails", models.ChangeInstanceConfigurationCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeInstanceConfigurationCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves an instance pool into a different compartment within the same tenancy. For
  * information about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When you move an instance pool to a different compartment, associated resources such as the instances in
  * the pool, boot volumes, VNICs, and autoscaling configurations are not moved.
  *
       * @param ChangeInstancePoolCompartmentRequest
       * @return ChangeInstancePoolCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeInstancePoolCompartment.ts.html |here} to see how to use ChangeInstancePoolCompartment API.
       */
    changeInstancePoolCompartment(changeInstancePoolCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#changeInstancePoolCompartment.");
            const pathParams = {
                "{instancePoolId}": changeInstancePoolCompartmentRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeInstancePoolCompartmentRequest.ifMatch,
                "opc-request-id": changeInstancePoolCompartmentRequest.opcRequestId,
                "opc-retry-token": changeInstancePoolCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeInstancePoolCompartmentRequest.changeInstancePoolCompartmentDetails, "ChangeInstancePoolCompartmentDetails", models.ChangeInstancePoolCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeInstancePoolCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a cluster network. For more information about cluster networks, see
     * [Managing Cluster Networks](https://docs.cloud.oracle.com/iaas/Content/Compute/Tasks/managingclusternetworks.htm).
     *
     * @param CreateClusterNetworkRequest
     * @return CreateClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateClusterNetwork.ts.html |here} to see how to use CreateClusterNetwork API.
     */
    createClusterNetwork(createClusterNetworkRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#createClusterNetwork.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createClusterNetworkRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createClusterNetworkRequest.createClusterNetworkDetails, "CreateClusterNetworkDetails", models.CreateClusterNetworkDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createClusterNetworkRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "clusterNetwork",
                    bodyModel: "model.ClusterNetwork",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an instance configuration. An instance configuration is a template that defines the
     * settings to use when creating Compute instances.
     *
     * @param CreateInstanceConfigurationRequest
     * @return CreateInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateInstanceConfiguration.ts.html |here} to see how to use CreateInstanceConfiguration API.
     */
    createInstanceConfiguration(createInstanceConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#createInstanceConfiguration.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createInstanceConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInstanceConfigurationRequest.createInstanceConfiguration, "CreateInstanceConfigurationBase", models.CreateInstanceConfigurationBase.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createInstanceConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConfiguration",
                    bodyModel: "model.InstanceConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create an instance pool.
     * @param CreateInstancePoolRequest
     * @return CreateInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateInstancePool.ts.html |here} to see how to use CreateInstancePool API.
     */
    createInstancePool(createInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#createInstancePool.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createInstancePoolRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInstancePoolRequest.createInstancePoolDetails, "CreateInstancePoolDetails", models.CreateInstancePoolDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an instance configuration.
     * @param DeleteInstanceConfigurationRequest
     * @return DeleteInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteInstanceConfiguration.ts.html |here} to see how to use DeleteInstanceConfiguration API.
     */
    deleteInstanceConfiguration(deleteInstanceConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#deleteInstanceConfiguration.");
            const pathParams = {
                "{instanceConfigurationId}": deleteInstanceConfigurationRequest.instanceConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteInstanceConfigurationRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations/{instanceConfigurationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteInstanceConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches an instance from an instance pool.
     *
     * @param DetachInstancePoolInstanceRequest
     * @return DetachInstancePoolInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachInstancePoolInstance.ts.html |here} to see how to use DetachInstancePoolInstance API.
     */
    detachInstancePoolInstance(detachInstancePoolInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#detachInstancePoolInstance.");
            const pathParams = {
                "{instancePoolId}": detachInstancePoolInstanceRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": detachInstancePoolInstanceRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/detachInstance",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachInstancePoolInstanceRequest.detachInstancePoolInstanceDetails, "DetachInstancePoolInstanceDetails", models.DetachInstancePoolInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachInstancePoolInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detach a load balancer from the instance pool.
     *
     * @param DetachLoadBalancerRequest
     * @return DetachLoadBalancerResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachLoadBalancer.ts.html |here} to see how to use DetachLoadBalancer API.
     */
    detachLoadBalancer(detachLoadBalancerRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#detachLoadBalancer.");
            const pathParams = {
                "{instancePoolId}": detachLoadBalancerRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": detachLoadBalancerRequest.opcRetryToken,
                "if-match": detachLoadBalancerRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/detachLoadBalancer",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachLoadBalancerRequest.detachLoadBalancerDetails, "DetachLoadBalancerDetails", models.DetachLoadBalancerDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachLoadBalancerRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified cluster network.
     * @param GetClusterNetworkRequest
     * @return GetClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetClusterNetwork.ts.html |here} to see how to use GetClusterNetwork API.
     */
    getClusterNetwork(getClusterNetworkRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#getClusterNetwork.");
            const pathParams = {
                "{clusterNetworkId}": getClusterNetworkRequest.clusterNetworkId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks/{clusterNetworkId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getClusterNetworkRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "clusterNetwork",
                    bodyModel: "model.ClusterNetwork",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified instance configuration
     * @param GetInstanceConfigurationRequest
     * @return GetInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstanceConfiguration.ts.html |here} to see how to use GetInstanceConfiguration API.
     */
    getInstanceConfiguration(getInstanceConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#getInstanceConfiguration.");
            const pathParams = {
                "{instanceConfigurationId}": getInstanceConfigurationRequest.instanceConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations/{instanceConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstanceConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConfiguration",
                    bodyModel: "model.InstanceConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified instance pool
     * @param GetInstancePoolRequest
     * @return GetInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstancePool.ts.html |here} to see how to use GetInstancePool API.
     */
    getInstancePool(getInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#getInstancePool.");
            const pathParams = {
                "{instancePoolId}": getInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about an instance that belongs to an instance pool.
     * @param GetInstancePoolInstanceRequest
     * @return GetInstancePoolInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstancePoolInstance.ts.html |here} to see how to use GetInstancePoolInstance API.
     */
    getInstancePoolInstance(getInstancePoolInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#getInstancePoolInstance.");
            const pathParams = {
                "{instancePoolId}": getInstancePoolInstanceRequest.instancePoolId,
                "{instanceId}": getInstancePoolInstanceRequest.instanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/instances/{instanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstancePoolInstanceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePoolInstance",
                    bodyModel: "model.InstancePoolInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about a load balancer that is attached to the specified instance pool.
     *
     * @param GetInstancePoolLoadBalancerAttachmentRequest
     * @return GetInstancePoolLoadBalancerAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInstancePoolLoadBalancerAttachment.ts.html |here} to see how to use GetInstancePoolLoadBalancerAttachment API.
     */
    getInstancePoolLoadBalancerAttachment(getInstancePoolLoadBalancerAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#getInstancePoolLoadBalancerAttachment.");
            const pathParams = {
                "{instancePoolId}": getInstancePoolLoadBalancerAttachmentRequest.instancePoolId,
                "{instancePoolLoadBalancerAttachmentId}": getInstancePoolLoadBalancerAttachmentRequest.instancePoolLoadBalancerAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/loadBalancerAttachments/{instancePoolLoadBalancerAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInstancePoolLoadBalancerAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePoolLoadBalancerAttachment",
                    bodyModel: "model.InstancePoolLoadBalancerAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Launches an instance from an instance configuration.
  * <p>
  If the instance configuration does not include all of the parameters that are
  * required to launch an instance, such as the availability domain and subnet ID, you must
  * provide these parameters when you launch an instance from the instance configuration.
  * For more information, see the {@link InstanceConfiguration}
  * resource.
  *
       * @param LaunchInstanceConfigurationRequest
       * @return LaunchInstanceConfigurationResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/LaunchInstanceConfiguration.ts.html |here} to see how to use LaunchInstanceConfiguration API.
       */
    launchInstanceConfiguration(launchInstanceConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#launchInstanceConfiguration.");
            const pathParams = {
                "{instanceConfigurationId}": launchInstanceConfigurationRequest.instanceConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": launchInstanceConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations/{instanceConfigurationId}/actions/launch",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(launchInstanceConfigurationRequest.instanceConfiguration, "InstanceConfigurationInstanceDetails", models.InstanceConfigurationInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, launchInstanceConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instance",
                    bodyModel: "model.Instance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the instances in the specified cluster network.
     * @param ListClusterNetworkInstancesRequest
     * @return ListClusterNetworkInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListClusterNetworkInstances.ts.html |here} to see how to use ListClusterNetworkInstances API.
     */
    listClusterNetworkInstances(listClusterNetworkInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworkInstances.");
            const pathParams = {
                "{clusterNetworkId}": listClusterNetworkInstancesRequest.clusterNetworkId
            };
            const queryParams = {
                "compartmentId": listClusterNetworkInstancesRequest.compartmentId,
                "displayName": listClusterNetworkInstancesRequest.displayName,
                "limit": listClusterNetworkInstancesRequest.limit,
                "page": listClusterNetworkInstancesRequest.page,
                "sortBy": listClusterNetworkInstancesRequest.sortBy,
                "sortOrder": listClusterNetworkInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks/{clusterNetworkId}/instances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listClusterNetworkInstancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceSummary objects
     * contained in responses from the listClusterNetworkInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllClusterNetworkInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listClusterNetworkInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listClusterNetworkInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllClusterNetworkInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listClusterNetworkInstances(req));
    }
    /**
     * Lists the cluster networks in the specified compartment.
     * @param ListClusterNetworksRequest
     * @return ListClusterNetworksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListClusterNetworks.ts.html |here} to see how to use ListClusterNetworks API.
     */
    listClusterNetworks(listClusterNetworksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#listClusterNetworks.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listClusterNetworksRequest.compartmentId,
                "displayName": listClusterNetworksRequest.displayName,
                "limit": listClusterNetworksRequest.limit,
                "page": listClusterNetworksRequest.page,
                "sortBy": listClusterNetworksRequest.sortBy,
                "sortOrder": listClusterNetworksRequest.sortOrder,
                "lifecycleState": listClusterNetworksRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listClusterNetworksRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ClusterNetworkSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ClusterNetworkSummary objects
     * contained in responses from the listClusterNetworks operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllClusterNetworks(request) {
        return oci_common_1.paginateRecords(request, req => this.listClusterNetworks(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listClusterNetworks operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllClusterNetworksResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listClusterNetworks(req));
    }
    /**
     * Lists the instance configurations in the specified compartment.
     *
     * @param ListInstanceConfigurationsRequest
     * @return ListInstanceConfigurationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstanceConfigurations.ts.html |here} to see how to use ListInstanceConfigurations API.
     */
    listInstanceConfigurations(listInstanceConfigurationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#listInstanceConfigurations.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstanceConfigurationsRequest.compartmentId,
                "limit": listInstanceConfigurationsRequest.limit,
                "page": listInstanceConfigurationsRequest.page,
                "sortBy": listInstanceConfigurationsRequest.sortBy,
                "sortOrder": listInstanceConfigurationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstanceConfigurationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceConfigurationSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceConfigurationSummary objects
     * contained in responses from the listInstanceConfigurations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceConfigurations(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstanceConfigurations(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstanceConfigurations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstanceConfigurationsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstanceConfigurations(req));
    }
    /**
     * List the instances in the specified instance pool.
     * @param ListInstancePoolInstancesRequest
     * @return ListInstancePoolInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstancePoolInstances.ts.html |here} to see how to use ListInstancePoolInstances API.
     */
    listInstancePoolInstances(listInstancePoolInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#listInstancePoolInstances.");
            const pathParams = {
                "{instancePoolId}": listInstancePoolInstancesRequest.instancePoolId
            };
            const queryParams = {
                "compartmentId": listInstancePoolInstancesRequest.compartmentId,
                "displayName": listInstancePoolInstancesRequest.displayName,
                "limit": listInstancePoolInstancesRequest.limit,
                "page": listInstancePoolInstancesRequest.page,
                "sortBy": listInstancePoolInstancesRequest.sortBy,
                "sortOrder": listInstancePoolInstancesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/instances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstancePoolInstancesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstanceSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstanceSummary objects
     * contained in responses from the listInstancePoolInstances operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstancePoolInstances(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstancePoolInstances(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstancePoolInstances operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstancePoolInstancesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstancePoolInstances(req));
    }
    /**
     * Lists the instance pools in the specified compartment.
     * @param ListInstancePoolsRequest
     * @return ListInstancePoolsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInstancePools.ts.html |here} to see how to use ListInstancePools API.
     */
    listInstancePools(listInstancePoolsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#listInstancePools.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInstancePoolsRequest.compartmentId,
                "displayName": listInstancePoolsRequest.displayName,
                "limit": listInstancePoolsRequest.limit,
                "page": listInstancePoolsRequest.page,
                "sortBy": listInstancePoolsRequest.sortBy,
                "sortOrder": listInstancePoolsRequest.sortOrder,
                "lifecycleState": listInstancePoolsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInstancePoolsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InstancePoolSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InstancePoolSummary objects
     * contained in responses from the listInstancePools operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstancePools(request) {
        return oci_common_1.paginateRecords(request, req => this.listInstancePools(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInstancePools operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInstancePoolsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInstancePools(req));
    }
    /**
     * Performs the reset (immediate power off and power on) action on the specified instance pool,
     * which performs the action on all the instances in the pool.
     *
     * @param ResetInstancePoolRequest
     * @return ResetInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ResetInstancePool.ts.html |here} to see how to use ResetInstancePool API.
     */
    resetInstancePool(resetInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#resetInstancePool.");
            const pathParams = {
                "{instancePoolId}": resetInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": resetInstancePoolRequest.opcRetryToken,
                "if-match": resetInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/reset",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, resetInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Performs the softreset (ACPI shutdown and power on) action on the specified instance pool,
  * which performs the action on all the instances in the pool.
  * <p>
  Softreset gracefully reboots the instances by sending a shutdown command to the operating systems.
  * After waiting 15 minutes for the OS to shut down, the instances are powered off and then powered back on.
  *
       * @param SoftresetInstancePoolRequest
       * @return SoftresetInstancePoolResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/SoftresetInstancePool.ts.html |here} to see how to use SoftresetInstancePool API.
       */
    softresetInstancePool(softresetInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#softresetInstancePool.");
            const pathParams = {
                "{instancePoolId}": softresetInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": softresetInstancePoolRequest.opcRetryToken,
                "if-match": softresetInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/softreset",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, softresetInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Performs the start (power on) action on the specified instance pool,
     * which performs the action on all the instances in the pool.
     *
     * @param StartInstancePoolRequest
     * @return StartInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/StartInstancePool.ts.html |here} to see how to use StartInstancePool API.
     */
    startInstancePool(startInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#startInstancePool.");
            const pathParams = {
                "{instancePoolId}": startInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": startInstancePoolRequest.opcRetryToken,
                "if-match": startInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/start",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, startInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Performs the stop (immediate power off) action on the specified instance pool,
     * which performs the action on all the instances in the pool.
     *
     * @param StopInstancePoolRequest
     * @return StopInstancePoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/StopInstancePool.ts.html |here} to see how to use StopInstancePool API.
     */
    stopInstancePool(stopInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#stopInstancePool.");
            const pathParams = {
                "{instancePoolId}": stopInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": stopInstancePoolRequest.opcRetryToken,
                "if-match": stopInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}/actions/stop",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, stopInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Terminates the specified cluster network.
  * <p>
  When you delete a cluster network, all of its resources are permanently deleted,
  * including associated instances and instance pools.
  *
       * @param TerminateClusterNetworkRequest
       * @return TerminateClusterNetworkResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/TerminateClusterNetwork.ts.html |here} to see how to use TerminateClusterNetwork API.
       */
    terminateClusterNetwork(terminateClusterNetworkRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#terminateClusterNetwork.");
            const pathParams = {
                "{clusterNetworkId}": terminateClusterNetworkRequest.clusterNetworkId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": terminateClusterNetworkRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks/{clusterNetworkId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, terminateClusterNetworkRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Terminate the specified instance pool.
  * <p>
  **Warning:** When you delete an instance pool, the resources that were created by the pool are permanently
  * deleted, including associated instances, attached boot volumes, and block volumes.
  * <p>
  If an autoscaling configuration applies to the instance pool, the autoscaling configuration will be deleted
  * asynchronously after the pool is deleted. You can also manually delete the autoscaling configuration using
  * the `DeleteAutoScalingConfiguration` operation in the Autoscaling API.
  *
       * @param TerminateInstancePoolRequest
       * @return TerminateInstancePoolResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/TerminateInstancePool.ts.html |here} to see how to use TerminateInstancePool API.
       */
    terminateInstancePool(terminateInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#terminateInstancePool.");
            const pathParams = {
                "{instancePoolId}": terminateInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": terminateInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, terminateInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified cluster network. The OCID of the cluster network remains the same.
     *
     * @param UpdateClusterNetworkRequest
     * @return UpdateClusterNetworkResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateClusterNetwork.ts.html |here} to see how to use UpdateClusterNetwork API.
     */
    updateClusterNetwork(updateClusterNetworkRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#updateClusterNetwork.");
            const pathParams = {
                "{clusterNetworkId}": updateClusterNetworkRequest.clusterNetworkId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateClusterNetworkRequest.opcRetryToken,
                "if-match": updateClusterNetworkRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/clusterNetworks/{clusterNetworkId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateClusterNetworkRequest.updateClusterNetworkDetails, "UpdateClusterNetworkDetails", models.UpdateClusterNetworkDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateClusterNetworkRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "clusterNetwork",
                    bodyModel: "model.ClusterNetwork",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the free-form tags, defined tags, and display name of an instance configuration.
     * @param UpdateInstanceConfigurationRequest
     * @return UpdateInstanceConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateInstanceConfiguration.ts.html |here} to see how to use UpdateInstanceConfiguration API.
     */
    updateInstanceConfiguration(updateInstanceConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#updateInstanceConfiguration.");
            const pathParams = {
                "{instanceConfigurationId}": updateInstanceConfigurationRequest.instanceConfigurationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateInstanceConfigurationRequest.opcRetryToken,
                "if-match": updateInstanceConfigurationRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instanceConfigurations/{instanceConfigurationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInstanceConfigurationRequest.updateInstanceConfigurationDetails, "UpdateInstanceConfigurationDetails", models.UpdateInstanceConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateInstanceConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instanceConfiguration",
                    bodyModel: "model.InstanceConfiguration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Update the specified instance pool.
  * <p>
  The OCID of the instance pool remains the same.
  *
       * @param UpdateInstancePoolRequest
       * @return UpdateInstancePoolResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateInstancePool.ts.html |here} to see how to use UpdateInstancePool API.
       */
    updateInstancePool(updateInstancePoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ComputeManagementClient#updateInstancePool.");
            const pathParams = {
                "{instancePoolId}": updateInstancePoolRequest.instancePoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateInstancePoolRequest.opcRetryToken,
                "if-match": updateInstancePoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/instancePools/{instancePoolId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInstancePoolRequest.updateInstancePoolDetails, "UpdateInstancePoolDetails", models.UpdateInstancePoolDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateInstancePoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "instancePool",
                    bodyModel: "model.InstancePool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ComputeManagementClient = ComputeManagementClient;
ComputeManagementClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
var VirtualNetworkApiKeys;
(function (VirtualNetworkApiKeys) {
})(VirtualNetworkApiKeys = exports.VirtualNetworkApiKeys || (exports.VirtualNetworkApiKeys = {}));
class VirtualNetworkClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20160918";
        if (this.logger)
            this.logger.info(`VirtualNetworkClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(VirtualNetworkClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(VirtualNetworkClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new VirtualNetworkWaiter for resources for this service.
     *
     * @param workRequestClient The work request service client used to query for work request status
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(workRequestClient, config) {
        this._waiters = new virtualnetwork_waiter_1.VirtualNetworkWaiter(this, workRequestClient, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Adds one or more route distribution statements to the specified route distribution.
     *
     * @param AddDrgRouteDistributionStatementsRequest
     * @return AddDrgRouteDistributionStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddDrgRouteDistributionStatements.ts.html |here} to see how to use AddDrgRouteDistributionStatements API.
     */
    addDrgRouteDistributionStatements(addDrgRouteDistributionStatementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addDrgRouteDistributionStatements.");
            const pathParams = {
                "{drgRouteDistributionId}": addDrgRouteDistributionStatementsRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}/actions/addDrgRouteDistributionStatements",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDrgRouteDistributionStatementsRequest.addDrgRouteDistributionStatementsDetails, "AddDrgRouteDistributionStatementsDetails", models.AddDrgRouteDistributionStatementsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addDrgRouteDistributionStatementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteDistributionStatement[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds one or more static route rules to the specified DRG route table.
     *
     * @param AddDrgRouteRulesRequest
     * @return AddDrgRouteRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddDrgRouteRules.ts.html |here} to see how to use AddDrgRouteRules API.
     */
    addDrgRouteRules(addDrgRouteRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addDrgRouteRules.");
            const pathParams = {
                "{drgRouteTableId}": addDrgRouteRulesRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addDrgRouteRulesRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}/actions/addDrgRouteRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addDrgRouteRulesRequest.addDrgRouteRulesDetails, "AddDrgRouteRulesDetails", models.AddDrgRouteRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addDrgRouteRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteRule[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add an IPv6 CIDR to a VCN. The VCN size is always /56 and assigned by Oracle.
     * Once added the IPv6 CIDR block cannot be removed or modified.
     *
     * @param AddIpv6VcnCidrRequest
     * @return AddIpv6VcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddIpv6VcnCidr.ts.html |here} to see how to use AddIpv6VcnCidr API.
     */
    addIpv6VcnCidr(addIpv6VcnCidrRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addIpv6VcnCidr.");
            const pathParams = {
                "{vcnId}": addIpv6VcnCidrRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addIpv6VcnCidrRequest.opcRequestId,
                "opc-retry-token": addIpv6VcnCidrRequest.opcRetryToken,
                "if-match": addIpv6VcnCidrRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/actions/addIpv6Cidr",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addIpv6VcnCidrRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds one or more security rules to the specified network security group.
     *
     * @param AddNetworkSecurityGroupSecurityRulesRequest
     * @return AddNetworkSecurityGroupSecurityRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use AddNetworkSecurityGroupSecurityRules API.
     */
    addNetworkSecurityGroupSecurityRules(addNetworkSecurityGroupSecurityRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addNetworkSecurityGroupSecurityRules.");
            const pathParams = {
                "{networkSecurityGroupId}": addNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/addSecurityRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addNetworkSecurityGroupSecurityRulesRequest.addNetworkSecurityGroupSecurityRulesDetails, "AddNetworkSecurityGroupSecurityRulesDetails", models.AddNetworkSecurityGroupSecurityRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addNetworkSecurityGroupSecurityRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "addedNetworkSecurityGroupSecurityRules",
                    bodyModel: "model.AddedNetworkSecurityGroupSecurityRules",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Adds some or all of a CIDR block to a public IP pool.
  * <p>
  The CIDR block (or subrange) must not overlap with any other CIDR block already added to this or any other public IP pool.
  *
       * @param AddPublicIpPoolCapacityRequest
       * @return AddPublicIpPoolCapacityResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddPublicIpPoolCapacity.ts.html |here} to see how to use AddPublicIpPoolCapacity API.
       */
    addPublicIpPoolCapacity(addPublicIpPoolCapacityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addPublicIpPoolCapacity.");
            const pathParams = {
                "{publicIpPoolId}": addPublicIpPoolCapacityRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addPublicIpPoolCapacityRequest.opcRequestId,
                "opc-retry-token": addPublicIpPoolCapacityRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}/actions/addCapacity",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addPublicIpPoolCapacityRequest.addPublicIpPoolCapacityDetails, "AddPublicIpPoolCapacityDetails", models.AddPublicIpPoolCapacityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addPublicIpPoolCapacityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPool",
                    bodyModel: "model.PublicIpPool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Adds a CIDR block to a VCN. The CIDR block you add:
  * <p>
  - Must be valid.
  * - Must not overlap with another CIDR block in the VCN, a CIDR block of a peered VCN, or the on-premises network CIDR block.
  * - Must not exceed the limit of CIDR blocks allowed per VCN.
  * <p>
  **Note:** Adding a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can take a few minutes. You can use the `GetWorkRequest` operation to check the status of the update.
  *
       * @param AddVcnCidrRequest
       * @return AddVcnCidrResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AddVcnCidr.ts.html |here} to see how to use AddVcnCidr API.
       */
    addVcnCidr(addVcnCidrRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#addVcnCidr.");
            const pathParams = {
                "{vcnId}": addVcnCidrRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addVcnCidrRequest.opcRequestId,
                "opc-retry-token": addVcnCidrRequest.opcRetryToken,
                "if-match": addVcnCidrRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/actions/addCidr",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addVcnCidrRequest.addVcnCidrDetails, "AddVcnCidrDetails", models.AddVcnCidrDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addVcnCidrRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Begins BGP route advertisements for the BYOIP CIDR block you imported to the Oracle Cloud.
     * The `ByoipRange` resource must be in the PROVISIONED state before the BYOIP CIDR block routes can be advertised with BGP.
     *
     * @param AdvertiseByoipRangeRequest
     * @return AdvertiseByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AdvertiseByoipRange.ts.html |here} to see how to use AdvertiseByoipRange API.
     */
    advertiseByoipRange(advertiseByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#advertiseByoipRange.");
            const pathParams = {
                "{byoipRangeId}": advertiseByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": advertiseByoipRangeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}/actions/advertise",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, advertiseByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds the specified {@link Service} to the list of enabled
     * `Service` objects for the specified gateway. You must also set up a route rule with the
     * `cidrBlock` of the `Service` as the rule's destination and the service gateway as the rule's
     * target. See {@link RouteTable}.
     * <p>
     **Note:** The `AttachServiceId` operation is an easy way to add an individual `Service` to
     * the service gateway. Compare it with
     * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
     * the entire existing list of enabled `Service` objects with the list that you provide in the
     * `Update` call.
     *
     * @param AttachServiceIdRequest
     * @return AttachServiceIdResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/AttachServiceId.ts.html |here} to see how to use AttachServiceId API.
     */
    attachServiceId(attachServiceIdRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#attachServiceId.");
            const pathParams = {
                "{serviceGatewayId}": attachServiceIdRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": attachServiceIdRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}/actions/attachService",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachServiceIdRequest.attachServiceDetails, "ServiceIdRequestDetails", models.ServiceIdRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, attachServiceIdRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "serviceGateway",
                    bodyModel: "model.ServiceGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Adds one or more customer public IP prefixes to the specified public virtual circuit.
     * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
     * to add prefixes to the virtual circuit. Oracle must verify the customer's ownership
     * of each prefix before traffic for that prefix will flow across the virtual circuit.
     *
     * @param BulkAddVirtualCircuitPublicPrefixesRequest
     * @return BulkAddVirtualCircuitPublicPrefixesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/BulkAddVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkAddVirtualCircuitPublicPrefixes API.
     */
    bulkAddVirtualCircuitPublicPrefixes(bulkAddVirtualCircuitPublicPrefixesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#bulkAddVirtualCircuitPublicPrefixes.");
            const pathParams = {
                "{virtualCircuitId}": bulkAddVirtualCircuitPublicPrefixesRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkAddVirtualCircuitPublicPrefixesRequest.bulkAddVirtualCircuitPublicPrefixesDetails, "BulkAddVirtualCircuitPublicPrefixesDetails", models.BulkAddVirtualCircuitPublicPrefixesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, bulkAddVirtualCircuitPublicPrefixesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: []
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes one or more customer public IP prefixes from the specified public virtual circuit.
     * Use this operation (and not {@link #updateVirtualCircuit(UpdateVirtualCircuitRequest) updateVirtualCircuit})
     * to remove prefixes from the virtual circuit. When the virtual circuit's state switches
     * back to PROVISIONED, Oracle stops advertising the specified prefixes across the connection.
     *
     * @param BulkDeleteVirtualCircuitPublicPrefixesRequest
     * @return BulkDeleteVirtualCircuitPublicPrefixesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/BulkDeleteVirtualCircuitPublicPrefixes.ts.html |here} to see how to use BulkDeleteVirtualCircuitPublicPrefixes API.
     */
    bulkDeleteVirtualCircuitPublicPrefixes(bulkDeleteVirtualCircuitPublicPrefixesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#bulkDeleteVirtualCircuitPublicPrefixes.");
            const pathParams = {
                "{virtualCircuitId}": bulkDeleteVirtualCircuitPublicPrefixesRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(bulkDeleteVirtualCircuitPublicPrefixesRequest.bulkDeleteVirtualCircuitPublicPrefixesDetails, "BulkDeleteVirtualCircuitPublicPrefixesDetails", models.BulkDeleteVirtualCircuitPublicPrefixesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, bulkDeleteVirtualCircuitPublicPrefixesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: []
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a BYOIP CIDR block to a different compartment. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeByoipRangeCompartmentRequest
     * @return ChangeByoipRangeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeByoipRangeCompartment.ts.html |here} to see how to use ChangeByoipRangeCompartment API.
     */
    changeByoipRangeCompartment(changeByoipRangeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeByoipRangeCompartment.");
            const pathParams = {
                "{byoipRangeId}": changeByoipRangeCompartmentRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeByoipRangeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeByoipRangeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeByoipRangeCompartmentRequest.changeByoipRangeCompartmentDetails, "ChangeByoipRangeCompartmentDetails", models.ChangeByoipRangeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeByoipRangeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a CPE object into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeCpeCompartmentRequest
     * @return ChangeCpeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeCpeCompartment.ts.html |here} to see how to use ChangeCpeCompartment API.
     */
    changeCpeCompartment(changeCpeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeCpeCompartment.");
            const pathParams = {
                "{cpeId}": changeCpeCompartmentRequest.cpeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeCpeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCpeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes/{cpeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCpeCompartmentRequest.changeCpeCompartmentDetails, "ChangeCpeCompartmentDetails", models.ChangeCpeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeCpeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a cross-connect into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeCrossConnectCompartmentRequest
     * @return ChangeCrossConnectCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeCrossConnectCompartment.ts.html |here} to see how to use ChangeCrossConnectCompartment API.
     */
    changeCrossConnectCompartment(changeCrossConnectCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeCrossConnectCompartment.");
            const pathParams = {
                "{crossConnectId}": changeCrossConnectCompartmentRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeCrossConnectCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCrossConnectCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCrossConnectCompartmentRequest.changeCrossConnectCompartmentDetails, "ChangeCrossConnectCompartmentDetails", models.ChangeCrossConnectCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeCrossConnectCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a cross-connect group into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeCrossConnectGroupCompartmentRequest
     * @return ChangeCrossConnectGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeCrossConnectGroupCompartment.ts.html |here} to see how to use ChangeCrossConnectGroupCompartment API.
     */
    changeCrossConnectGroupCompartment(changeCrossConnectGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeCrossConnectGroupCompartment.");
            const pathParams = {
                "{crossConnectGroupId}": changeCrossConnectGroupCompartmentRequest.crossConnectGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeCrossConnectGroupCompartmentRequest.opcRequestId,
                "opc-retry-token": changeCrossConnectGroupCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups/{crossConnectGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeCrossConnectGroupCompartmentRequest.changeCrossConnectGroupCompartmentDetails, "ChangeCrossConnectGroupCompartmentDetails", models.ChangeCrossConnectGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeCrossConnectGroupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a set of DHCP options into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeDhcpOptionsCompartmentRequest
     * @return ChangeDhcpOptionsCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeDhcpOptionsCompartment.ts.html |here} to see how to use ChangeDhcpOptionsCompartment API.
     */
    changeDhcpOptionsCompartment(changeDhcpOptionsCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeDhcpOptionsCompartment.");
            const pathParams = {
                "{dhcpId}": changeDhcpOptionsCompartmentRequest.dhcpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDhcpOptionsCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDhcpOptionsCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps/{dhcpId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDhcpOptionsCompartmentRequest.changeDhcpOptionsCompartmentDetails, "ChangeDhcpOptionsCompartmentDetails", models.ChangeDhcpOptionsCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDhcpOptionsCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a DRG into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeDrgCompartmentRequest
     * @return ChangeDrgCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeDrgCompartment.ts.html |here} to see how to use ChangeDrgCompartment API.
     */
    changeDrgCompartment(changeDrgCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeDrgCompartment.");
            const pathParams = {
                "{drgId}": changeDrgCompartmentRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDrgCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDrgCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDrgCompartmentRequest.changeDrgCompartmentDetails, "ChangeDrgCompartmentDetails", models.ChangeDrgCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDrgCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an IPSec connection into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeIPSecConnectionCompartmentRequest
     * @return ChangeIPSecConnectionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeIPSecConnectionCompartment.ts.html |here} to see how to use ChangeIPSecConnectionCompartment API.
     */
    changeIPSecConnectionCompartment(changeIPSecConnectionCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeIPSecConnectionCompartment.");
            const pathParams = {
                "{ipscId}": changeIPSecConnectionCompartmentRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeIPSecConnectionCompartmentRequest.opcRequestId,
                "opc-retry-token": changeIPSecConnectionCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeIPSecConnectionCompartmentRequest.changeIPSecConnectionCompartmentDetails, "ChangeIPSecConnectionCompartmentDetails", models.ChangeIPSecConnectionCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeIPSecConnectionCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves an internet gateway into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeInternetGatewayCompartmentRequest
     * @return ChangeInternetGatewayCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeInternetGatewayCompartment.ts.html |here} to see how to use ChangeInternetGatewayCompartment API.
     */
    changeInternetGatewayCompartment(changeInternetGatewayCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeInternetGatewayCompartment.");
            const pathParams = {
                "{igId}": changeInternetGatewayCompartmentRequest.igId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeInternetGatewayCompartmentRequest.opcRequestId,
                "opc-retry-token": changeInternetGatewayCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways/{igId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeInternetGatewayCompartmentRequest.changeInternetGatewayCompartmentDetails, "ChangeInternetGatewayCompartmentDetails", models.ChangeInternetGatewayCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeInternetGatewayCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a local peering gateway into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeLocalPeeringGatewayCompartmentRequest
     * @return ChangeLocalPeeringGatewayCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeLocalPeeringGatewayCompartment.ts.html |here} to see how to use ChangeLocalPeeringGatewayCompartment API.
     */
    changeLocalPeeringGatewayCompartment(changeLocalPeeringGatewayCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeLocalPeeringGatewayCompartment.");
            const pathParams = {
                "{localPeeringGatewayId}": changeLocalPeeringGatewayCompartmentRequest.localPeeringGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeLocalPeeringGatewayCompartmentRequest.opcRequestId,
                "opc-retry-token": changeLocalPeeringGatewayCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways/{localPeeringGatewayId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLocalPeeringGatewayCompartmentRequest.changeLocalPeeringGatewayCompartmentDetails, "ChangeLocalPeeringGatewayCompartmentDetails", models.ChangeLocalPeeringGatewayCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeLocalPeeringGatewayCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a NAT gateway into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeNatGatewayCompartmentRequest
     * @return ChangeNatGatewayCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeNatGatewayCompartment.ts.html |here} to see how to use ChangeNatGatewayCompartment API.
     */
    changeNatGatewayCompartment(changeNatGatewayCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeNatGatewayCompartment.");
            const pathParams = {
                "{natGatewayId}": changeNatGatewayCompartmentRequest.natGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeNatGatewayCompartmentRequest.opcRequestId,
                "opc-retry-token": changeNatGatewayCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways/{natGatewayId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeNatGatewayCompartmentRequest.changeNatGatewayCompartmentDetails, "ChangeNatGatewayCompartmentDetails", models.ChangeNatGatewayCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeNatGatewayCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a network security group into a different compartment within the same tenancy. For
     * information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeNetworkSecurityGroupCompartmentRequest
     * @return ChangeNetworkSecurityGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeNetworkSecurityGroupCompartment.ts.html |here} to see how to use ChangeNetworkSecurityGroupCompartment API.
     */
    changeNetworkSecurityGroupCompartment(changeNetworkSecurityGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeNetworkSecurityGroupCompartment.");
            const pathParams = {
                "{networkSecurityGroupId}": changeNetworkSecurityGroupCompartmentRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeNetworkSecurityGroupCompartmentRequest.opcRequestId,
                "opc-retry-token": changeNetworkSecurityGroupCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeNetworkSecurityGroupCompartmentRequest.changeNetworkSecurityGroupCompartmentDetails, "ChangeNetworkSecurityGroupCompartmentDetails", models.ChangeNetworkSecurityGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeNetworkSecurityGroupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Moves a public IP into a different compartment within the same tenancy. For information
  * about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  This operation applies only to reserved public IPs. Ephemeral public IPs always belong to the
  * same compartment as their VNIC and move accordingly.
  *
       * @param ChangePublicIpCompartmentRequest
       * @return ChangePublicIpCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangePublicIpCompartment.ts.html |here} to see how to use ChangePublicIpCompartment API.
       */
    changePublicIpCompartment(changePublicIpCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpCompartment.");
            const pathParams = {
                "{publicIpId}": changePublicIpCompartmentRequest.publicIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changePublicIpCompartmentRequest.opcRequestId,
                "opc-retry-token": changePublicIpCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/{publicIpId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePublicIpCompartmentRequest.changePublicIpCompartmentDetails, "ChangePublicIpCompartmentDetails", models.ChangePublicIpCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changePublicIpCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a public IP pool to a different compartment. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangePublicIpPoolCompartmentRequest
     * @return ChangePublicIpPoolCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangePublicIpPoolCompartment.ts.html |here} to see how to use ChangePublicIpPoolCompartment API.
     */
    changePublicIpPoolCompartment(changePublicIpPoolCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changePublicIpPoolCompartment.");
            const pathParams = {
                "{publicIpPoolId}": changePublicIpPoolCompartmentRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changePublicIpPoolCompartmentRequest.opcRequestId,
                "opc-retry-token": changePublicIpPoolCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePublicIpPoolCompartmentRequest.changePublicIpPoolCompartmentDetails, "ChangePublicIpPoolCompartmentDetails", models.ChangePublicIpPoolCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changePublicIpPoolCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a remote peering connection (RPC) into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeRemotePeeringConnectionCompartmentRequest
     * @return ChangeRemotePeeringConnectionCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeRemotePeeringConnectionCompartment.ts.html |here} to see how to use ChangeRemotePeeringConnectionCompartment API.
     */
    changeRemotePeeringConnectionCompartment(changeRemotePeeringConnectionCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeRemotePeeringConnectionCompartment.");
            const pathParams = {
                "{remotePeeringConnectionId}": changeRemotePeeringConnectionCompartmentRequest.remotePeeringConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeRemotePeeringConnectionCompartmentRequest.opcRequestId,
                "opc-retry-token": changeRemotePeeringConnectionCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRemotePeeringConnectionCompartmentRequest.changeRemotePeeringConnectionCompartmentDetails, "ChangeRemotePeeringConnectionCompartmentDetails", models.ChangeRemotePeeringConnectionCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeRemotePeeringConnectionCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a route table into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeRouteTableCompartmentRequest
     * @return ChangeRouteTableCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeRouteTableCompartment.ts.html |here} to see how to use ChangeRouteTableCompartment API.
     */
    changeRouteTableCompartment(changeRouteTableCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeRouteTableCompartment.");
            const pathParams = {
                "{rtId}": changeRouteTableCompartmentRequest.rtId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeRouteTableCompartmentRequest.opcRequestId,
                "opc-retry-token": changeRouteTableCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables/{rtId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeRouteTableCompartmentRequest.changeRouteTableCompartmentDetails, "ChangeRouteTableCompartmentDetails", models.ChangeRouteTableCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeRouteTableCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a security list into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeSecurityListCompartmentRequest
     * @return ChangeSecurityListCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeSecurityListCompartment.ts.html |here} to see how to use ChangeSecurityListCompartment API.
     */
    changeSecurityListCompartment(changeSecurityListCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeSecurityListCompartment.");
            const pathParams = {
                "{securityListId}": changeSecurityListCompartmentRequest.securityListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeSecurityListCompartmentRequest.opcRequestId,
                "opc-retry-token": changeSecurityListCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists/{securityListId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSecurityListCompartmentRequest.changeSecurityListCompartmentDetails, "ChangeSecurityListCompartmentDetails", models.ChangeSecurityListCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeSecurityListCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a service gateway into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeServiceGatewayCompartmentRequest
     * @return ChangeServiceGatewayCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeServiceGatewayCompartment.ts.html |here} to see how to use ChangeServiceGatewayCompartment API.
     */
    changeServiceGatewayCompartment(changeServiceGatewayCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeServiceGatewayCompartment.");
            const pathParams = {
                "{serviceGatewayId}": changeServiceGatewayCompartmentRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeServiceGatewayCompartmentRequest.opcRequestId,
                "opc-retry-token": changeServiceGatewayCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeServiceGatewayCompartmentRequest.changeServiceGatewayCompartmentDetails, "ChangeServiceGatewayCompartmentDetails", models.ChangeServiceGatewayCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeServiceGatewayCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a subnet into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeSubnetCompartmentRequest
     * @return ChangeSubnetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeSubnetCompartment.ts.html |here} to see how to use ChangeSubnetCompartment API.
     */
    changeSubnetCompartment(changeSubnetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeSubnetCompartment.");
            const pathParams = {
                "{subnetId}": changeSubnetCompartmentRequest.subnetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeSubnetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeSubnetCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets/{subnetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeSubnetCompartmentRequest.changeSubnetCompartmentDetails, "ChangeSubnetCompartmentDetails", models.ChangeSubnetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeSubnetCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a VCN into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVcnCompartmentRequest
     * @return ChangeVcnCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVcnCompartment.ts.html |here} to see how to use ChangeVcnCompartment API.
     */
    changeVcnCompartment(changeVcnCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeVcnCompartment.");
            const pathParams = {
                "{vcnId}": changeVcnCompartmentRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVcnCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVcnCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVcnCompartmentRequest.changeVcnCompartmentDetails, "ChangeVcnCompartmentDetails", models.ChangeVcnCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVcnCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a virtual circuit into a different compartment within the same tenancy. For information
     * about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVirtualCircuitCompartmentRequest
     * @return ChangeVirtualCircuitCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVirtualCircuitCompartment.ts.html |here} to see how to use ChangeVirtualCircuitCompartment API.
     */
    changeVirtualCircuitCompartment(changeVirtualCircuitCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeVirtualCircuitCompartment.");
            const pathParams = {
                "{virtualCircuitId}": changeVirtualCircuitCompartmentRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeVirtualCircuitCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVirtualCircuitCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVirtualCircuitCompartmentRequest.changeVirtualCircuitCompartmentDetails, "ChangeVirtualCircuitCompartmentDetails", models.ChangeVirtualCircuitCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVirtualCircuitCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a VLAN into a different compartment within the same tenancy.
     * For information about moving resources between compartments, see
     * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
     *
     * @param ChangeVlanCompartmentRequest
     * @return ChangeVlanCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ChangeVlanCompartment.ts.html |here} to see how to use ChangeVlanCompartment API.
     */
    changeVlanCompartment(changeVlanCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#changeVlanCompartment.");
            const pathParams = {
                "{vlanId}": changeVlanCompartmentRequest.vlanId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeVlanCompartmentRequest.ifMatch,
                "opc-request-id": changeVlanCompartmentRequest.opcRequestId,
                "opc-retry-token": changeVlanCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans/{vlanId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeVlanCompartmentRequest.changeVlanCompartmentDetails, "ChangeVlanCompartmentDetails", models.ChangeVlanCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeVlanCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Connects this local peering gateway (LPG) to another one in the same region.
  * <p>
  This operation must be called by the VCN administrator who is designated as
  * the *requestor* in the peering relationship. The *acceptor* must implement
  * an Identity and Access Management (IAM) policy that gives the requestor permission
  * to connect to LPGs in the acceptor's compartment. Without that permission, this
  * operation will fail. For more information, see
  * [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
  *
       * @param ConnectLocalPeeringGatewaysRequest
       * @return ConnectLocalPeeringGatewaysResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ConnectLocalPeeringGateways.ts.html |here} to see how to use ConnectLocalPeeringGateways API.
       */
    connectLocalPeeringGateways(connectLocalPeeringGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#connectLocalPeeringGateways.");
            const pathParams = {
                "{localPeeringGatewayId}": connectLocalPeeringGatewaysRequest.localPeeringGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways/{localPeeringGatewayId}/actions/connect",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(connectLocalPeeringGatewaysRequest.connectLocalPeeringGatewaysDetails, "ConnectLocalPeeringGatewaysDetails", models.ConnectLocalPeeringGatewaysDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, connectLocalPeeringGatewaysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Connects this RPC to another one in a different region.
  * <p>
  This operation must be called by the VCN administrator who is designated as
  * the *requestor* in the peering relationship. The *acceptor* must implement
  * an Identity and Access Management (IAM) policy that gives the requestor permission
  * to connect to RPCs in the acceptor's compartment. Without that permission, this
  * operation will fail. For more information, see
  * [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
  *
       * @param ConnectRemotePeeringConnectionsRequest
       * @return ConnectRemotePeeringConnectionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ConnectRemotePeeringConnections.ts.html |here} to see how to use ConnectRemotePeeringConnections API.
       */
    connectRemotePeeringConnections(connectRemotePeeringConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#connectRemotePeeringConnections.");
            const pathParams = {
                "{remotePeeringConnectionId}": connectRemotePeeringConnectionsRequest.remotePeeringConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections/{remotePeeringConnectionId}/actions/connect",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(connectRemotePeeringConnectionsRequest.connectRemotePeeringConnectionsDetails, "ConnectRemotePeeringConnectionsDetails", models.ConnectRemotePeeringConnectionsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, connectRemotePeeringConnectionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a subrange of the BYOIP CIDR block.
     *
     * @param CreateByoipRangeRequest
     * @return CreateByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateByoipRange.ts.html |here} to see how to use CreateByoipRange API.
     */
    createByoipRange(createByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createByoipRange.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createByoipRangeRequest.opcRequestId,
                "opc-retry-token": createByoipRangeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createByoipRangeRequest.createByoipRangeDetails, "CreateByoipRangeDetails", models.CreateByoipRangeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "byoipRange",
                    bodyModel: "model.ByoipRange",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new virtual customer-premises equipment (CPE) object in the specified compartment. For
  * more information, see [IPSec VPNs](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIPsec.htm).
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where you want
  * the CPE to reside. Notice that the CPE doesn't have to be in the same compartment as the IPSec
  * connection or other Networking Service components. If you're not sure which compartment to
  * use, put the CPE in the same compartment as the DRG. For more information about
  * compartments and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You must provide the public IP address of your on-premises router. See
  * [Configuring Your On-Premises Router for an IPSec VPN](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/configuringCPE.htm).
  * <p>
  You may optionally specify a *display name* for the CPE, otherwise a default is provided. It does not have to
  * be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateCpeRequest
       * @return CreateCpeResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateCpe.ts.html |here} to see how to use CreateCpe API.
       */
    createCpe(createCpeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createCpe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCpeRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCpeRequest.createCpeDetails, "CreateCpeDetails", models.CreateCpeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createCpeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cpe",
                    bodyModel: "model.Cpe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new cross-connect. Oracle recommends you create each cross-connect in a
  * {@link CrossConnectGroup} so you can use link aggregation
  * with the connection.
  * <p>
  After creating the `CrossConnect` object, you need to go the FastConnect location
  * and request to have the physical cable installed. For more information, see
  * [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the
  * compartment where you want the cross-connect to reside. If you're
  * not sure which compartment to use, put the cross-connect in the
  * same compartment with your VCN. For more information about
  * compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the cross-connect.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateCrossConnectRequest
       * @return CreateCrossConnectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateCrossConnect.ts.html |here} to see how to use CreateCrossConnect API.
       */
    createCrossConnect(createCrossConnectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnect.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCrossConnectRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCrossConnectRequest.createCrossConnectDetails, "CreateCrossConnectDetails", models.CreateCrossConnectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createCrossConnectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnect",
                    bodyModel: "model.CrossConnect",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new cross-connect group to use with Oracle Cloud Infrastructure
  * FastConnect. For more information, see
  * [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the
  * compartment where you want the cross-connect group to reside. If you're
  * not sure which compartment to use, put the cross-connect group in the
  * same compartment with your VCN. For more information about
  * compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the cross-connect group.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateCrossConnectGroupRequest
       * @return CreateCrossConnectGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateCrossConnectGroup.ts.html |here} to see how to use CreateCrossConnectGroup API.
       */
    createCrossConnectGroup(createCrossConnectGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createCrossConnectGroup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createCrossConnectGroupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createCrossConnectGroupRequest.createCrossConnectGroupDetails, "CreateCrossConnectGroupDetails", models.CreateCrossConnectGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createCrossConnectGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnectGroup",
                    bodyModel: "model.CrossConnectGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new set of DHCP options for the specified VCN. For more information, see
  * {@link DhcpOptions}.
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where you want the set of
  * DHCP options to reside. Notice that the set of options doesn't have to be in the same compartment as the VCN,
  * subnets, or other Networking Service components. If you're not sure which compartment to use, put the set
  * of DHCP options in the same compartment as the VCN. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the set of DHCP options, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateDhcpOptionsRequest
       * @return CreateDhcpOptionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDhcpOptions.ts.html |here} to see how to use CreateDhcpOptions API.
       */
    createDhcpOptions(createDhcpOptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createDhcpOptions.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDhcpOptionsRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDhcpOptionsRequest.createDhcpDetails, "CreateDhcpDetails", models.CreateDhcpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDhcpOptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dhcpOptions",
                    bodyModel: "model.DhcpOptions",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new dynamic routing gateway (DRG) in the specified compartment. For more information,
  * see [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDRGs.htm).
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want
  * the DRG to reside. Notice that the DRG doesn't have to be in the same compartment as the VCN,
  * the DRG attachment, or other Networking Service components. If you're not sure which compartment
  * to use, put the DRG in the same compartment as the VCN. For more information about compartments
  * and access control, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the DRG, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateDrgRequest
       * @return CreateDrgResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDrg.ts.html |here} to see how to use CreateDrg API.
       */
    createDrg(createDrgRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createDrg.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDrgRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDrgRequest.createDrgDetails, "CreateDrgDetails", models.CreateDrgDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDrgRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drg",
                    bodyModel: "model.Drg",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Attaches the specified DRG to the specified network resource. A VCN can be attached to only one DRG
  * at a time, but a DRG can be attached to more than one VCN. The response includes a `DrgAttachment`
  * object with its own [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm). For more information about DRGs, see
  * [Dynamic Routing Gateways (DRGs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDRGs.htm).
  * <p>
  You may optionally specify a *display name* for the attachment, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  For the purposes of access control, the DRG attachment is automatically placed into the currently selected compartment.
  * For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  *
       * @param CreateDrgAttachmentRequest
       * @return CreateDrgAttachmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDrgAttachment.ts.html |here} to see how to use CreateDrgAttachment API.
       */
    createDrgAttachment(createDrgAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createDrgAttachment.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDrgAttachmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDrgAttachmentRequest.createDrgAttachmentDetails, "CreateDrgAttachmentDetails", models.CreateDrgAttachmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDrgAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgAttachment",
                    bodyModel: "model.DrgAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new route distribution for the specified DRG.
     * Assign the route distribution as an import distribution to a DRG route table using the `UpdateDrgRouteTable` or `CreateDrgRouteTable` operations.
     * Assign the route distribution as an export distribution to a DRG attachment
     * using the `UpdateDrgAttachment` or `CreateDrgAttachment` operations.
     *
     * @param CreateDrgRouteDistributionRequest
     * @return CreateDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDrgRouteDistribution.ts.html |here} to see how to use CreateDrgRouteDistribution API.
     */
    createDrgRouteDistribution(createDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createDrgRouteDistribution.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDrgRouteDistributionRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDrgRouteDistributionRequest.createDrgRouteDistributionDetails, "CreateDrgRouteDistributionDetails", models.CreateDrgRouteDistributionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteDistribution",
                    bodyModel: "model.DrgRouteDistribution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new DRG route table for the specified DRG. Assign the DRG route table to a DRG attachment
     * using the `UpdateDrgAttachment` or `CreateDrgAttachment` operations.
     *
     * @param CreateDrgRouteTableRequest
     * @return CreateDrgRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateDrgRouteTable.ts.html |here} to see how to use CreateDrgRouteTable API.
     */
    createDrgRouteTable(createDrgRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createDrgRouteTable.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDrgRouteTableRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDrgRouteTableRequest.createDrgRouteTableDetails, "CreateDrgRouteTableDetails", models.CreateDrgRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDrgRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteTable",
                    bodyModel: "model.DrgRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new IPSec connection between the specified DRG and CPE. For more information, see
  * [IPSec VPNs](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIPsec.htm).
  * <p>
  If you configure at least one tunnel to use static routing, then in the request you must provide
  * at least one valid static route (you're allowed a maximum of 10). For example: 10.0.0.0/16.
  * If you configure both tunnels to use BGP dynamic routing, you can provide an empty list for
  * the static routes. For more information, see the important note in
  * {@link IPSecConnection}.
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where you want the
  * IPSec connection to reside. Notice that the IPSec connection doesn't have to be in the same compartment
  * as the DRG, CPE, or other Networking Service components. If you're not sure which compartment to
  * use, put the IPSec connection in the same compartment as the DRG. For more information about
  * compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  You may optionally specify a *display name* for the IPSec connection, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  After creating the IPSec connection, you need to configure your on-premises router
  * with tunnel-specific information. For tunnel status and the required configuration information, see:
  * <p>
    * {@link IPSecConnectionTunnel}
  *   * {@link IPSecConnectionTunnelSharedSecret}
  * <p>
  For each tunnel, you need the IP address of Oracle's VPN headend and the shared secret
  * (that is, the pre-shared key). For more information, see
  * [Configuring Your On-Premises Router for an IPSec VPN](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/configuringCPE.htm).
  *
       * @param CreateIPSecConnectionRequest
       * @return CreateIPSecConnectionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateIPSecConnection.ts.html |here} to see how to use CreateIPSecConnection API.
       */
    createIPSecConnection(createIPSecConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createIPSecConnection.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createIPSecConnectionRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIPSecConnectionRequest.createIPSecConnectionDetails, "CreateIPSecConnectionDetails", models.CreateIPSecConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createIPSecConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnection",
                    bodyModel: "model.IPSecConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new internet gateway for the specified VCN. For more information, see
  * [Access to the Internet](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIGs.htm).
  * <p>
  For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the compartment where you want the Internet
  * Gateway to reside. Notice that the internet gateway doesn't have to be in the same compartment as the VCN or
  * other Networking Service components. If you're not sure which compartment to use, put the Internet
  * Gateway in the same compartment with the VCN. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  You may optionally specify a *display name* for the internet gateway, otherwise a default is provided. It
  * does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  For traffic to flow between a subnet and an internet gateway, you must create a route rule accordingly in
  * the subnet's route table (for example, 0.0.0.0/0 > internet gateway). See
  * {@link #updateRouteTable(UpdateRouteTableRequest) updateRouteTable}.
  * <p>
  You must specify whether the internet gateway is enabled when you create it. If it's disabled, that means no
  * traffic will flow to/from the internet even if there's a route rule that enables that traffic. You can later
  * use {@link #updateInternetGateway(UpdateInternetGatewayRequest) updateInternetGateway} to easily disable/enable
  * the gateway without changing the route rule.
  *
       * @param CreateInternetGatewayRequest
       * @return CreateInternetGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateInternetGateway.ts.html |here} to see how to use CreateInternetGateway API.
       */
    createInternetGateway(createInternetGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createInternetGateway.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createInternetGatewayRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createInternetGatewayRequest.createInternetGatewayDetails, "CreateInternetGatewayDetails", models.CreateInternetGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createInternetGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internetGateway",
                    bodyModel: "model.InternetGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an IPv6 for the specified VNIC.
     *
     * @param CreateIpv6Request
     * @return CreateIpv6Response
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateIpv6.ts.html |here} to see how to use CreateIpv6 API.
     */
    createIpv6(createIpv6Request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createIpv6.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createIpv6Request.opcRequestId,
                "opc-retry-token": createIpv6Request.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipv6",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createIpv6Request.createIpv6Details, "CreateIpv6Details", models.CreateIpv6Details.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createIpv6Request.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ipv6",
                    bodyModel: "model.Ipv6",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new local peering gateway (LPG) for the specified VCN.
     *
     * @param CreateLocalPeeringGatewayRequest
     * @return CreateLocalPeeringGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateLocalPeeringGateway.ts.html |here} to see how to use CreateLocalPeeringGateway API.
     */
    createLocalPeeringGateway(createLocalPeeringGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createLocalPeeringGateway.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLocalPeeringGatewayRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLocalPeeringGatewayRequest.createLocalPeeringGatewayDetails, "CreateLocalPeeringGatewayDetails", models.CreateLocalPeeringGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLocalPeeringGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "localPeeringGateway",
                    bodyModel: "model.LocalPeeringGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new NAT gateway for the specified VCN. You must also set up a route rule with the
     * NAT gateway as the rule's target. See {@link RouteTable}.
     *
     * @param CreateNatGatewayRequest
     * @return CreateNatGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateNatGateway.ts.html |here} to see how to use CreateNatGateway API.
     */
    createNatGateway(createNatGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createNatGateway.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createNatGatewayRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNatGatewayRequest.createNatGatewayDetails, "CreateNatGatewayDetails", models.CreateNatGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createNatGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "natGateway",
                    bodyModel: "model.NatGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new network security group for the specified VCN.
     *
     * @param CreateNetworkSecurityGroupRequest
     * @return CreateNetworkSecurityGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateNetworkSecurityGroup.ts.html |here} to see how to use CreateNetworkSecurityGroup API.
     */
    createNetworkSecurityGroup(createNetworkSecurityGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createNetworkSecurityGroup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createNetworkSecurityGroupRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createNetworkSecurityGroupRequest.createNetworkSecurityGroupDetails, "CreateNetworkSecurityGroupDetails", models.CreateNetworkSecurityGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createNetworkSecurityGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSecurityGroup",
                    bodyModel: "model.NetworkSecurityGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a secondary private IP for the specified VNIC.
     * For more information about secondary private IPs, see
     * [IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingIPaddresses.htm).
     *
     * @param CreatePrivateIpRequest
     * @return CreatePrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreatePrivateIp.ts.html |here} to see how to use CreatePrivateIp API.
     */
    createPrivateIp(createPrivateIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createPrivateIp.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createPrivateIpRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/privateIps",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPrivateIpRequest.createPrivateIpDetails, "CreatePrivateIpDetails", models.CreatePrivateIpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createPrivateIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "privateIp",
                    bodyModel: "model.PrivateIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a public IP. Use the `lifetime` property to specify whether it's an ephemeral or
  * reserved public IP. For information about limits on how many you can create, see
  * [Public IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingpublicIPs.htm).
  * <p>
  * **For an ephemeral public IP assigned to a private IP:** You must also specify a `privateIpId`
  * with the OCID of the primary private IP you want to assign the public IP to. The public IP is
  * created in the same availability domain as the private IP. An ephemeral public IP must always be
  * assigned to a private IP, and only to the *primary* private IP on a VNIC, not a secondary
  * private IP. Exception: If you create a {@link NatGateway}, Oracle
  * automatically assigns the NAT gateway a regional ephemeral public IP that you cannot remove.
  * <p>
  * **For a reserved public IP:** You may also optionally assign the public IP to a private
  * IP by specifying `privateIpId`. Or you can later assign the public IP with
  * {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
  * <p>
  **Note:** When assigning a public IP to a private IP, the private IP must not already have
  * a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it does, an error is returned.
  * <p>
  Also, for reserved public IPs, the optional assignment part of this operation is
  * asynchronous. Poll the public IP's `lifecycleState` to determine if the assignment
  * succeeded.
  *
       * @param CreatePublicIpRequest
       * @return CreatePublicIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreatePublicIp.ts.html |here} to see how to use CreatePublicIp API.
       */
    createPublicIp(createPublicIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createPublicIp.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createPublicIpRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPublicIpRequest.createPublicIpDetails, "CreatePublicIpDetails", models.CreatePublicIpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createPublicIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIp",
                    bodyModel: "model.PublicIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a public IP pool.
     *
     * @param CreatePublicIpPoolRequest
     * @return CreatePublicIpPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreatePublicIpPool.ts.html |here} to see how to use CreatePublicIpPool API.
     */
    createPublicIpPool(createPublicIpPoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createPublicIpPool.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createPublicIpPoolRequest.opcRequestId,
                "opc-retry-token": createPublicIpPoolRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPublicIpPoolRequest.createPublicIpPoolDetails, "CreatePublicIpPoolDetails", models.CreatePublicIpPoolDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createPublicIpPoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPool",
                    bodyModel: "model.PublicIpPool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new remote peering connection (RPC) for the specified DRG.
     *
     * @param CreateRemotePeeringConnectionRequest
     * @return CreateRemotePeeringConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateRemotePeeringConnection.ts.html |here} to see how to use CreateRemotePeeringConnection API.
     */
    createRemotePeeringConnection(createRemotePeeringConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createRemotePeeringConnection.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRemotePeeringConnectionRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRemotePeeringConnectionRequest.createRemotePeeringConnectionDetails, "CreateRemotePeeringConnectionDetails", models.CreateRemotePeeringConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRemotePeeringConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "remotePeeringConnection",
                    bodyModel: "model.RemotePeeringConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new route table for the specified VCN. In the request you must also include at least one route
  * rule for the new route table. For information on the number of rules you can have in a route table, see
  * [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm). For general information about route
  * tables in your VCN and the types of targets you can use in route rules,
  * see [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want the route
  * table to reside. Notice that the route table doesn't have to be in the same compartment as the VCN, subnets,
  * or other Networking Service components. If you're not sure which compartment to use, put the route
  * table in the same compartment as the VCN. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the route table, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateRouteTableRequest
       * @return CreateRouteTableResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateRouteTable.ts.html |here} to see how to use CreateRouteTable API.
       */
    createRouteTable(createRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createRouteTable.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createRouteTableRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRouteTableRequest.createRouteTableDetails, "CreateRouteTableDetails", models.CreateRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "routeTable",
                    bodyModel: "model.RouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new security list for the specified VCN. For more information
  * about security lists, see [Security Lists](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securitylists.htm).
  * For information on the number of rules you can have in a security list, see
  * [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm).
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want the security
  * list to reside. Notice that the security list doesn't have to be in the same compartment as the VCN, subnets,
  * or other Networking Service components. If you're not sure which compartment to use, put the security
  * list in the same compartment as the VCN. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the security list, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateSecurityListRequest
       * @return CreateSecurityListResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateSecurityList.ts.html |here} to see how to use CreateSecurityList API.
       */
    createSecurityList(createSecurityListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createSecurityList.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSecurityListRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSecurityListRequest.createSecurityListDetails, "CreateSecurityListDetails", models.CreateSecurityListDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createSecurityListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityList",
                    bodyModel: "model.SecurityList",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new service gateway in the specified compartment.
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want
  * the service gateway to reside. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the service gateway, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  *
       * @param CreateServiceGatewayRequest
       * @return CreateServiceGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateServiceGateway.ts.html |here} to see how to use CreateServiceGateway API.
       */
    createServiceGateway(createServiceGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createServiceGateway.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createServiceGatewayRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createServiceGatewayRequest.createServiceGatewayDetails, "CreateServiceGatewayDetails", models.CreateServiceGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createServiceGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "serviceGateway",
                    bodyModel: "model.ServiceGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new subnet in the specified VCN. You can't change the size of the subnet after creation,
  * so it's important to think about the size of subnets you need before creating them.
  * For more information, see [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
  * For information on the number of subnets you can have in a VCN, see
  * [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm).
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want the subnet
  * to reside. Notice that the subnet doesn't have to be in the same compartment as the VCN, route tables, or
  * other Networking Service components. If you're not sure which compartment to use, put the subnet in
  * the same compartment as the VCN. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs,
  * see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally associate a route table with the subnet. If you don't, the subnet will use the
  * VCN's default route table. For more information about route tables, see
  * [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
  * <p>
  You may optionally associate a security list with the subnet. If you don't, the subnet will use the
  * VCN's default security list. For more information about security lists, see
  * [Security Lists](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securitylists.htm).
  * <p>
  You may optionally associate a set of DHCP options with the subnet. If you don't, the subnet will use the
  * VCN's default set. For more information about DHCP options, see
  * [DHCP Options](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDHCP.htm).
  * <p>
  You may optionally specify a *display name* for the subnet, otherwise a default is provided.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  You can also add a DNS label for the subnet, which is required if you want the Internet and
  * VCN Resolver to resolve hostnames for instances in the subnet. For more information, see
  * [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
  *
       * @param CreateSubnetRequest
       * @return CreateSubnetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateSubnet.ts.html |here} to see how to use CreateSubnet API.
       */
    createSubnet(createSubnetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createSubnet.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSubnetRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSubnetRequest.createSubnetDetails, "CreateSubnetDetails", models.CreateSubnetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createSubnetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "subnet",
                    bodyModel: "model.Subnet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new virtual cloud network (VCN). For more information, see
  * [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
  * <p>
  For the VCN, you specify a list of one or more IPv4 CIDR blocks that meet the following criteria:
  * <p>
  - The CIDR blocks must be valid.
  * - They must not overlap with each other or with the on-premises network CIDR block.
  * - The number of CIDR blocks does not exceed the limit of CIDR blocks allowed per VCN.
  * <p>
  For a CIDR block, Oracle recommends that you use one of the private IP address ranges specified in [RFC 1918](https://tools.ietf.org/html/rfc1918) (10.0.0.0/8, 172.16/12, and 192.168/16). Example:
  * 172.16.0.0/16. The CIDR blocks can range from /16 to /30.
  * <p>
  For the purposes of access control, you must provide the OCID of the compartment where you want the VCN to
  * reside. Consult an Oracle Cloud Infrastructure administrator in your organization if you're not sure which
  * compartment to use. Notice that the VCN doesn't have to be in the same compartment as the subnets or other
  * Networking Service components. For more information about compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the VCN, otherwise a default is provided. It does not have to
  * be unique, and you can change it. Avoid entering confidential information.
  * <p>
  You can also add a DNS label for the VCN, which is required if you want the instances to use the
  * Interent and VCN Resolver option for DNS in the VCN. For more information, see
  * [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
  * <p>
  The VCN automatically comes with a default route table, default security list, and default set of DHCP options.
  * The OCID for each is returned in the response. You can't delete these default objects, but you can change their
  * contents (that is, change the route rules, security list rules, and so on).
  * <p>
  The VCN and subnets you create are not accessible until you attach an internet gateway or set up an IPSec VPN
  * or FastConnect. For more information, see
  * [Overview of the Networking Service](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/overview.htm).
  *
       * @param CreateVcnRequest
       * @return CreateVcnResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVcn.ts.html |here} to see how to use CreateVcn API.
       */
    createVcn(createVcnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createVcn.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVcnRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVcnRequest.createVcnDetails, "CreateVcnDetails", models.CreateVcnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVcnRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vcn",
                    bodyModel: "model.Vcn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new virtual circuit to use with Oracle Cloud
  * Infrastructure FastConnect. For more information, see
  * [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  * <p>
  For the purposes of access control, you must provide the OCID of the
  * compartment where you want the virtual circuit to reside. If you're
  * not sure which compartment to use, put the virtual circuit in the
  * same compartment with the DRG it's using. For more information about
  * compartments and access control, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * For information about OCIDs, see
  * [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
  * <p>
  You may optionally specify a *display name* for the virtual circuit.
  * It does not have to be unique, and you can change it. Avoid entering confidential information.
  * <p>
  **Important:** When creating a virtual circuit, you specify a DRG for
  * the traffic to flow through. Make sure you attach the DRG to your
  * VCN and confirm the VCN's routing sends traffic to the DRG. Otherwise
  * traffic will not flow. For more information, see
  * [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
  *
       * @param CreateVirtualCircuitRequest
       * @return CreateVirtualCircuitResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVirtualCircuit.ts.html |here} to see how to use CreateVirtualCircuit API.
       */
    createVirtualCircuit(createVirtualCircuitRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createVirtualCircuit.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVirtualCircuitRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVirtualCircuitRequest.createVirtualCircuitDetails, "CreateVirtualCircuitDetails", models.CreateVirtualCircuitDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVirtualCircuitRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualCircuit",
                    bodyModel: "model.VirtualCircuit",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a VLAN in the specified VCN and the specified compartment.
     *
     * @param CreateVlanRequest
     * @return CreateVlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/CreateVlan.ts.html |here} to see how to use CreateVlan API.
     */
    createVlan(createVlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#createVlan.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createVlanRequest.opcRetryToken,
                "opc-request-id": createVlanRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createVlanRequest.createVlanDetails, "CreateVlanDetails", models.CreateVlanDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createVlanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vlan",
                    bodyModel: "model.Vlan",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified `ByoipRange` resource.
     * The resource must be in one of the following states: CREATING, PROVISIONED, ACTIVE, or FAILED.
     * It must not have any subranges currently allocated to a PublicIpPool object or the deletion will fail.
     * You must specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     * If the `ByoipRange` resource is currently in the PROVISIONED or ACTIVE state, it will be de-provisioned and then deleted.
     *
     * @param DeleteByoipRangeRequest
     * @return DeleteByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteByoipRange.ts.html |here} to see how to use DeleteByoipRange API.
     */
    deleteByoipRange(deleteByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteByoipRange.");
            const pathParams = {
                "{byoipRangeId}": deleteByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteByoipRangeRequest.opcRequestId,
                "if-match": deleteByoipRangeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified CPE object. The CPE must not be connected to a DRG. This is an asynchronous
     * operation. The CPE's `lifecycleState` will change to TERMINATING temporarily until the CPE is completely
     * removed.
     *
     * @param DeleteCpeRequest
     * @return DeleteCpeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteCpe.ts.html |here} to see how to use DeleteCpe API.
     */
    deleteCpe(deleteCpeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteCpe.");
            const pathParams = {
                "{cpeId}": deleteCpeRequest.cpeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCpeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes/{cpeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteCpeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified cross-connect. It must not be mapped to a
     * {@link VirtualCircuit}.
     *
     * @param DeleteCrossConnectRequest
     * @return DeleteCrossConnectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteCrossConnect.ts.html |here} to see how to use DeleteCrossConnect API.
     */
    deleteCrossConnect(deleteCrossConnectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnect.");
            const pathParams = {
                "{crossConnectId}": deleteCrossConnectRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCrossConnectRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteCrossConnectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified cross-connect group. It must not contain any
     * cross-connects, and it cannot be mapped to a
     * {@link VirtualCircuit}.
     *
     * @param DeleteCrossConnectGroupRequest
     * @return DeleteCrossConnectGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteCrossConnectGroup.ts.html |here} to see how to use DeleteCrossConnectGroup API.
     */
    deleteCrossConnectGroup(deleteCrossConnectGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteCrossConnectGroup.");
            const pathParams = {
                "{crossConnectGroupId}": deleteCrossConnectGroupRequest.crossConnectGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteCrossConnectGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups/{crossConnectGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteCrossConnectGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified set of DHCP options, but only if it's not associated with a subnet. You can't delete a
  * VCN's default set of DHCP options.
  * <p>
  This is an asynchronous operation. The state of the set of options will switch to TERMINATING temporarily
  * until the set is completely removed.
  *
       * @param DeleteDhcpOptionsRequest
       * @return DeleteDhcpOptionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDhcpOptions.ts.html |here} to see how to use DeleteDhcpOptions API.
       */
    deleteDhcpOptions(deleteDhcpOptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteDhcpOptions.");
            const pathParams = {
                "{dhcpId}": deleteDhcpOptionsRequest.dhcpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDhcpOptionsRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps/{dhcpId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDhcpOptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified DRG. The DRG must not be attached to a VCN or be connected to your on-premise
     * network. Also, there must not be a route table that lists the DRG as a target. This is an asynchronous
     * operation. The DRG's `lifecycleState` will change to TERMINATING temporarily until the DRG is completely
     * removed.
     *
     * @param DeleteDrgRequest
     * @return DeleteDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDrg.ts.html |here} to see how to use DeleteDrg API.
     */
    deleteDrg(deleteDrgRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteDrg.");
            const pathParams = {
                "{drgId}": deleteDrgRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDrgRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDrgRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches a DRG from a network resource by deleting the corresponding `DrgAttachment` resource. This is an asynchronous
     * operation. The attachment's `lifecycleState` will temporarily change to DETACHING until the attachment
     * is completely removed.
     *
     * @param DeleteDrgAttachmentRequest
     * @return DeleteDrgAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDrgAttachment.ts.html |here} to see how to use DeleteDrgAttachment API.
     */
    deleteDrgAttachment(deleteDrgAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgAttachment.");
            const pathParams = {
                "{drgAttachmentId}": deleteDrgAttachmentRequest.drgAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDrgAttachmentRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments/{drgAttachmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDrgAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified route distribution. You can't delete a route distribution currently in use by a DRG attachment or DRG route table.
  * <p>
  Remove the DRG route distribution from a DRG attachment or DRG route table by using the \"RemoveExportDrgRouteDistribution\" or \"RemoveImportDrgRouteDistribution' operations.
  *
       * @param DeleteDrgRouteDistributionRequest
       * @return DeleteDrgRouteDistributionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDrgRouteDistribution.ts.html |here} to see how to use DeleteDrgRouteDistribution API.
       */
    deleteDrgRouteDistribution(deleteDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgRouteDistribution.");
            const pathParams = {
                "{drgRouteDistributionId}": deleteDrgRouteDistributionRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDrgRouteDistributionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified DRG route table. There must not be any DRG attachments assigned.
     *
     * @param DeleteDrgRouteTableRequest
     * @return DeleteDrgRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteDrgRouteTable.ts.html |here} to see how to use DeleteDrgRouteTable API.
     */
    deleteDrgRouteTable(deleteDrgRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteDrgRouteTable.");
            const pathParams = {
                "{drgRouteTableId}": deleteDrgRouteTableRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDrgRouteTableRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDrgRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified IPSec connection. If your goal is to disable the IPSec VPN between your VCN and
  * on-premises network, it's easiest to simply detach the DRG but keep all the IPSec VPN components intact.
  * If you were to delete all the components and then later need to create an IPSec VPN again, you would
  * need to configure your on-premises router again with the new information returned from
  * {@link #createIPSecConnection(CreateIPSecConnectionRequest) createIPSecConnection}.
  * <p>
  This is an asynchronous operation. The connection's `lifecycleState` will change to TERMINATING temporarily
  * until the connection is completely removed.
  *
       * @param DeleteIPSecConnectionRequest
       * @return DeleteIPSecConnectionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteIPSecConnection.ts.html |here} to see how to use DeleteIPSecConnection API.
       */
    deleteIPSecConnection(deleteIPSecConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteIPSecConnection.");
            const pathParams = {
                "{ipscId}": deleteIPSecConnectionRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIPSecConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteIPSecConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified internet gateway. The internet gateway does not have to be disabled, but
  * there must not be a route table that lists it as a target.
  * <p>
  This is an asynchronous operation. The gateway's `lifecycleState` will change to TERMINATING temporarily
  * until the gateway is completely removed.
  *
       * @param DeleteInternetGatewayRequest
       * @return DeleteInternetGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteInternetGateway.ts.html |here} to see how to use DeleteInternetGateway API.
       */
    deleteInternetGateway(deleteInternetGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteInternetGateway.");
            const pathParams = {
                "{igId}": deleteInternetGatewayRequest.igId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteInternetGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways/{igId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteInternetGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Unassigns and deletes the specified IPv6. You must specify the object's [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     * The IPv6 address is returned to the subnet's pool of available addresses.
     *
     * @param DeleteIpv6Request
     * @return DeleteIpv6Response
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteIpv6.ts.html |here} to see how to use DeleteIpv6 API.
     */
    deleteIpv6(deleteIpv6Request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteIpv6.");
            const pathParams = {
                "{ipv6Id}": deleteIpv6Request.ipv6Id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteIpv6Request.ifMatch,
                "opc-request-id": deleteIpv6Request.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipv6/{ipv6Id}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteIpv6Request.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified local peering gateway (LPG).
  * <p>
  This is an asynchronous operation; the local peering gateway's `lifecycleState` changes to TERMINATING temporarily
  * until the local peering gateway is completely removed.
  *
       * @param DeleteLocalPeeringGatewayRequest
       * @return DeleteLocalPeeringGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteLocalPeeringGateway.ts.html |here} to see how to use DeleteLocalPeeringGateway API.
       */
    deleteLocalPeeringGateway(deleteLocalPeeringGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteLocalPeeringGateway.");
            const pathParams = {
                "{localPeeringGatewayId}": deleteLocalPeeringGatewayRequest.localPeeringGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLocalPeeringGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways/{localPeeringGatewayId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLocalPeeringGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified NAT gateway. The NAT gateway does not have to be disabled, but there
  * must not be a route rule that lists the NAT gateway as a target.
  * <p>
  This is an asynchronous operation. The NAT gateway's `lifecycleState` will change to
  * TERMINATING temporarily until the NAT gateway is completely removed.
  *
       * @param DeleteNatGatewayRequest
       * @return DeleteNatGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteNatGateway.ts.html |here} to see how to use DeleteNatGateway API.
       */
    deleteNatGateway(deleteNatGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteNatGateway.");
            const pathParams = {
                "{natGatewayId}": deleteNatGatewayRequest.natGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNatGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways/{natGatewayId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteNatGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified network security group. The group must not contain any VNICs.
  * <p>
  To get a list of the VNICs in a network security group, use
  * {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
  * Each returned {@link NetworkSecurityGroupVnic} object
  * contains both the OCID of the VNIC and the OCID of the VNIC's parent resource (for example,
  * the Compute instance that the VNIC is attached to).
  *
       * @param DeleteNetworkSecurityGroupRequest
       * @return DeleteNetworkSecurityGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteNetworkSecurityGroup.ts.html |here} to see how to use DeleteNetworkSecurityGroup API.
       */
    deleteNetworkSecurityGroup(deleteNetworkSecurityGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteNetworkSecurityGroup.");
            const pathParams = {
                "{networkSecurityGroupId}": deleteNetworkSecurityGroupRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteNetworkSecurityGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteNetworkSecurityGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Unassigns and deletes the specified private IP. You must
  * specify the object's OCID. The private IP address is returned to
  * the subnet's pool of available addresses.
  * <p>
  This operation cannot be used with primary private IPs, which are
  * automatically unassigned and deleted when the VNIC is terminated.
  * <p>
  **Important:** If a secondary private IP is the
  * [target of a route rule](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm#privateip),
  * unassigning it from the VNIC causes that route rule to blackhole and the traffic
  * will be dropped.
  *
       * @param DeletePrivateIpRequest
       * @return DeletePrivateIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeletePrivateIp.ts.html |here} to see how to use DeletePrivateIp API.
       */
    deletePrivateIp(deletePrivateIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deletePrivateIp.");
            const pathParams = {
                "{privateIpId}": deletePrivateIpRequest.privateIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePrivateIpRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/privateIps/{privateIpId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deletePrivateIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Unassigns and deletes the specified public IP (either ephemeral or reserved).
  * You must specify the object's OCID. The public IP address is returned to the
  * Oracle Cloud Infrastructure public IP pool.
  * <p>
  **Note:** You cannot update, unassign, or delete the public IP that Oracle automatically
  * assigned to an entity for you (such as a load balancer or NAT gateway). The public IP is
  * automatically deleted if the assigned entity is terminated.
  * <p>
  For an assigned reserved public IP, the initial unassignment portion of this operation
  * is asynchronous. Poll the public IP's `lifecycleState` to determine
  * if the operation succeeded.
  * <p>
  If you want to simply unassign a reserved public IP and return it to your pool
  * of reserved public IPs, instead use
  * {@link #updatePublicIp(UpdatePublicIpRequest) updatePublicIp}.
  *
       * @param DeletePublicIpRequest
       * @return DeletePublicIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeletePublicIp.ts.html |here} to see how to use DeletePublicIp API.
       */
    deletePublicIp(deletePublicIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIp.");
            const pathParams = {
                "{publicIpId}": deletePublicIpRequest.publicIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deletePublicIpRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/{publicIpId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deletePublicIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified public IP pool.
     * To delete a public IP pool it must not have any active IP address allocations.
     * You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) when deleting an IP pool.
     *
     * @param DeletePublicIpPoolRequest
     * @return DeletePublicIpPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeletePublicIpPool.ts.html |here} to see how to use DeletePublicIpPool API.
     */
    deletePublicIpPool(deletePublicIpPoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deletePublicIpPool.");
            const pathParams = {
                "{publicIpPoolId}": deletePublicIpPoolRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deletePublicIpPoolRequest.opcRequestId,
                "if-match": deletePublicIpPoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deletePublicIpPoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the remote peering connection (RPC).
  * <p>
  This is an asynchronous operation; the RPC's `lifecycleState` changes to TERMINATING temporarily
  * until the RPC is completely removed.
  *
       * @param DeleteRemotePeeringConnectionRequest
       * @return DeleteRemotePeeringConnectionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteRemotePeeringConnection.ts.html |here} to see how to use DeleteRemotePeeringConnection API.
       */
    deleteRemotePeeringConnection(deleteRemotePeeringConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteRemotePeeringConnection.");
            const pathParams = {
                "{remotePeeringConnectionId}": deleteRemotePeeringConnectionRequest.remotePeeringConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRemotePeeringConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections/{remotePeeringConnectionId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRemotePeeringConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified route table, but only if it's not associated with a subnet. You can't delete a
  * VCN's default route table.
  * <p>
  This is an asynchronous operation. The route table's `lifecycleState` will change to TERMINATING temporarily
  * until the route table is completely removed.
  *
       * @param DeleteRouteTableRequest
       * @return DeleteRouteTableResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteRouteTable.ts.html |here} to see how to use DeleteRouteTable API.
       */
    deleteRouteTable(deleteRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteRouteTable.");
            const pathParams = {
                "{rtId}": deleteRouteTableRequest.rtId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRouteTableRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables/{rtId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified security list, but only if it's not associated with a subnet. You can't delete
  * a VCN's default security list.
  * <p>
  This is an asynchronous operation. The security list's `lifecycleState` will change to TERMINATING temporarily
  * until the security list is completely removed.
  *
       * @param DeleteSecurityListRequest
       * @return DeleteSecurityListResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteSecurityList.ts.html |here} to see how to use DeleteSecurityList API.
       */
    deleteSecurityList(deleteSecurityListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteSecurityList.");
            const pathParams = {
                "{securityListId}": deleteSecurityListRequest.securityListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSecurityListRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists/{securityListId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSecurityListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified service gateway. There must not be a route table that lists the service
     * gateway as a target.
     *
     * @param DeleteServiceGatewayRequest
     * @return DeleteServiceGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteServiceGateway.ts.html |here} to see how to use DeleteServiceGateway API.
     */
    deleteServiceGateway(deleteServiceGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteServiceGateway.");
            const pathParams = {
                "{serviceGatewayId}": deleteServiceGatewayRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteServiceGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteServiceGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified subnet, but only if there are no instances in the subnet. This is an asynchronous
     * operation. The subnet's `lifecycleState` will change to TERMINATING temporarily. If there are any
     * instances in the subnet, the state will instead change back to AVAILABLE.
     *
     * @param DeleteSubnetRequest
     * @return DeleteSubnetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteSubnet.ts.html |here} to see how to use DeleteSubnet API.
     */
    deleteSubnet(deleteSubnetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteSubnet.");
            const pathParams = {
                "{subnetId}": deleteSubnetRequest.subnetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSubnetRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets/{subnetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSubnetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified VCN. The VCN must be empty and have no attached gateways. This is an asynchronous
     * operation. The VCN's `lifecycleState` will change to TERMINATING temporarily until the VCN is completely
     * removed.
     *
     * @param DeleteVcnRequest
     * @return DeleteVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVcn.ts.html |here} to see how to use DeleteVcn API.
     */
    deleteVcn(deleteVcnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteVcn.");
            const pathParams = {
                "{vcnId}": deleteVcnRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVcnRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVcnRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified virtual circuit.
     * <p>
     **Important:** If you're using FastConnect via a provider,
     * make sure to also terminate the connection with
     * the provider, or else the provider may continue to bill you.
     *
     * @param DeleteVirtualCircuitRequest
     * @return DeleteVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVirtualCircuit.ts.html |here} to see how to use DeleteVirtualCircuit API.
     */
    deleteVirtualCircuit(deleteVirtualCircuitRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteVirtualCircuit.");
            const pathParams = {
                "{virtualCircuitId}": deleteVirtualCircuitRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVirtualCircuitRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVirtualCircuitRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified VLAN, but only if there are no VNICs in the VLAN.
     *
     * @param DeleteVlanRequest
     * @return DeleteVlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DeleteVlan.ts.html |here} to see how to use DeleteVlan API.
     */
    deleteVlan(deleteVlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#deleteVlan.");
            const pathParams = {
                "{vlanId}": deleteVlanRequest.vlanId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteVlanRequest.ifMatch,
                "opc-request-id": deleteVlanRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans/{vlanId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteVlanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the specified {@link Service} from the list of enabled
     * `Service` objects for the specified gateway. You do not need to remove any route
     * rules that specify this `Service` object's `cidrBlock` as the destination CIDR. However, consider
     * removing the rules if your intent is to permanently disable use of the `Service` through this
     * service gateway.
     * <p>
     **Note:** The `DetachServiceId` operation is an easy way to remove an individual `Service` from
     * the service gateway. Compare it with
     * {@link #updateServiceGateway(UpdateServiceGatewayRequest) updateServiceGateway}, which replaces
     * the entire existing list of enabled `Service` objects with the list that you provide in the
     * `Update` call. `UpdateServiceGateway` also lets you block all traffic through the service
     * gateway without having to remove each of the individual `Service` objects.
     *
     * @param DetachServiceIdRequest
     * @return DetachServiceIdResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/DetachServiceId.ts.html |here} to see how to use DetachServiceId API.
     */
    detachServiceId(detachServiceIdRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#detachServiceId.");
            const pathParams = {
                "{serviceGatewayId}": detachServiceIdRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachServiceIdRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}/actions/detachService",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachServiceIdRequest.detachServiceDetails, "ServiceIdRequestDetails", models.ServiceIdRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, detachServiceIdRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "serviceGateway",
                    bodyModel: "model.ServiceGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a complete list of DRG attachments that belong to a particular DRG.
     *
     * @param GetAllDrgAttachmentsRequest
     * @return GetAllDrgAttachmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetAllDrgAttachments.ts.html |here} to see how to use GetAllDrgAttachments API.
     */
    getAllDrgAttachments(getAllDrgAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getAllDrgAttachments.");
            const pathParams = {
                "{drgId}": getAllDrgAttachmentsRequest.drgId
            };
            const queryParams = {
                "limit": getAllDrgAttachmentsRequest.limit,
                "page": getAllDrgAttachmentsRequest.page,
                "attachmentType": getAllDrgAttachmentsRequest.attachmentType,
                "isCrossTenancy": getAllDrgAttachmentsRequest.isCrossTenancy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAllDrgAttachmentsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}/actions/getAllDrgAttachments",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAllDrgAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgAttachmentInfo[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgAttachmentInfo objects
     * contained in responses from the getAllDrgAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllAllDrgAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.getAllDrgAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the getAllDrgAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    getAllAllDrgAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.getAllDrgAttachments(req));
    }
    /**
     * Gets the `ByoipRange` resource. You must specify the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * @param GetByoipRangeRequest
     * @return GetByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetByoipRange.ts.html |here} to see how to use GetByoipRange API.
     */
    getByoipRange(getByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getByoipRange.");
            const pathParams = {
                "{byoipRangeId}": getByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getByoipRangeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "byoipRange",
                    bodyModel: "model.ByoipRange",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified CPE's information.
     * @param GetCpeRequest
     * @return GetCpeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCpe.ts.html |here} to see how to use GetCpe API.
     */
    getCpe(getCpeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCpe.");
            const pathParams = {
                "{cpeId}": getCpeRequest.cpeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes/{cpeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCpeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cpe",
                    bodyModel: "model.Cpe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Renders a set of CPE configuration content that can help a network engineer configure the actual
  * CPE device (for example, a hardware router) represented by the specified {@link Cpe}
  * object.
  * <p>
  The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
  * {@link Cpe} must have the CPE's device type specified by the `cpeDeviceShapeId`
  * attribute. The content optionally includes answers that the customer provides (see
  * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
  * merged with a template of other information specific to the CPE device type.
  * <p>
  The operation returns configuration information for *all* of the
  * {@link IPSecConnection} objects that use the specified CPE.
  * Here are similar operations:
  * <p>
    * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
  *   returns CPE configuration content for all tunnels in a single IPSec connection.
  *   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
  *   returns CPE configuration content for a specific tunnel within an IPSec connection.
  *
       * @param GetCpeDeviceConfigContentRequest
       * @return GetCpeDeviceConfigContentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCpeDeviceConfigContent.ts.html |here} to see how to use GetCpeDeviceConfigContent API.
       */
    getCpeDeviceConfigContent(getCpeDeviceConfigContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceConfigContent.");
            const pathParams = {
                "{cpeId}": getCpeDeviceConfigContentRequest.cpeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCpeDeviceConfigContentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes/{cpeId}/cpeConfigContent",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCpeDeviceConfigContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the detailed information about the specified CPE device type. This might include a set of questions
     * that are specific to the particular CPE device type. The customer must supply answers to those questions
     * (see {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}).
     * The service merges the answers with a template of other information for the CPE device type. The following
     * operations return the merged content:
     * <p>
     * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
     *   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
     *   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
     *
     * @param GetCpeDeviceShapeRequest
     * @return GetCpeDeviceShapeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCpeDeviceShape.ts.html |here} to see how to use GetCpeDeviceShape API.
     */
    getCpeDeviceShape(getCpeDeviceShapeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCpeDeviceShape.");
            const pathParams = {
                "{cpeDeviceShapeId}": getCpeDeviceShapeRequest.cpeDeviceShapeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getCpeDeviceShapeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpeDeviceShapes/{cpeDeviceShapeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCpeDeviceShapeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cpeDeviceShapeDetail",
                    bodyModel: "model.CpeDeviceShapeDetail",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified cross-connect's information.
     * @param GetCrossConnectRequest
     * @return GetCrossConnectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCrossConnect.ts.html |here} to see how to use GetCrossConnect API.
     */
    getCrossConnect(getCrossConnectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnect.");
            const pathParams = {
                "{crossConnectId}": getCrossConnectRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCrossConnectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnect",
                    bodyModel: "model.CrossConnect",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified cross-connect group's information.
     * @param GetCrossConnectGroupRequest
     * @return GetCrossConnectGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCrossConnectGroup.ts.html |here} to see how to use GetCrossConnectGroup API.
     */
    getCrossConnectGroup(getCrossConnectGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectGroup.");
            const pathParams = {
                "{crossConnectGroupId}": getCrossConnectGroupRequest.crossConnectGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups/{crossConnectGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCrossConnectGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnectGroup",
                    bodyModel: "model.CrossConnectGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Letter of Authority for the specified cross-connect.
     * @param GetCrossConnectLetterOfAuthorityRequest
     * @return GetCrossConnectLetterOfAuthorityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCrossConnectLetterOfAuthority.ts.html |here} to see how to use GetCrossConnectLetterOfAuthority API.
     */
    getCrossConnectLetterOfAuthority(getCrossConnectLetterOfAuthorityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectLetterOfAuthority.");
            const pathParams = {
                "{crossConnectId}": getCrossConnectLetterOfAuthorityRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}/letterOfAuthority",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCrossConnectLetterOfAuthorityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "letterOfAuthority",
                    bodyModel: "model.LetterOfAuthority",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the specified cross-connect.
     *
     * @param GetCrossConnectStatusRequest
     * @return GetCrossConnectStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetCrossConnectStatus.ts.html |here} to see how to use GetCrossConnectStatus API.
     */
    getCrossConnectStatus(getCrossConnectStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getCrossConnectStatus.");
            const pathParams = {
                "{crossConnectId}": getCrossConnectStatusRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}/status",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getCrossConnectStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnectStatus",
                    bodyModel: "model.CrossConnectStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified set of DHCP options.
     * @param GetDhcpOptionsRequest
     * @return GetDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDhcpOptions.ts.html |here} to see how to use GetDhcpOptions API.
     */
    getDhcpOptions(getDhcpOptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDhcpOptions.");
            const pathParams = {
                "{dhcpId}": getDhcpOptionsRequest.dhcpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps/{dhcpId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDhcpOptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dhcpOptions",
                    bodyModel: "model.DhcpOptions",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified DRG's information.
     * @param GetDrgRequest
     * @return GetDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDrg.ts.html |here} to see how to use GetDrg API.
     */
    getDrg(getDrgRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDrg.");
            const pathParams = {
                "{drgId}": getDrgRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDrgRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drg",
                    bodyModel: "model.Drg",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the `DrgAttachment` resource.
     * @param GetDrgAttachmentRequest
     * @return GetDrgAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDrgAttachment.ts.html |here} to see how to use GetDrgAttachment API.
     */
    getDrgAttachment(getDrgAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDrgAttachment.");
            const pathParams = {
                "{drgAttachmentId}": getDrgAttachmentRequest.drgAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments/{drgAttachmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDrgAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgAttachment",
                    bodyModel: "model.DrgAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the redundancy status for the specified DRG. For more information, see
     * [Redundancy Remedies](https://docs.cloud.oracle.com/iaas/Content/Network/Troubleshoot/drgredundancy.htm).
     *
     * @param GetDrgRedundancyStatusRequest
     * @return GetDrgRedundancyStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDrgRedundancyStatus.ts.html |here} to see how to use GetDrgRedundancyStatus API.
     */
    getDrgRedundancyStatus(getDrgRedundancyStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDrgRedundancyStatus.");
            const pathParams = {
                "{drgId}": getDrgRedundancyStatusRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDrgRedundancyStatusRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}/redundancyStatus",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDrgRedundancyStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRedundancyStatus",
                    bodyModel: "model.DrgRedundancyStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified route distribution's information.
     * @param GetDrgRouteDistributionRequest
     * @return GetDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDrgRouteDistribution.ts.html |here} to see how to use GetDrgRouteDistribution API.
     */
    getDrgRouteDistribution(getDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDrgRouteDistribution.");
            const pathParams = {
                "{drgRouteDistributionId}": getDrgRouteDistributionRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteDistribution",
                    bodyModel: "model.DrgRouteDistribution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified DRG route table's information.
     * @param GetDrgRouteTableRequest
     * @return GetDrgRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetDrgRouteTable.ts.html |here} to see how to use GetDrgRouteTable API.
     */
    getDrgRouteTable(getDrgRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getDrgRouteTable.");
            const pathParams = {
                "{drgRouteTableId}": getDrgRouteTableRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDrgRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteTable",
                    bodyModel: "model.DrgRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified provider service.
     * For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
     *
     * @param GetFastConnectProviderServiceRequest
     * @return GetFastConnectProviderServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetFastConnectProviderService.ts.html |here} to see how to use GetFastConnectProviderService API.
     */
    getFastConnectProviderService(getFastConnectProviderServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderService.");
            const pathParams = {
                "{providerServiceId}": getFastConnectProviderServiceRequest.providerServiceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fastConnectProviderServices/{providerServiceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getFastConnectProviderServiceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fastConnectProviderService",
                    bodyModel: "model.FastConnectProviderService",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified provider service key's information. Use this operation to validate a
     * provider service key. An invalid key returns a 404 error.
     *
     * @param GetFastConnectProviderServiceKeyRequest
     * @return GetFastConnectProviderServiceKeyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetFastConnectProviderServiceKey.ts.html |here} to see how to use GetFastConnectProviderServiceKey API.
     */
    getFastConnectProviderServiceKey(getFastConnectProviderServiceKeyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getFastConnectProviderServiceKey.");
            const pathParams = {
                "{providerServiceId}": getFastConnectProviderServiceKeyRequest.providerServiceId,
                "{providerServiceKeyName}": getFastConnectProviderServiceKeyRequest.providerServiceKeyName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fastConnectProviderServices/{providerServiceId}/providerServiceKeys/{providerServiceKeyName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getFastConnectProviderServiceKeyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fastConnectProviderServiceKey",
                    bodyModel: "model.FastConnectProviderServiceKey",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified IPSec connection's basic information, including the static routes for the
     * on-premises router. If you want the status of the connection (whether it's up or down), use
     * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
     *
     * @param GetIPSecConnectionRequest
     * @return GetIPSecConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIPSecConnection.ts.html |here} to see how to use GetIPSecConnection API.
     */
    getIPSecConnection(getIPSecConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnection.");
            const pathParams = {
                "{ipscId}": getIPSecConnectionRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIPSecConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnection",
                    bodyModel: "model.IPSecConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deprecated. To get tunnel information, instead use:
     * <p>
     * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}
     * * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}
     *
     * @param GetIPSecConnectionDeviceConfigRequest
     * @return GetIPSecConnectionDeviceConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIPSecConnectionDeviceConfig.ts.html |here} to see how to use GetIPSecConnectionDeviceConfig API.
     */
    getIPSecConnectionDeviceConfig(getIPSecConnectionDeviceConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceConfig.");
            const pathParams = {
                "{ipscId}": getIPSecConnectionDeviceConfigRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/deviceConfig",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIPSecConnectionDeviceConfigRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionDeviceConfig",
                    bodyModel: "model.IPSecConnectionDeviceConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deprecated. To get the tunnel status, instead use
     * {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
     *
     * @param GetIPSecConnectionDeviceStatusRequest
     * @return GetIPSecConnectionDeviceStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIPSecConnectionDeviceStatus.ts.html |here} to see how to use GetIPSecConnectionDeviceStatus API.
     */
    getIPSecConnectionDeviceStatus(getIPSecConnectionDeviceStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionDeviceStatus.");
            const pathParams = {
                "{ipscId}": getIPSecConnectionDeviceStatusRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/deviceStatus",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIPSecConnectionDeviceStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionDeviceStatus",
                    bodyModel: "model.IPSecConnectionDeviceStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified tunnel's information. The resulting object does not include the tunnel's
     * shared secret (pre-shared key). To retrieve that, use
     * {@link #getIPSecConnectionTunnelSharedSecret(GetIPSecConnectionTunnelSharedSecretRequest) getIPSecConnectionTunnelSharedSecret}.
     *
     * @param GetIPSecConnectionTunnelRequest
     * @return GetIPSecConnectionTunnelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIPSecConnectionTunnel.ts.html |here} to see how to use GetIPSecConnectionTunnel API.
     */
    getIPSecConnectionTunnel(getIPSecConnectionTunnelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionTunnel.");
            const pathParams = {
                "{ipscId}": getIPSecConnectionTunnelRequest.ipscId,
                "{tunnelId}": getIPSecConnectionTunnelRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIPSecConnectionTunnelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionTunnel",
                    bodyModel: "model.IPSecConnectionTunnel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified tunnel's shared secret (pre-shared key). To get other information
     * about the tunnel, use {@link #getIPSecConnectionTunnel(GetIPSecConnectionTunnelRequest) getIPSecConnectionTunnel}.
     *
     * @param GetIPSecConnectionTunnelSharedSecretRequest
     * @return GetIPSecConnectionTunnelSharedSecretResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use GetIPSecConnectionTunnelSharedSecret API.
     */
    getIPSecConnectionTunnelSharedSecret(getIPSecConnectionTunnelSharedSecretRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIPSecConnectionTunnelSharedSecret.");
            const pathParams = {
                "{ipscId}": getIPSecConnectionTunnelSharedSecretRequest.ipscId,
                "{tunnelId}": getIPSecConnectionTunnelSharedSecretRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIPSecConnectionTunnelSharedSecretRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionTunnelSharedSecret",
                    bodyModel: "model.IPSecConnectionTunnelSharedSecret",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified internet gateway's information.
     * @param GetInternetGatewayRequest
     * @return GetInternetGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetInternetGateway.ts.html |here} to see how to use GetInternetGateway API.
     */
    getInternetGateway(getInternetGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getInternetGateway.");
            const pathParams = {
                "{igId}": getInternetGatewayRequest.igId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways/{igId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getInternetGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internetGateway",
                    bodyModel: "model.InternetGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Renders a set of CPE configuration content for the specified IPSec connection (for all the
  * tunnels in the connection). The content helps a network engineer configure the actual CPE
  * device (for example, a hardware router) that the specified IPSec connection terminates on.
  * <p>
  The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
  * {@link Cpe} used by the specified {@link IPSecConnection}
  * must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
  * optionally includes answers that the customer provides (see
  * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
  * merged with a template of other information specific to the CPE device type.
  * <p>
  The operation returns configuration information for all tunnels in the single specified
  * {@link IPSecConnection} object. Here are other similar
  * operations:
  * <p>
    * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
  *   returns CPE configuration content for a specific tunnel within an IPSec connection.
  *   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
  *   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
  *
       * @param GetIpsecCpeDeviceConfigContentRequest
       * @return GetIpsecCpeDeviceConfigContentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIpsecCpeDeviceConfigContent.ts.html |here} to see how to use GetIpsecCpeDeviceConfigContent API.
       */
    getIpsecCpeDeviceConfigContent(getIpsecCpeDeviceConfigContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIpsecCpeDeviceConfigContent.");
            const pathParams = {
                "{ipscId}": getIpsecCpeDeviceConfigContentRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIpsecCpeDeviceConfigContentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/cpeConfigContent",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIpsecCpeDeviceConfigContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified IPv6. You must specify the object's [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
     * Alternatively, you can get the object by using
     * {@link #listIpv6s(ListIpv6sRequest) listIpv6s}
     * with the IPv6 address (for example, 2001:0db8:0123:1111:98fe:dcba:9876:4321) and subnet OCID.
     *
     * @param GetIpv6Request
     * @return GetIpv6Response
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetIpv6.ts.html |here} to see how to use GetIpv6 API.
     */
    getIpv6(getIpv6Request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getIpv6.");
            const pathParams = {
                "{ipv6Id}": getIpv6Request.ipv6Id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getIpv6Request.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipv6/{ipv6Id}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getIpv6Request.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ipv6",
                    bodyModel: "model.Ipv6",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified local peering gateway's information.
     * @param GetLocalPeeringGatewayRequest
     * @return GetLocalPeeringGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetLocalPeeringGateway.ts.html |here} to see how to use GetLocalPeeringGateway API.
     */
    getLocalPeeringGateway(getLocalPeeringGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getLocalPeeringGateway.");
            const pathParams = {
                "{localPeeringGatewayId}": getLocalPeeringGatewayRequest.localPeeringGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways/{localPeeringGatewayId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLocalPeeringGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "localPeeringGateway",
                    bodyModel: "model.LocalPeeringGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified NAT gateway's information.
     * @param GetNatGatewayRequest
     * @return GetNatGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetNatGateway.ts.html |here} to see how to use GetNatGateway API.
     */
    getNatGateway(getNatGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getNatGateway.");
            const pathParams = {
                "{natGatewayId}": getNatGatewayRequest.natGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways/{natGatewayId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNatGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "natGateway",
                    bodyModel: "model.NatGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified network security group's information.
  * <p>
  To list the VNICs in an NSG, see
  * {@link #listNetworkSecurityGroupVnics(ListNetworkSecurityGroupVnicsRequest) listNetworkSecurityGroupVnics}.
  * <p>
  To list the security rules in an NSG, see
  * {@link #listNetworkSecurityGroupSecurityRules(ListNetworkSecurityGroupSecurityRulesRequest) listNetworkSecurityGroupSecurityRules}.
  *
       * @param GetNetworkSecurityGroupRequest
       * @return GetNetworkSecurityGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetNetworkSecurityGroup.ts.html |here} to see how to use GetNetworkSecurityGroup API.
       */
    getNetworkSecurityGroup(getNetworkSecurityGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getNetworkSecurityGroup.");
            const pathParams = {
                "{networkSecurityGroupId}": getNetworkSecurityGroupRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNetworkSecurityGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSecurityGroup",
                    bodyModel: "model.NetworkSecurityGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a virtual networking topology for the current region.
     * @param GetNetworkingTopologyRequest
     * @return GetNetworkingTopologyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetNetworkingTopology.ts.html |here} to see how to use GetNetworkingTopology API.
     */
    getNetworkingTopology(getNetworkingTopologyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getNetworkingTopology.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": getNetworkingTopologyRequest.compartmentId,
                "accessLevel": getNetworkingTopologyRequest.accessLevel,
                "queryCompartmentSubtree": getNetworkingTopologyRequest.queryCompartmentSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getNetworkingTopologyRequest.opcRequestId,
                "if-none-match": getNetworkingTopologyRequest.ifNoneMatch,
                "cache-control": getNetworkingTopologyRequest.cacheControl
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkingTopology",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNetworkingTopologyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkingTopology",
                    bodyModel: "model.NetworkingTopology",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified private IP. You must specify the object's OCID.
     * Alternatively, you can get the object by using
     * {@link #listPrivateIps(ListPrivateIpsRequest) listPrivateIps}
     * with the private IP address (for example, 10.0.3.3) and subnet OCID.
     *
     * @param GetPrivateIpRequest
     * @return GetPrivateIpResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetPrivateIp.ts.html |here} to see how to use GetPrivateIp API.
     */
    getPrivateIp(getPrivateIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getPrivateIp.");
            const pathParams = {
                "{privateIpId}": getPrivateIpRequest.privateIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/privateIps/{privateIpId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPrivateIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "privateIp",
                    bodyModel: "model.PrivateIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified public IP. You must specify the object's OCID.
  * <p>
  Alternatively, you can get the object by using {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}
  * with the public IP address (for example, 203.0.113.2).
  * <p>
  Or you can use {@link #getPublicIpByPrivateIpId(GetPublicIpByPrivateIpIdRequest) getPublicIpByPrivateIpId}
  * with the OCID of the private IP that the public IP is assigned to.
  * <p>
  **Note:** If you're fetching a reserved public IP that is in the process of being
  * moved to a different private IP, the service returns the public IP object with
  * `lifecycleState` = ASSIGNING and `assignedEntityId` = OCID of the target private IP.
  *
       * @param GetPublicIpRequest
       * @return GetPublicIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetPublicIp.ts.html |here} to see how to use GetPublicIp API.
       */
    getPublicIp(getPublicIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getPublicIp.");
            const pathParams = {
                "{publicIpId}": getPublicIpRequest.publicIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/{publicIpId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPublicIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIp",
                    bodyModel: "model.PublicIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the public IP based on the public IP address (for example, 203.0.113.2).
     * <p>
     **Note:** If you're fetching a reserved public IP that is in the process of being
     * moved to a different private IP, the service returns the public IP object with
     * `lifecycleState` = ASSIGNING and `assignedEntityId` = OCID of the target private IP.
     *
     * @param GetPublicIpByIpAddressRequest
     * @return GetPublicIpByIpAddressResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetPublicIpByIpAddress.ts.html |here} to see how to use GetPublicIpByIpAddress API.
     */
    getPublicIpByIpAddress(getPublicIpByIpAddressRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByIpAddress.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/actions/getByIpAddress",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(getPublicIpByIpAddressRequest.getPublicIpByIpAddressDetails, "GetPublicIpByIpAddressDetails", models.GetPublicIpByIpAddressDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPublicIpByIpAddressRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIp",
                    bodyModel: "model.PublicIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the public IP assigned to the specified private IP. You must specify the OCID
     * of the private IP. If no public IP is assigned, a 404 is returned.
     * <p>
     **Note:** If you're fetching a reserved public IP that is in the process of being
     * moved to a different private IP, and you provide the OCID of the original private
     * IP, this operation returns a 404. If you instead provide the OCID of the target
     * private IP, or if you instead call
     * {@link #getPublicIp(GetPublicIpRequest) getPublicIp} or
     * {@link #getPublicIpByIpAddress(GetPublicIpByIpAddressRequest) getPublicIpByIpAddress}, the
     * service returns the public IP object with `lifecycleState` = ASSIGNING and
     * `assignedEntityId` = OCID of the target private IP.
     *
     * @param GetPublicIpByPrivateIpIdRequest
     * @return GetPublicIpByPrivateIpIdResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetPublicIpByPrivateIpId.ts.html |here} to see how to use GetPublicIpByPrivateIpId API.
     */
    getPublicIpByPrivateIpId(getPublicIpByPrivateIpIdRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpByPrivateIpId.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/actions/getByPrivateIpId",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(getPublicIpByPrivateIpIdRequest.getPublicIpByPrivateIpIdDetails, "GetPublicIpByPrivateIpIdDetails", models.GetPublicIpByPrivateIpIdDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPublicIpByPrivateIpIdRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIp",
                    bodyModel: "model.PublicIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified `PublicIpPool` object. You must specify the object's [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
     *
     * @param GetPublicIpPoolRequest
     * @return GetPublicIpPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetPublicIpPool.ts.html |here} to see how to use GetPublicIpPool API.
     */
    getPublicIpPool(getPublicIpPoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getPublicIpPool.");
            const pathParams = {
                "{publicIpPoolId}": getPublicIpPoolRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPublicIpPoolRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPublicIpPoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPool",
                    bodyModel: "model.PublicIpPool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the specified remote peering connection's information.
     *
     * @param GetRemotePeeringConnectionRequest
     * @return GetRemotePeeringConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetRemotePeeringConnection.ts.html |here} to see how to use GetRemotePeeringConnection API.
     */
    getRemotePeeringConnection(getRemotePeeringConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getRemotePeeringConnection.");
            const pathParams = {
                "{remotePeeringConnectionId}": getRemotePeeringConnectionRequest.remotePeeringConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections/{remotePeeringConnectionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRemotePeeringConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "remotePeeringConnection",
                    bodyModel: "model.RemotePeeringConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified route table's information.
     * @param GetRouteTableRequest
     * @return GetRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetRouteTable.ts.html |here} to see how to use GetRouteTable API.
     */
    getRouteTable(getRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getRouteTable.");
            const pathParams = {
                "{rtId}": getRouteTableRequest.rtId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables/{rtId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "routeTable",
                    bodyModel: "model.RouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified security list's information.
     * @param GetSecurityListRequest
     * @return GetSecurityListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetSecurityList.ts.html |here} to see how to use GetSecurityList API.
     */
    getSecurityList(getSecurityListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getSecurityList.");
            const pathParams = {
                "{securityListId}": getSecurityListRequest.securityListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists/{securityListId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSecurityListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityList",
                    bodyModel: "model.SecurityList",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified {@link Service} object.
     *
     * @param GetServiceRequest
     * @return GetServiceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetService.ts.html |here} to see how to use GetService API.
     */
    getService(getServiceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getService.");
            const pathParams = {
                "{serviceId}": getServiceRequest.serviceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/services/{serviceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getServiceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "service",
                    bodyModel: "model.Service",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified service gateway's information.
     * @param GetServiceGatewayRequest
     * @return GetServiceGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetServiceGateway.ts.html |here} to see how to use GetServiceGateway API.
     */
    getServiceGateway(getServiceGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getServiceGateway.");
            const pathParams = {
                "{serviceGatewayId}": getServiceGatewayRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getServiceGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "serviceGateway",
                    bodyModel: "model.ServiceGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified subnet's information.
     * @param GetSubnetRequest
     * @return GetSubnetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetSubnet.ts.html |here} to see how to use GetSubnet API.
     */
    getSubnet(getSubnetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getSubnet.");
            const pathParams = {
                "{subnetId}": getSubnetRequest.subnetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets/{subnetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSubnetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "subnet",
                    bodyModel: "model.Subnet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the set of CPE configuration answers for the tunnel, which the customer provided in
     * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}.
     * To get the full set of content for the tunnel (any answers merged with the template of other
     * information specific to the CPE device type), use
     * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}.
     *
     * @param GetTunnelCpeDeviceConfigRequest
     * @return GetTunnelCpeDeviceConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetTunnelCpeDeviceConfig.ts.html |here} to see how to use GetTunnelCpeDeviceConfig API.
     */
    getTunnelCpeDeviceConfig(getTunnelCpeDeviceConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfig.");
            const pathParams = {
                "{ipscId}": getTunnelCpeDeviceConfigRequest.ipscId,
                "{tunnelId}": getTunnelCpeDeviceConfigRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTunnelCpeDeviceConfigRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTunnelCpeDeviceConfigRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tunnelCpeDeviceConfig",
                    bodyModel: "model.TunnelCpeDeviceConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Renders a set of CPE configuration content for the specified IPSec tunnel. The content helps a
  * network engineer configure the actual CPE device (for example, a hardware router) that the specified
  * IPSec tunnel terminates on.
  * <p>
  The rendered content is specific to the type of CPE device (for example, Cisco ASA). Therefore the
  * {@link Cpe} used by the specified {@link IPSecConnection}
  * must have the CPE's device type specified by the `cpeDeviceShapeId` attribute. The content
  * optionally includes answers that the customer provides (see
  * {@link #updateTunnelCpeDeviceConfig(UpdateTunnelCpeDeviceConfigRequest) updateTunnelCpeDeviceConfig}),
  * merged with a template of other information specific to the CPE device type.
  * <p>
  The operation returns configuration information for only the specified IPSec tunnel.
  * Here are other similar operations:
  * <p>
    * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
  *   returns CPE configuration content for all tunnels in a single IPSec connection.
  *   * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
  *   returns CPE configuration content for *all* IPSec connections that use a specific CPE.
  *
       * @param GetTunnelCpeDeviceConfigContentRequest
       * @return GetTunnelCpeDeviceConfigContentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetTunnelCpeDeviceConfigContent.ts.html |here} to see how to use GetTunnelCpeDeviceConfigContent API.
       */
    getTunnelCpeDeviceConfigContent(getTunnelCpeDeviceConfigContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getTunnelCpeDeviceConfigContent.");
            const pathParams = {
                "{ipscId}": getTunnelCpeDeviceConfigContentRequest.ipscId,
                "{tunnelId}": getTunnelCpeDeviceConfigContentRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTunnelCpeDeviceConfigContentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTunnelCpeDeviceConfigContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the DRG upgrade status. The status can be not updated, in progress, or updated. Also indicates how much of the upgrade is completed.
     *
     * @param GetUpgradeStatusRequest
     * @return GetUpgradeStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetUpgradeStatus.ts.html |here} to see how to use GetUpgradeStatus API.
     */
    getUpgradeStatus(getUpgradeStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getUpgradeStatus.");
            const pathParams = {
                "{drgId}": getUpgradeStatusRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getUpgradeStatusRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}/actions/upgradeStatus",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getUpgradeStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "upgradeStatus",
                    bodyModel: "model.UpgradeStatus",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified VCN's information.
     * @param GetVcnRequest
     * @return GetVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVcn.ts.html |here} to see how to use GetVcn API.
     */
    getVcn(getVcnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVcn.");
            const pathParams = {
                "{vcnId}": getVcnRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVcnRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vcn",
                    bodyModel: "model.Vcn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the associated DNS resolver information with a vcn
     * @param GetVcnDnsResolverAssociationRequest
     * @return GetVcnDnsResolverAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVcnDnsResolverAssociation.ts.html |here} to see how to use GetVcnDnsResolverAssociation API.
     */
    getVcnDnsResolverAssociation(getVcnDnsResolverAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVcnDnsResolverAssociation.");
            const pathParams = {
                "{vcnId}": getVcnDnsResolverAssociationRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVcnDnsResolverAssociationRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/dnsResolverAssociation",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVcnDnsResolverAssociationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vcnDnsResolverAssociation",
                    bodyModel: "model.VcnDnsResolverAssociation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a virtual network topology for a given VCN.
     * @param GetVcnTopologyRequest
     * @return GetVcnTopologyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVcnTopology.ts.html |here} to see how to use GetVcnTopology API.
     */
    getVcnTopology(getVcnTopologyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVcnTopology.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": getVcnTopologyRequest.compartmentId,
                "accessLevel": getVcnTopologyRequest.accessLevel,
                "queryCompartmentSubtree": getVcnTopologyRequest.queryCompartmentSubtree,
                "vcnId": getVcnTopologyRequest.vcnId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVcnTopologyRequest.opcRequestId,
                "if-none-match": getVcnTopologyRequest.ifNoneMatch,
                "cache-control": getVcnTopologyRequest.cacheControl
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcnTopology",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVcnTopologyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vcnTopology",
                    bodyModel: "model.VcnTopology",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified virtual circuit's information.
     * @param GetVirtualCircuitRequest
     * @return GetVirtualCircuitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVirtualCircuit.ts.html |here} to see how to use GetVirtualCircuit API.
     */
    getVirtualCircuit(getVirtualCircuitRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVirtualCircuit.");
            const pathParams = {
                "{virtualCircuitId}": getVirtualCircuitRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVirtualCircuitRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualCircuit",
                    bodyModel: "model.VirtualCircuit",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified VLAN's information.
     * @param GetVlanRequest
     * @return GetVlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVlan.ts.html |here} to see how to use GetVlan API.
     */
    getVlan(getVlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVlan.");
            const pathParams = {
                "{vlanId}": getVlanRequest.vlanId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getVlanRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans/{vlanId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVlanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vlan",
                    bodyModel: "model.Vlan",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the information for the specified virtual network interface card (VNIC).
     * You can get the VNIC OCID from the
     * {@link #listVnicAttachments(ListVnicAttachmentsRequest) listVnicAttachments}
     * operation.
     *
     * @param GetVnicRequest
     * @return GetVnicResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/GetVnic.ts.html |here} to see how to use GetVnic API.
     */
    getVnic(getVnicRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#getVnic.");
            const pathParams = {
                "{vnicId}": getVnicRequest.vnicId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnics/{vnicId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getVnicRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vnic",
                    bodyModel: "model.Vnic",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the regions that support remote VCN peering (which is peering across regions).
     * For more information, see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
     *
     * @param ListAllowedPeerRegionsForRemotePeeringRequest
     * @return ListAllowedPeerRegionsForRemotePeeringResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListAllowedPeerRegionsForRemotePeering.ts.html |here} to see how to use ListAllowedPeerRegionsForRemotePeering API.
     */
    listAllowedPeerRegionsForRemotePeering(listAllowedPeerRegionsForRemotePeeringRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listAllowedPeerRegionsForRemotePeering.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/allowedPeerRegionsForRemotePeering",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAllowedPeerRegionsForRemotePeeringRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PeerRegionForRemotePeering[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the subranges of a BYOIP CIDR block currently allocated to an IP pool.
     * Each `ByoipAllocatedRange` object also lists the IP pool where it is allocated.
     *
     * @param ListByoipAllocatedRangesRequest
     * @return ListByoipAllocatedRangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListByoipAllocatedRanges.ts.html |here} to see how to use ListByoipAllocatedRanges API.
     */
    listByoipAllocatedRanges(listByoipAllocatedRangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listByoipAllocatedRanges.");
            const pathParams = {
                "{byoipRangeId}": listByoipAllocatedRangesRequest.byoipRangeId
            };
            const queryParams = {
                "limit": listByoipAllocatedRangesRequest.limit,
                "page": listByoipAllocatedRangesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listByoipAllocatedRangesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}/byoipAllocatedRanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listByoipAllocatedRangesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "byoipAllocatedRangeCollection",
                    bodyModel: "model.ByoipAllocatedRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the `ByoipRange` resources in the specified compartment.
     * You can filter the list using query parameters.
     *
     * @param ListByoipRangesRequest
     * @return ListByoipRangesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListByoipRanges.ts.html |here} to see how to use ListByoipRanges API.
     */
    listByoipRanges(listByoipRangesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listByoipRanges.");
            const pathParams = {};
            const queryParams = {
                "limit": listByoipRangesRequest.limit,
                "page": listByoipRangesRequest.page,
                "displayName": listByoipRangesRequest.displayName,
                "lifecycleState": listByoipRangesRequest.lifecycleState,
                "sortBy": listByoipRangesRequest.sortBy,
                "sortOrder": listByoipRangesRequest.sortOrder,
                "compartmentId": listByoipRangesRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listByoipRangesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listByoipRangesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "byoipRangeCollection",
                    bodyModel: "model.ByoipRangeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the CPE device types that the Networking service provides CPE configuration
  * content for (example: Cisco ASA). The content helps a network engineer configure
  * the actual CPE device represented by a {@link Cpe} object.
  * <p>
  If you want to generate CPE configuration content for one of the returned CPE device types,
  * ensure that the {@link Cpe} object's `cpeDeviceShapeId` attribute is set
  * to the CPE device type's [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) (returned by this operation).
  * <p>
  For information about generating CPE configuration content, see these operations:
  * <p>
    * {@link #getCpeDeviceConfigContent(GetCpeDeviceConfigContentRequest) getCpeDeviceConfigContent}
  *   * {@link #getIpsecCpeDeviceConfigContent(GetIpsecCpeDeviceConfigContentRequest) getIpsecCpeDeviceConfigContent}
  *   * {@link #getTunnelCpeDeviceConfigContent(GetTunnelCpeDeviceConfigContentRequest) getTunnelCpeDeviceConfigContent}
  *
       * @param ListCpeDeviceShapesRequest
       * @return ListCpeDeviceShapesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCpeDeviceShapes.ts.html |here} to see how to use ListCpeDeviceShapes API.
       */
    listCpeDeviceShapes(listCpeDeviceShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCpeDeviceShapes.");
            const pathParams = {};
            const queryParams = {
                "limit": listCpeDeviceShapesRequest.limit,
                "page": listCpeDeviceShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCpeDeviceShapesRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpeDeviceShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCpeDeviceShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CpeDeviceShapeSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CpeDeviceShapeSummary objects
     * contained in responses from the listCpeDeviceShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCpeDeviceShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listCpeDeviceShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCpeDeviceShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCpeDeviceShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCpeDeviceShapes(req));
    }
    /**
     * Lists the customer-premises equipment objects (CPEs) in the specified compartment.
     *
     * @param ListCpesRequest
     * @return ListCpesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCpes.ts.html |here} to see how to use ListCpes API.
     */
    listCpes(listCpesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCpes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCpesRequest.compartmentId,
                "limit": listCpesRequest.limit,
                "page": listCpesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCpesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Cpe[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Cpe objects
     * contained in responses from the listCpes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCpes(request) {
        return oci_common_1.paginateRecords(request, req => this.listCpes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCpes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCpesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCpes(req));
    }
    /**
     * Lists the cross-connect groups in the specified compartment.
     *
     * @param ListCrossConnectGroupsRequest
     * @return ListCrossConnectGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCrossConnectGroups.ts.html |here} to see how to use ListCrossConnectGroups API.
     */
    listCrossConnectGroups(listCrossConnectGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectGroups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCrossConnectGroupsRequest.compartmentId,
                "limit": listCrossConnectGroupsRequest.limit,
                "page": listCrossConnectGroupsRequest.page,
                "displayName": listCrossConnectGroupsRequest.displayName,
                "sortBy": listCrossConnectGroupsRequest.sortBy,
                "sortOrder": listCrossConnectGroupsRequest.sortOrder,
                "lifecycleState": listCrossConnectGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCrossConnectGroupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CrossConnectGroup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CrossConnectGroup objects
     * contained in responses from the listCrossConnectGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnectGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listCrossConnectGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCrossConnectGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnectGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCrossConnectGroups(req));
    }
    /**
     * Lists the available FastConnect locations for cross-connect installation. You need
     * this information so you can specify your desired location when you create a cross-connect.
     *
     * @param ListCrossConnectLocationsRequest
     * @return ListCrossConnectLocationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCrossConnectLocations.ts.html |here} to see how to use ListCrossConnectLocations API.
     */
    listCrossConnectLocations(listCrossConnectLocationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectLocations.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCrossConnectLocationsRequest.compartmentId,
                "limit": listCrossConnectLocationsRequest.limit,
                "page": listCrossConnectLocationsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectLocations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCrossConnectLocationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CrossConnectLocation[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CrossConnectLocation objects
     * contained in responses from the listCrossConnectLocations operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnectLocations(request) {
        return oci_common_1.paginateRecords(request, req => this.listCrossConnectLocations(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCrossConnectLocations operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnectLocationsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCrossConnectLocations(req));
    }
    /**
     * Lists the Cross Connect mapping Details for the specified
     * virtual circuit.
     *
     * @param ListCrossConnectMappingsRequest
     * @return ListCrossConnectMappingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCrossConnectMappings.ts.html |here} to see how to use ListCrossConnectMappings API.
     */
    listCrossConnectMappings(listCrossConnectMappingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnectMappings.");
            const pathParams = {
                "{virtualCircuitId}": listCrossConnectMappingsRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listCrossConnectMappingsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}/crossConnectMappings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCrossConnectMappingsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnectMappingDetailsCollection",
                    bodyModel: "model.CrossConnectMappingDetailsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the cross-connects in the specified compartment. You can filter the list
     * by specifying the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of a cross-connect group.
     *
     * @param ListCrossConnectsRequest
     * @return ListCrossConnectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCrossConnects.ts.html |here} to see how to use ListCrossConnects API.
     */
    listCrossConnects(listCrossConnectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCrossConnects.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCrossConnectsRequest.compartmentId,
                "crossConnectGroupId": listCrossConnectsRequest.crossConnectGroupId,
                "limit": listCrossConnectsRequest.limit,
                "page": listCrossConnectsRequest.page,
                "displayName": listCrossConnectsRequest.displayName,
                "sortBy": listCrossConnectsRequest.sortBy,
                "sortOrder": listCrossConnectsRequest.sortOrder,
                "lifecycleState": listCrossConnectsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCrossConnectsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CrossConnect[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CrossConnect objects
     * contained in responses from the listCrossConnects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnects(request) {
        return oci_common_1.paginateRecords(request, req => this.listCrossConnects(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCrossConnects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossConnectsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCrossConnects(req));
    }
    /**
     * Lists the available port speeds for cross-connects. You need this information
     * so you can specify your desired port speed (that is, shape) when you create a
     * cross-connect.
     *
     * @param ListCrossconnectPortSpeedShapesRequest
     * @return ListCrossconnectPortSpeedShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListCrossconnectPortSpeedShapes.ts.html |here} to see how to use ListCrossconnectPortSpeedShapes API.
     */
    listCrossconnectPortSpeedShapes(listCrossconnectPortSpeedShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listCrossconnectPortSpeedShapes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listCrossconnectPortSpeedShapesRequest.compartmentId,
                "limit": listCrossconnectPortSpeedShapesRequest.limit,
                "page": listCrossconnectPortSpeedShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectPortSpeedShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listCrossconnectPortSpeedShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "CrossConnectPortSpeedShape[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.CrossConnectPortSpeedShape objects
     * contained in responses from the listCrossconnectPortSpeedShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossconnectPortSpeedShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listCrossconnectPortSpeedShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listCrossconnectPortSpeedShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllCrossconnectPortSpeedShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listCrossconnectPortSpeedShapes(req));
    }
    /**
     * Lists the sets of DHCP options in the specified VCN and specified compartment.
     * If the VCN ID is not provided, then the list includes the sets of DHCP options from all VCNs in the specified compartment.
     * The response includes the default set of options that automatically comes with each VCN,
     * plus any other sets you've created.
     *
     * @param ListDhcpOptionsRequest
     * @return ListDhcpOptionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDhcpOptions.ts.html |here} to see how to use ListDhcpOptions API.
     */
    listDhcpOptions(listDhcpOptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDhcpOptions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDhcpOptionsRequest.compartmentId,
                "vcnId": listDhcpOptionsRequest.vcnId,
                "limit": listDhcpOptionsRequest.limit,
                "page": listDhcpOptionsRequest.page,
                "displayName": listDhcpOptionsRequest.displayName,
                "sortBy": listDhcpOptionsRequest.sortBy,
                "sortOrder": listDhcpOptionsRequest.sortOrder,
                "lifecycleState": listDhcpOptionsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDhcpOptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DhcpOptions[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DhcpOptions objects
     * contained in responses from the listDhcpOptions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDhcpOptions(request) {
        return oci_common_1.paginateRecords(request, req => this.listDhcpOptions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDhcpOptions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDhcpOptionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDhcpOptions(req));
    }
    /**
       * Lists the `DrgAttachment` resource for the specified compartment. You can filter the
  * results by DRG, attached network, attachment type, DRG route table or
  * VCN route table.
  * <p>
  The LIST API lists DRG attachments by attachment type. It will default to list VCN attachments,
  * but you may request to list ALL attachments of ALL types.
  *
       * @param ListDrgAttachmentsRequest
       * @return ListDrgAttachmentsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgAttachments.ts.html |here} to see how to use ListDrgAttachments API.
       */
    listDrgAttachments(listDrgAttachmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgAttachments.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDrgAttachmentsRequest.compartmentId,
                "vcnId": listDrgAttachmentsRequest.vcnId,
                "drgId": listDrgAttachmentsRequest.drgId,
                "limit": listDrgAttachmentsRequest.limit,
                "page": listDrgAttachmentsRequest.page,
                "networkId": listDrgAttachmentsRequest.networkId,
                "attachmentType": listDrgAttachmentsRequest.attachmentType,
                "drgRouteTableId": listDrgAttachmentsRequest.drgRouteTableId,
                "displayName": listDrgAttachmentsRequest.displayName,
                "sortBy": listDrgAttachmentsRequest.sortBy,
                "sortOrder": listDrgAttachmentsRequest.sortOrder,
                "lifecycleState": listDrgAttachmentsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgAttachmentsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgAttachment[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgAttachment objects
     * contained in responses from the listDrgAttachments operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgAttachments(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgAttachments(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgAttachments operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgAttachmentsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgAttachments(req));
    }
    /**
     * Lists the statements for the specified route distribution.
     * @param ListDrgRouteDistributionStatementsRequest
     * @return ListDrgRouteDistributionStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgRouteDistributionStatements.ts.html |here} to see how to use ListDrgRouteDistributionStatements API.
     */
    listDrgRouteDistributionStatements(listDrgRouteDistributionStatementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteDistributionStatements.");
            const pathParams = {
                "{drgRouteDistributionId}": listDrgRouteDistributionStatementsRequest.drgRouteDistributionId
            };
            const queryParams = {
                "limit": listDrgRouteDistributionStatementsRequest.limit,
                "page": listDrgRouteDistributionStatementsRequest.page,
                "sortBy": listDrgRouteDistributionStatementsRequest.sortBy,
                "sortOrder": listDrgRouteDistributionStatementsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}/drgRouteDistributionStatements",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgRouteDistributionStatementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteDistributionStatement[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgRouteDistributionStatement objects
     * contained in responses from the listDrgRouteDistributionStatements operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteDistributionStatements(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgRouteDistributionStatements(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributionStatements operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteDistributionStatementsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgRouteDistributionStatements(req));
    }
    /**
       * Lists the route distributions in the specified DRG.
  * <p>
  To retrieve the statements in a distribution, use the
  * ListDrgRouteDistributionStatements operation.
  *
       * @param ListDrgRouteDistributionsRequest
       * @return ListDrgRouteDistributionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgRouteDistributions.ts.html |here} to see how to use ListDrgRouteDistributions API.
       */
    listDrgRouteDistributions(listDrgRouteDistributionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteDistributions.");
            const pathParams = {};
            const queryParams = {
                "drgId": listDrgRouteDistributionsRequest.drgId,
                "limit": listDrgRouteDistributionsRequest.limit,
                "page": listDrgRouteDistributionsRequest.page,
                "displayName": listDrgRouteDistributionsRequest.displayName,
                "sortBy": listDrgRouteDistributionsRequest.sortBy,
                "sortOrder": listDrgRouteDistributionsRequest.sortOrder,
                "lifecycleState": listDrgRouteDistributionsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgRouteDistributionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteDistribution[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgRouteDistribution objects
     * contained in responses from the listDrgRouteDistributions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteDistributions(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgRouteDistributions(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgRouteDistributions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteDistributionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgRouteDistributions(req));
    }
    /**
     * Lists the route rules in the specified DRG route table.
     * @param ListDrgRouteRulesRequest
     * @return ListDrgRouteRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgRouteRules.ts.html |here} to see how to use ListDrgRouteRules API.
     */
    listDrgRouteRules(listDrgRouteRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteRules.");
            const pathParams = {
                "{drgRouteTableId}": listDrgRouteRulesRequest.drgRouteTableId
            };
            const queryParams = {
                "limit": listDrgRouteRulesRequest.limit,
                "page": listDrgRouteRulesRequest.page,
                "routeType": listDrgRouteRulesRequest.routeType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}/drgRouteRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgRouteRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteRule[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgRouteRule objects
     * contained in responses from the listDrgRouteRules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteRules(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgRouteRules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgRouteRules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteRulesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgRouteRules(req));
    }
    /**
       * Lists the DRG route tables for the specified DRG.
  * <p>
  Use the `ListDrgRouteRules` operation to retrieve the route rules in a table.
  *
       * @param ListDrgRouteTablesRequest
       * @return ListDrgRouteTablesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgRouteTables.ts.html |here} to see how to use ListDrgRouteTables API.
       */
    listDrgRouteTables(listDrgRouteTablesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgRouteTables.");
            const pathParams = {};
            const queryParams = {
                "drgId": listDrgRouteTablesRequest.drgId,
                "limit": listDrgRouteTablesRequest.limit,
                "page": listDrgRouteTablesRequest.page,
                "displayName": listDrgRouteTablesRequest.displayName,
                "sortBy": listDrgRouteTablesRequest.sortBy,
                "sortOrder": listDrgRouteTablesRequest.sortOrder,
                "importDrgRouteDistributionId": listDrgRouteTablesRequest.importDrgRouteDistributionId,
                "lifecycleState": listDrgRouteTablesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgRouteTablesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteTable[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.DrgRouteTable objects
     * contained in responses from the listDrgRouteTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteTables(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgRouteTables(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgRouteTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgRouteTablesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgRouteTables(req));
    }
    /**
     * Lists the DRGs in the specified compartment.
     *
     * @param ListDrgsRequest
     * @return ListDrgsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListDrgs.ts.html |here} to see how to use ListDrgs API.
     */
    listDrgs(listDrgsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listDrgs.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDrgsRequest.compartmentId,
                "limit": listDrgsRequest.limit,
                "page": listDrgsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDrgsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Drg[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Drg objects
     * contained in responses from the listDrgs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgs(request) {
        return oci_common_1.paginateRecords(request, req => this.listDrgs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listDrgs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllDrgsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listDrgs(req));
    }
    /**
       * Lists the service offerings from supported providers. You need this
  * information so you can specify your desired provider and service
  * offering when you create a virtual circuit.
  * <p>
  For the compartment ID, provide the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of your tenancy (the root compartment).
  * <p>
  For more information, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  *
       * @param ListFastConnectProviderServicesRequest
       * @return ListFastConnectProviderServicesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListFastConnectProviderServices.ts.html |here} to see how to use ListFastConnectProviderServices API.
       */
    listFastConnectProviderServices(listFastConnectProviderServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listFastConnectProviderServices.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listFastConnectProviderServicesRequest.compartmentId,
                "limit": listFastConnectProviderServicesRequest.limit,
                "page": listFastConnectProviderServicesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fastConnectProviderServices",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listFastConnectProviderServicesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "FastConnectProviderService[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.FastConnectProviderService objects
     * contained in responses from the listFastConnectProviderServices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastConnectProviderServices(request) {
        return oci_common_1.paginateRecords(request, req => this.listFastConnectProviderServices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderServices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastConnectProviderServicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listFastConnectProviderServices(req));
    }
    /**
       * Gets the list of available virtual circuit bandwidth levels for a provider.
  * You need this information so you can specify your desired bandwidth level (shape) when you create a virtual circuit.
  * <p>
  For more information about virtual circuits, see [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  *
       * @param ListFastConnectProviderVirtualCircuitBandwidthShapesRequest
       * @return ListFastConnectProviderVirtualCircuitBandwidthShapesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListFastConnectProviderVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListFastConnectProviderVirtualCircuitBandwidthShapes API.
       */
    listFastConnectProviderVirtualCircuitBandwidthShapes(listFastConnectProviderVirtualCircuitBandwidthShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listFastConnectProviderVirtualCircuitBandwidthShapes.");
            const pathParams = {
                "{providerServiceId}": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.providerServiceId
            };
            const queryParams = {
                "limit": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.limit,
                "page": listFastConnectProviderVirtualCircuitBandwidthShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listFastConnectProviderVirtualCircuitBandwidthShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VirtualCircuitBandwidthShape[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
     * contained in responses from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastConnectProviderVirtualCircuitBandwidthShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listFastConnectProviderVirtualCircuitBandwidthShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFastConnectProviderVirtualCircuitBandwidthShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFastConnectProviderVirtualCircuitBandwidthShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listFastConnectProviderVirtualCircuitBandwidthShapes(req));
    }
    /**
     * Lists the tunnel information for the specified IPSec connection.
     *
     * @param ListIPSecConnectionTunnelsRequest
     * @return ListIPSecConnectionTunnelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListIPSecConnectionTunnels.ts.html |here} to see how to use ListIPSecConnectionTunnels API.
     */
    listIPSecConnectionTunnels(listIPSecConnectionTunnelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnectionTunnels.");
            const pathParams = {
                "{ipscId}": listIPSecConnectionTunnelsRequest.ipscId
            };
            const queryParams = {
                "limit": listIPSecConnectionTunnelsRequest.limit,
                "page": listIPSecConnectionTunnelsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listIPSecConnectionTunnelsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "IPSecConnectionTunnel[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.IPSecConnectionTunnel objects
     * contained in responses from the listIPSecConnectionTunnels operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIPSecConnectionTunnels(request) {
        return oci_common_1.paginateRecords(request, req => this.listIPSecConnectionTunnels(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIPSecConnectionTunnels operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIPSecConnectionTunnelsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIPSecConnectionTunnels(req));
    }
    /**
     * Lists the IPSec connections for the specified compartment. You can filter the
     * results by DRG or CPE.
     *
     * @param ListIPSecConnectionsRequest
     * @return ListIPSecConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListIPSecConnections.ts.html |here} to see how to use ListIPSecConnections API.
     */
    listIPSecConnections(listIPSecConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listIPSecConnections.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listIPSecConnectionsRequest.compartmentId,
                "drgId": listIPSecConnectionsRequest.drgId,
                "cpeId": listIPSecConnectionsRequest.cpeId,
                "limit": listIPSecConnectionsRequest.limit,
                "page": listIPSecConnectionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listIPSecConnectionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "IPSecConnection[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.IPSecConnection objects
     * contained in responses from the listIPSecConnections operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIPSecConnections(request) {
        return oci_common_1.paginateRecords(request, req => this.listIPSecConnections(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIPSecConnections operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIPSecConnectionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIPSecConnections(req));
    }
    /**
     * Lists the internet gateways in the specified VCN and the specified compartment.
     * If the VCN ID is not provided, then the list includes the internet gateways from all VCNs in the specified compartment.
     *
     * @param ListInternetGatewaysRequest
     * @return ListInternetGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListInternetGateways.ts.html |here} to see how to use ListInternetGateways API.
     */
    listInternetGateways(listInternetGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listInternetGateways.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listInternetGatewaysRequest.compartmentId,
                "vcnId": listInternetGatewaysRequest.vcnId,
                "limit": listInternetGatewaysRequest.limit,
                "page": listInternetGatewaysRequest.page,
                "displayName": listInternetGatewaysRequest.displayName,
                "sortBy": listInternetGatewaysRequest.sortBy,
                "sortOrder": listInternetGatewaysRequest.sortOrder,
                "lifecycleState": listInternetGatewaysRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listInternetGatewaysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "InternetGateway[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.InternetGateway objects
     * contained in responses from the listInternetGateways operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInternetGateways(request) {
        return oci_common_1.paginateRecords(request, req => this.listInternetGateways(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listInternetGateways operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllInternetGatewaysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listInternetGateways(req));
    }
    /**
     * Lists the {@link Ipv6} objects based
     * on one of these filters:
     * <p>
     * Subnet OCID.
     *   * VNIC OCID.
     *   * Both IPv6 address and subnet OCID: This lets you get an `Ipv6` object based on its private
     *   IPv6 address (for example, 2001:0db8:0123:1111:abcd:ef01:2345:6789) and not its OCID. For comparison,
     *   {@link #getIpv6(GetIpv6Request) getIpv6} requires the OCID.
     *
     * @param ListIpv6sRequest
     * @return ListIpv6sResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListIpv6s.ts.html |here} to see how to use ListIpv6s API.
     */
    listIpv6s(listIpv6sRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listIpv6s.");
            const pathParams = {};
            const queryParams = {
                "limit": listIpv6sRequest.limit,
                "page": listIpv6sRequest.page,
                "ipAddress": listIpv6sRequest.ipAddress,
                "subnetId": listIpv6sRequest.subnetId,
                "vnicId": listIpv6sRequest.vnicId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listIpv6sRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipv6",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listIpv6sRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Ipv6[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Ipv6 objects
     * contained in responses from the listIpv6s operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIpv6s(request) {
        return oci_common_1.paginateRecords(request, req => this.listIpv6s(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listIpv6s operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllIpv6sResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listIpv6s(req));
    }
    /**
     * Lists the local peering gateways (LPGs) for the specified VCN and specified compartment.
     * If the VCN ID is not provided, then the list includes the LPGs from all VCNs in the specified compartment.
     *
     * @param ListLocalPeeringGatewaysRequest
     * @return ListLocalPeeringGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListLocalPeeringGateways.ts.html |here} to see how to use ListLocalPeeringGateways API.
     */
    listLocalPeeringGateways(listLocalPeeringGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listLocalPeeringGateways.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listLocalPeeringGatewaysRequest.compartmentId,
                "limit": listLocalPeeringGatewaysRequest.limit,
                "page": listLocalPeeringGatewaysRequest.page,
                "vcnId": listLocalPeeringGatewaysRequest.vcnId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLocalPeeringGatewaysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "LocalPeeringGateway[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.LocalPeeringGateway objects
     * contained in responses from the listLocalPeeringGateways operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllLocalPeeringGateways(request) {
        return oci_common_1.paginateRecords(request, req => this.listLocalPeeringGateways(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listLocalPeeringGateways operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllLocalPeeringGatewaysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listLocalPeeringGateways(req));
    }
    /**
     * Lists the NAT gateways in the specified compartment. You may optionally specify a VCN OCID
     * to filter the results by VCN.
     *
     * @param ListNatGatewaysRequest
     * @return ListNatGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListNatGateways.ts.html |here} to see how to use ListNatGateways API.
     */
    listNatGateways(listNatGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listNatGateways.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNatGatewaysRequest.compartmentId,
                "vcnId": listNatGatewaysRequest.vcnId,
                "limit": listNatGatewaysRequest.limit,
                "page": listNatGatewaysRequest.page,
                "displayName": listNatGatewaysRequest.displayName,
                "sortBy": listNatGatewaysRequest.sortBy,
                "sortOrder": listNatGatewaysRequest.sortOrder,
                "lifecycleState": listNatGatewaysRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listNatGatewaysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "NatGateway[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.NatGateway objects
     * contained in responses from the listNatGateways operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNatGateways(request) {
        return oci_common_1.paginateRecords(request, req => this.listNatGateways(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNatGateways operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNatGatewaysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNatGateways(req));
    }
    /**
     * Lists the security rules in the specified network security group.
     *
     * @param ListNetworkSecurityGroupSecurityRulesRequest
     * @return ListNetworkSecurityGroupSecurityRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use ListNetworkSecurityGroupSecurityRules API.
     */
    listNetworkSecurityGroupSecurityRules(listNetworkSecurityGroupSecurityRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroupSecurityRules.");
            const pathParams = {
                "{networkSecurityGroupId}": listNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
            };
            const queryParams = {
                "direction": listNetworkSecurityGroupSecurityRulesRequest.direction,
                "limit": listNetworkSecurityGroupSecurityRulesRequest.limit,
                "page": listNetworkSecurityGroupSecurityRulesRequest.page,
                "sortBy": listNetworkSecurityGroupSecurityRulesRequest.sortBy,
                "sortOrder": listNetworkSecurityGroupSecurityRulesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/securityRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listNetworkSecurityGroupSecurityRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "SecurityRule[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityRule objects
     * contained in responses from the listNetworkSecurityGroupSecurityRules operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroupSecurityRules(request) {
        return oci_common_1.paginateRecords(request, req => this.listNetworkSecurityGroupSecurityRules(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupSecurityRules operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroupSecurityRulesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNetworkSecurityGroupSecurityRules(req));
    }
    /**
     * Lists the VNICs in the specified network security group.
     *
     * @param ListNetworkSecurityGroupVnicsRequest
     * @return ListNetworkSecurityGroupVnicsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListNetworkSecurityGroupVnics.ts.html |here} to see how to use ListNetworkSecurityGroupVnics API.
     */
    listNetworkSecurityGroupVnics(listNetworkSecurityGroupVnicsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroupVnics.");
            const pathParams = {
                "{networkSecurityGroupId}": listNetworkSecurityGroupVnicsRequest.networkSecurityGroupId
            };
            const queryParams = {
                "limit": listNetworkSecurityGroupVnicsRequest.limit,
                "page": listNetworkSecurityGroupVnicsRequest.page,
                "sortBy": listNetworkSecurityGroupVnicsRequest.sortBy,
                "sortOrder": listNetworkSecurityGroupVnicsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/vnics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listNetworkSecurityGroupVnicsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "NetworkSecurityGroupVnic[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.NetworkSecurityGroupVnic objects
     * contained in responses from the listNetworkSecurityGroupVnics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroupVnics(request) {
        return oci_common_1.paginateRecords(request, req => this.listNetworkSecurityGroupVnics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroupVnics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroupVnicsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNetworkSecurityGroupVnics(req));
    }
    /**
     * Lists the network security groups in the specified compartment.
     *
     * @param ListNetworkSecurityGroupsRequest
     * @return ListNetworkSecurityGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListNetworkSecurityGroups.ts.html |here} to see how to use ListNetworkSecurityGroups API.
     */
    listNetworkSecurityGroups(listNetworkSecurityGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listNetworkSecurityGroups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNetworkSecurityGroupsRequest.compartmentId,
                "vcnId": listNetworkSecurityGroupsRequest.vcnId,
                "limit": listNetworkSecurityGroupsRequest.limit,
                "page": listNetworkSecurityGroupsRequest.page,
                "displayName": listNetworkSecurityGroupsRequest.displayName,
                "sortBy": listNetworkSecurityGroupsRequest.sortBy,
                "sortOrder": listNetworkSecurityGroupsRequest.sortOrder,
                "lifecycleState": listNetworkSecurityGroupsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listNetworkSecurityGroupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "NetworkSecurityGroup[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.NetworkSecurityGroup objects
     * contained in responses from the listNetworkSecurityGroups operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroups(request) {
        return oci_common_1.paginateRecords(request, req => this.listNetworkSecurityGroups(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listNetworkSecurityGroups operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllNetworkSecurityGroupsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listNetworkSecurityGroups(req));
    }
    /**
       * Lists the {@link PrivateIp} objects based
  * on one of these filters:
  * <p>
    - Subnet OCID.
  *   - VNIC OCID.
  *   - Both private IP address and subnet OCID: This lets
  *   you get a `privateIP` object based on its private IP
  *   address (for example, 10.0.3.3) and not its OCID. For comparison,
  *   {@link #getPrivateIp(GetPrivateIpRequest) getPrivateIp}
  *   requires the OCID.
  * <p>
  If you're listing all the private IPs associated with a given subnet
  * or VNIC, the response includes both primary and secondary private IPs.
  * <p>
  If you are an Oracle Cloud VMware Solution customer and have VLANs
  * in your VCN, you can filter the list by VLAN OCID. See {@link Vlan}.
  *
       * @param ListPrivateIpsRequest
       * @return ListPrivateIpsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListPrivateIps.ts.html |here} to see how to use ListPrivateIps API.
       */
    listPrivateIps(listPrivateIpsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listPrivateIps.");
            const pathParams = {};
            const queryParams = {
                "limit": listPrivateIpsRequest.limit,
                "page": listPrivateIpsRequest.page,
                "ipAddress": listPrivateIpsRequest.ipAddress,
                "subnetId": listPrivateIpsRequest.subnetId,
                "vnicId": listPrivateIpsRequest.vnicId,
                "vlanId": listPrivateIpsRequest.vlanId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/privateIps",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPrivateIpsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PrivateIp[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.PrivateIp objects
     * contained in responses from the listPrivateIps operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPrivateIps(request) {
        return oci_common_1.paginateRecords(request, req => this.listPrivateIps(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPrivateIps operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPrivateIpsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPrivateIps(req));
    }
    /**
     * Lists the public IP pools in the specified compartment.
     * You can filter the list using query parameters.
     *
     * @param ListPublicIpPoolsRequest
     * @return ListPublicIpPoolsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListPublicIpPools.ts.html |here} to see how to use ListPublicIpPools API.
     */
    listPublicIpPools(listPublicIpPoolsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listPublicIpPools.");
            const pathParams = {};
            const queryParams = {
                "limit": listPublicIpPoolsRequest.limit,
                "page": listPublicIpPoolsRequest.page,
                "displayName": listPublicIpPoolsRequest.displayName,
                "byoipRangeId": listPublicIpPoolsRequest.byoipRangeId,
                "sortBy": listPublicIpPoolsRequest.sortBy,
                "sortOrder": listPublicIpPoolsRequest.sortOrder,
                "compartmentId": listPublicIpPoolsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPublicIpPoolsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPublicIpPoolsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPoolCollection",
                    bodyModel: "model.PublicIpPoolCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the {@link PublicIp} objects
  * in the specified compartment. You can filter the list by using query parameters.
  * <p>
  To list your reserved public IPs:
  *   * Set `scope` = `REGION`  (required)
  *   * Leave the `availabilityDomain` parameter empty
  *   * Set `lifetime` = `RESERVED`
  * <p>
  To list the ephemeral public IPs assigned to a regional entity such as a NAT gateway:
  *   * Set `scope` = `REGION`  (required)
  *   * Leave the `availabilityDomain` parameter empty
  *   * Set `lifetime` = `EPHEMERAL`
  * <p>
  To list the ephemeral public IPs assigned to private IPs:
  *   * Set `scope` = `AVAILABILITY_DOMAIN` (required)
  *   * Set the `availabilityDomain` parameter to the desired availability domain (required)
  *   * Set `lifetime` = `EPHEMERAL`
  * <p>
  **Note:** An ephemeral public IP assigned to a private IP
  * is always in the same availability domain and compartment as the private IP.
  *
       * @param ListPublicIpsRequest
       * @return ListPublicIpsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListPublicIps.ts.html |here} to see how to use ListPublicIps API.
       */
    listPublicIps(listPublicIpsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listPublicIps.");
            const pathParams = {};
            const queryParams = {
                "limit": listPublicIpsRequest.limit,
                "page": listPublicIpsRequest.page,
                "scope": listPublicIpsRequest.scope,
                "availabilityDomain": listPublicIpsRequest.availabilityDomain,
                "lifetime": listPublicIpsRequest.lifetime,
                "compartmentId": listPublicIpsRequest.compartmentId,
                "publicIpPoolId": listPublicIpsRequest.publicIpPoolId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPublicIpsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PublicIp[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.PublicIp objects
     * contained in responses from the listPublicIps operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPublicIps(request) {
        return oci_common_1.paginateRecords(request, req => this.listPublicIps(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPublicIps operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPublicIpsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPublicIps(req));
    }
    /**
     * Lists the remote peering connections (RPCs) for the specified DRG and compartment
     * (the RPC's compartment).
     *
     * @param ListRemotePeeringConnectionsRequest
     * @return ListRemotePeeringConnectionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListRemotePeeringConnections.ts.html |here} to see how to use ListRemotePeeringConnections API.
     */
    listRemotePeeringConnections(listRemotePeeringConnectionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listRemotePeeringConnections.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRemotePeeringConnectionsRequest.compartmentId,
                "drgId": listRemotePeeringConnectionsRequest.drgId,
                "limit": listRemotePeeringConnectionsRequest.limit,
                "page": listRemotePeeringConnectionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRemotePeeringConnectionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "RemotePeeringConnection[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.RemotePeeringConnection objects
     * contained in responses from the listRemotePeeringConnections operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRemotePeeringConnections(request) {
        return oci_common_1.paginateRecords(request, req => this.listRemotePeeringConnections(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRemotePeeringConnections operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRemotePeeringConnectionsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listRemotePeeringConnections(req));
    }
    /**
     * Lists the route tables in the specified VCN and specified compartment.
     * If the VCN ID is not provided, then the list includes the route tables from all VCNs in the specified compartment.
     * The response includes the default route table that automatically comes with
     * each VCN in the specified compartment, plus any route tables you've created.
     *
     * @param ListRouteTablesRequest
     * @return ListRouteTablesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListRouteTables.ts.html |here} to see how to use ListRouteTables API.
     */
    listRouteTables(listRouteTablesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listRouteTables.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRouteTablesRequest.compartmentId,
                "limit": listRouteTablesRequest.limit,
                "page": listRouteTablesRequest.page,
                "vcnId": listRouteTablesRequest.vcnId,
                "displayName": listRouteTablesRequest.displayName,
                "sortBy": listRouteTablesRequest.sortBy,
                "sortOrder": listRouteTablesRequest.sortOrder,
                "lifecycleState": listRouteTablesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRouteTablesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "RouteTable[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.RouteTable objects
     * contained in responses from the listRouteTables operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRouteTables(request) {
        return oci_common_1.paginateRecords(request, req => this.listRouteTables(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listRouteTables operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllRouteTablesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listRouteTables(req));
    }
    /**
     * Lists the security lists in the specified VCN and compartment.
     * If the VCN ID is not provided, then the list includes the security lists from all VCNs in the specified compartment.
     *
     * @param ListSecurityListsRequest
     * @return ListSecurityListsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListSecurityLists.ts.html |here} to see how to use ListSecurityLists API.
     */
    listSecurityLists(listSecurityListsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listSecurityLists.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSecurityListsRequest.compartmentId,
                "limit": listSecurityListsRequest.limit,
                "page": listSecurityListsRequest.page,
                "vcnId": listSecurityListsRequest.vcnId,
                "displayName": listSecurityListsRequest.displayName,
                "sortBy": listSecurityListsRequest.sortBy,
                "sortOrder": listSecurityListsRequest.sortOrder,
                "lifecycleState": listSecurityListsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSecurityListsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "SecurityList[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.SecurityList objects
     * contained in responses from the listSecurityLists operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityLists(request) {
        return oci_common_1.paginateRecords(request, req => this.listSecurityLists(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecurityLists operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecurityListsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSecurityLists(req));
    }
    /**
     * Lists the service gateways in the specified compartment. You may optionally specify a VCN OCID
     * to filter the results by VCN.
     *
     * @param ListServiceGatewaysRequest
     * @return ListServiceGatewaysResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListServiceGateways.ts.html |here} to see how to use ListServiceGateways API.
     */
    listServiceGateways(listServiceGatewaysRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listServiceGateways.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listServiceGatewaysRequest.compartmentId,
                "vcnId": listServiceGatewaysRequest.vcnId,
                "limit": listServiceGatewaysRequest.limit,
                "page": listServiceGatewaysRequest.page,
                "sortBy": listServiceGatewaysRequest.sortBy,
                "sortOrder": listServiceGatewaysRequest.sortOrder,
                "lifecycleState": listServiceGatewaysRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listServiceGatewaysRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ServiceGateway[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ServiceGateway objects
     * contained in responses from the listServiceGateways operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllServiceGateways(request) {
        return oci_common_1.paginateRecords(request, req => this.listServiceGateways(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listServiceGateways operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllServiceGatewaysResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listServiceGateways(req));
    }
    /**
     * Lists the available {@link Service} objects that you can enable for a
     * service gateway in this region.
     *
     * @param ListServicesRequest
     * @return ListServicesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListServices.ts.html |here} to see how to use ListServices API.
     */
    listServices(listServicesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listServices.");
            const pathParams = {};
            const queryParams = {
                "limit": listServicesRequest.limit,
                "page": listServicesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/services",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listServicesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Service[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Service objects
     * contained in responses from the listServices operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllServices(request) {
        return oci_common_1.paginateRecords(request, req => this.listServices(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listServices operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllServicesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listServices(req));
    }
    /**
     * Lists the subnets in the specified VCN and the specified compartment.
     * If the VCN ID is not provided, then the list includes the subnets from all VCNs in the specified compartment.
     *
     * @param ListSubnetsRequest
     * @return ListSubnetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListSubnets.ts.html |here} to see how to use ListSubnets API.
     */
    listSubnets(listSubnetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listSubnets.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSubnetsRequest.compartmentId,
                "limit": listSubnetsRequest.limit,
                "page": listSubnetsRequest.page,
                "vcnId": listSubnetsRequest.vcnId,
                "displayName": listSubnetsRequest.displayName,
                "sortBy": listSubnetsRequest.sortBy,
                "sortOrder": listSubnetsRequest.sortOrder,
                "lifecycleState": listSubnetsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSubnetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Subnet[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Subnet objects
     * contained in responses from the listSubnets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubnets(request) {
        return oci_common_1.paginateRecords(request, req => this.listSubnets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSubnets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSubnetsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSubnets(req));
    }
    /**
     * Lists the virtual cloud networks (VCNs) in the specified compartment.
     *
     * @param ListVcnsRequest
     * @return ListVcnsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVcns.ts.html |here} to see how to use ListVcns API.
     */
    listVcns(listVcnsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listVcns.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVcnsRequest.compartmentId,
                "limit": listVcnsRequest.limit,
                "page": listVcnsRequest.page,
                "displayName": listVcnsRequest.displayName,
                "sortBy": listVcnsRequest.sortBy,
                "sortOrder": listVcnsRequest.sortOrder,
                "lifecycleState": listVcnsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVcnsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Vcn[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Vcn objects
     * contained in responses from the listVcns operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVcns(request) {
        return oci_common_1.paginateRecords(request, req => this.listVcns(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVcns operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVcnsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVcns(req));
    }
    /**
     * The deprecated operation lists available bandwidth levels for virtual circuits. For the compartment ID, provide the OCID of your tenancy (the root compartment).
     *
     * @param ListVirtualCircuitBandwidthShapesRequest
     * @return ListVirtualCircuitBandwidthShapesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVirtualCircuitBandwidthShapes.ts.html |here} to see how to use ListVirtualCircuitBandwidthShapes API.
     */
    listVirtualCircuitBandwidthShapes(listVirtualCircuitBandwidthShapesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuitBandwidthShapes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVirtualCircuitBandwidthShapesRequest.compartmentId,
                "limit": listVirtualCircuitBandwidthShapesRequest.limit,
                "page": listVirtualCircuitBandwidthShapesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuitBandwidthShapes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVirtualCircuitBandwidthShapesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VirtualCircuitBandwidthShape[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VirtualCircuitBandwidthShape objects
     * contained in responses from the listVirtualCircuitBandwidthShapes operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVirtualCircuitBandwidthShapes(request) {
        return oci_common_1.paginateRecords(request, req => this.listVirtualCircuitBandwidthShapes(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuitBandwidthShapes operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVirtualCircuitBandwidthShapesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVirtualCircuitBandwidthShapes(req));
    }
    /**
     * Lists the public IP prefixes and their details for the specified
     * public virtual circuit.
     *
     * @param ListVirtualCircuitPublicPrefixesRequest
     * @return ListVirtualCircuitPublicPrefixesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVirtualCircuitPublicPrefixes.ts.html |here} to see how to use ListVirtualCircuitPublicPrefixes API.
     */
    listVirtualCircuitPublicPrefixes(listVirtualCircuitPublicPrefixesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuitPublicPrefixes.");
            const pathParams = {
                "{virtualCircuitId}": listVirtualCircuitPublicPrefixesRequest.virtualCircuitId
            };
            const queryParams = {
                "verificationState": listVirtualCircuitPublicPrefixesRequest.verificationState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}/publicPrefixes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVirtualCircuitPublicPrefixesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VirtualCircuitPublicPrefix[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the virtual circuits in the specified compartment.
     *
     * @param ListVirtualCircuitsRequest
     * @return ListVirtualCircuitsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVirtualCircuits.ts.html |here} to see how to use ListVirtualCircuits API.
     */
    listVirtualCircuits(listVirtualCircuitsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listVirtualCircuits.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVirtualCircuitsRequest.compartmentId,
                "limit": listVirtualCircuitsRequest.limit,
                "page": listVirtualCircuitsRequest.page,
                "displayName": listVirtualCircuitsRequest.displayName,
                "sortBy": listVirtualCircuitsRequest.sortBy,
                "sortOrder": listVirtualCircuitsRequest.sortOrder,
                "lifecycleState": listVirtualCircuitsRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVirtualCircuitsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "VirtualCircuit[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.VirtualCircuit objects
     * contained in responses from the listVirtualCircuits operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVirtualCircuits(request) {
        return oci_common_1.paginateRecords(request, req => this.listVirtualCircuits(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVirtualCircuits operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVirtualCircuitsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVirtualCircuits(req));
    }
    /**
     * Lists the VLANs in the specified VCN and the specified compartment.
     *
     * @param ListVlansRequest
     * @return ListVlansResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ListVlans.ts.html |here} to see how to use ListVlans API.
     */
    listVlans(listVlansRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#listVlans.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listVlansRequest.compartmentId,
                "limit": listVlansRequest.limit,
                "page": listVlansRequest.page,
                "vcnId": listVlansRequest.vcnId,
                "displayName": listVlansRequest.displayName,
                "sortBy": listVlansRequest.sortBy,
                "sortOrder": listVlansRequest.sortOrder,
                "lifecycleState": listVlansRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listVlansRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listVlansRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Vlan[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Vlan objects
     * contained in responses from the listVlans operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVlans(request) {
        return oci_common_1.paginateRecords(request, req => this.listVlans(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listVlans operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllVlansResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listVlans(req));
    }
    /**
       * Updates the specified CIDR block of a VCN. The new CIDR IP range must meet the following criteria:
  * <p>
  - Must be valid.
  * - Must not overlap with another CIDR block in the VCN, a CIDR block of a peered VCN, or the on-premises network CIDR block.
  * - Must not exceed the limit of CIDR blocks allowed per VCN.
  * - Must include IP addresses from the original CIDR block that are used in the VCN's existing route rules.
  * - No IP address in an existing subnet should be outside of the new CIDR block range.
  * <p>
  **Note:** Modifying a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can vary depending on the size of your network. Updating a small network could take about a minute, and updating a large network could take up to an hour. You can use the `GetWorkRequest` operation to check the status of the update.
  *
       * @param ModifyVcnCidrRequest
       * @return ModifyVcnCidrResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ModifyVcnCidr.ts.html |here} to see how to use ModifyVcnCidr API.
       */
    modifyVcnCidr(modifyVcnCidrRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#modifyVcnCidr.");
            const pathParams = {
                "{vcnId}": modifyVcnCidrRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": modifyVcnCidrRequest.opcRequestId,
                "opc-retry-token": modifyVcnCidrRequest.opcRetryToken,
                "if-match": modifyVcnCidrRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/actions/modifyCidr",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(modifyVcnCidrRequest.modifyVcnCidrDetails, "ModifyVcnCidrDetails", models.ModifyVcnCidrDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, modifyVcnCidrRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes one or more route distribution statements from the specified route distribution's map.
     *
     * @param RemoveDrgRouteDistributionStatementsRequest
     * @return RemoveDrgRouteDistributionStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveDrgRouteDistributionStatements.ts.html |here} to see how to use RemoveDrgRouteDistributionStatements API.
     */
    removeDrgRouteDistributionStatements(removeDrgRouteDistributionStatementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeDrgRouteDistributionStatements.");
            const pathParams = {
                "{drgRouteDistributionId}": removeDrgRouteDistributionStatementsRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}/actions/removeDrgRouteDistributionStatements",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDrgRouteDistributionStatementsRequest.removeDrgRouteDistributionStatementsDetails, "RemoveDrgRouteDistributionStatementsDetails", models.RemoveDrgRouteDistributionStatementsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeDrgRouteDistributionStatementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes one or more route rules from the specified DRG route table.
     *
     * @param RemoveDrgRouteRulesRequest
     * @return RemoveDrgRouteRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveDrgRouteRules.ts.html |here} to see how to use RemoveDrgRouteRules API.
     */
    removeDrgRouteRules(removeDrgRouteRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeDrgRouteRules.");
            const pathParams = {
                "{drgRouteTableId}": removeDrgRouteRulesRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}/actions/removeDrgRouteRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeDrgRouteRulesRequest.removeDrgRouteRulesDetails, "RemoveDrgRouteRulesDetails", models.RemoveDrgRouteRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeDrgRouteRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the export route distribution from the DRG attachment so no routes are advertised to it.
     *
     * @param RemoveExportDrgRouteDistributionRequest
     * @return RemoveExportDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveExportDrgRouteDistribution.ts.html |here} to see how to use RemoveExportDrgRouteDistribution API.
     */
    removeExportDrgRouteDistribution(removeExportDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeExportDrgRouteDistribution.");
            const pathParams = {
                "{drgAttachmentId}": removeExportDrgRouteDistributionRequest.drgAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeExportDrgRouteDistributionRequest.opcRequestId,
                "if-match": removeExportDrgRouteDistributionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments/{drgAttachmentId}/actions/removeExportDrgRouteDistribution",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeExportDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgAttachment",
                    bodyModel: "model.DrgAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the import route distribution from the DRG route table so no routes are imported
     * into it.
     *
     * @param RemoveImportDrgRouteDistributionRequest
     * @return RemoveImportDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveImportDrgRouteDistribution.ts.html |here} to see how to use RemoveImportDrgRouteDistribution API.
     */
    removeImportDrgRouteDistribution(removeImportDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeImportDrgRouteDistribution.");
            const pathParams = {
                "{drgRouteTableId}": removeImportDrgRouteDistributionRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeImportDrgRouteDistributionRequest.opcRequestId,
                "if-match": removeImportDrgRouteDistributionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}/actions/removeImportDrgRouteDistribution",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeImportDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteTable",
                    bodyModel: "model.DrgRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes one or more security rules from the specified network security group.
     *
     * @param RemoveNetworkSecurityGroupSecurityRulesRequest
     * @return RemoveNetworkSecurityGroupSecurityRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use RemoveNetworkSecurityGroupSecurityRules API.
     */
    removeNetworkSecurityGroupSecurityRules(removeNetworkSecurityGroupSecurityRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeNetworkSecurityGroupSecurityRules.");
            const pathParams = {
                "{networkSecurityGroupId}": removeNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/removeSecurityRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeNetworkSecurityGroupSecurityRulesRequest.removeNetworkSecurityGroupSecurityRulesDetails, "RemoveNetworkSecurityGroupSecurityRulesDetails", models.RemoveNetworkSecurityGroupSecurityRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeNetworkSecurityGroupSecurityRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a CIDR block from the referenced public IP pool.
     *
     * @param RemovePublicIpPoolCapacityRequest
     * @return RemovePublicIpPoolCapacityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemovePublicIpPoolCapacity.ts.html |here} to see how to use RemovePublicIpPoolCapacity API.
     */
    removePublicIpPoolCapacity(removePublicIpPoolCapacityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removePublicIpPoolCapacity.");
            const pathParams = {
                "{publicIpPoolId}": removePublicIpPoolCapacityRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removePublicIpPoolCapacityRequest.opcRequestId,
                "opc-retry-token": removePublicIpPoolCapacityRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}/actions/removeCapacity",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removePublicIpPoolCapacityRequest.removePublicIpPoolCapacityDetails, "RemovePublicIpPoolCapacityDetails", models.RemovePublicIpPoolCapacityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removePublicIpPoolCapacityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPool",
                    bodyModel: "model.PublicIpPool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a specified CIDR block from a VCN.
     * <p>
     **Notes:**
     * - You cannot remove a CIDR block if an IP address in its range is in use.
     * - Removing a CIDR block places your VCN in an updating state until the changes are complete. You cannot create or update the VCN's subnets, VLANs, LPGs, or route tables during this operation. The time to completion can take a few minutes. You can use the `GetWorkRequest` operation to check the status of the update.
     *
     * @param RemoveVcnCidrRequest
     * @return RemoveVcnCidrResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/RemoveVcnCidr.ts.html |here} to see how to use RemoveVcnCidr API.
     */
    removeVcnCidr(removeVcnCidrRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#removeVcnCidr.");
            const pathParams = {
                "{vcnId}": removeVcnCidrRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeVcnCidrRequest.opcRequestId,
                "opc-retry-token": removeVcnCidrRequest.opcRetryToken,
                "if-match": removeVcnCidrRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}/actions/removeCidr",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeVcnCidrRequest.removeVcnCidrDetails, "RemoveVcnCidrDetails", models.RemoveVcnCidrDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeVcnCidrRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the tags or display name associated to the specified BYOIP CIDR block.
     *
     * @param UpdateByoipRangeRequest
     * @return UpdateByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateByoipRange.ts.html |here} to see how to use UpdateByoipRange API.
     */
    updateByoipRange(updateByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateByoipRange.");
            const pathParams = {
                "{byoipRangeId}": updateByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateByoipRangeRequest.opcRequestId,
                "if-match": updateByoipRangeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateByoipRangeRequest.updateByoipRangeDetails, "UpdateByoipRangeDetails", models.UpdateByoipRangeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "byoipRange",
                    bodyModel: "model.ByoipRange",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified CPE's display name or tags.
     * Avoid entering confidential information.
     *
     * @param UpdateCpeRequest
     * @return UpdateCpeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateCpe.ts.html |here} to see how to use UpdateCpe API.
     */
    updateCpe(updateCpeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateCpe.");
            const pathParams = {
                "{cpeId}": updateCpeRequest.cpeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCpeRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/cpes/{cpeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCpeRequest.updateCpeDetails, "UpdateCpeDetails", models.UpdateCpeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateCpeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "cpe",
                    bodyModel: "model.Cpe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified cross-connect.
     * @param UpdateCrossConnectRequest
     * @return UpdateCrossConnectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateCrossConnect.ts.html |here} to see how to use UpdateCrossConnect API.
     */
    updateCrossConnect(updateCrossConnectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnect.");
            const pathParams = {
                "{crossConnectId}": updateCrossConnectRequest.crossConnectId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCrossConnectRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnects/{crossConnectId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCrossConnectRequest.updateCrossConnectDetails, "UpdateCrossConnectDetails", models.UpdateCrossConnectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateCrossConnectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnect",
                    bodyModel: "model.CrossConnect",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified cross-connect group's display name.
     * Avoid entering confidential information.
     *
     * @param UpdateCrossConnectGroupRequest
     * @return UpdateCrossConnectGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateCrossConnectGroup.ts.html |here} to see how to use UpdateCrossConnectGroup API.
     */
    updateCrossConnectGroup(updateCrossConnectGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateCrossConnectGroup.");
            const pathParams = {
                "{crossConnectGroupId}": updateCrossConnectGroupRequest.crossConnectGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateCrossConnectGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/crossConnectGroups/{crossConnectGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateCrossConnectGroupRequest.updateCrossConnectGroupDetails, "UpdateCrossConnectGroupDetails", models.UpdateCrossConnectGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateCrossConnectGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "crossConnectGroup",
                    bodyModel: "model.CrossConnectGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified set of DHCP options. You can update the display name or the options
  * themselves. Avoid entering confidential information.
  * <p>
  Note that the `options` object you provide replaces the entire existing set of options.
  *
       * @param UpdateDhcpOptionsRequest
       * @return UpdateDhcpOptionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDhcpOptions.ts.html |here} to see how to use UpdateDhcpOptions API.
       */
    updateDhcpOptions(updateDhcpOptionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDhcpOptions.");
            const pathParams = {
                "{dhcpId}": updateDhcpOptionsRequest.dhcpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDhcpOptionsRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dhcps/{dhcpId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDhcpOptionsRequest.updateDhcpDetails, "UpdateDhcpDetails", models.UpdateDhcpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDhcpOptionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dhcpOptions",
                    bodyModel: "model.DhcpOptions",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified DRG's display name or tags. Avoid entering confidential information.
     *
     * @param UpdateDrgRequest
     * @return UpdateDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrg.ts.html |here} to see how to use UpdateDrg API.
     */
    updateDrg(updateDrgRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrg.");
            const pathParams = {
                "{drgId}": updateDrgRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDrgRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDrgRequest.updateDrgDetails, "UpdateDrgDetails", models.UpdateDrgDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drg",
                    bodyModel: "model.Drg",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the display name and routing information for the specified `DrgAttachment`.
     * Avoid entering confidential information.
     *
     * @param UpdateDrgAttachmentRequest
     * @return UpdateDrgAttachmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrgAttachment.ts.html |here} to see how to use UpdateDrgAttachment API.
     */
    updateDrgAttachment(updateDrgAttachmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrgAttachment.");
            const pathParams = {
                "{drgAttachmentId}": updateDrgAttachmentRequest.drgAttachmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDrgAttachmentRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgAttachments/{drgAttachmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDrgAttachmentRequest.updateDrgAttachmentDetails, "UpdateDrgAttachmentDetails", models.UpdateDrgAttachmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgAttachmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgAttachment",
                    bodyModel: "model.DrgAttachment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified route distribution
     *
     * @param UpdateDrgRouteDistributionRequest
     * @return UpdateDrgRouteDistributionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrgRouteDistribution.ts.html |here} to see how to use UpdateDrgRouteDistribution API.
     */
    updateDrgRouteDistribution(updateDrgRouteDistributionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteDistribution.");
            const pathParams = {
                "{drgRouteDistributionId}": updateDrgRouteDistributionRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDrgRouteDistributionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDrgRouteDistributionRequest.updateDrgRouteDistributionDetails, "UpdateDrgRouteDistributionDetails", models.UpdateDrgRouteDistributionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgRouteDistributionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteDistribution",
                    bodyModel: "model.DrgRouteDistribution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more route distribution statements in the specified route distribution.
     *
     * @param UpdateDrgRouteDistributionStatementsRequest
     * @return UpdateDrgRouteDistributionStatementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrgRouteDistributionStatements.ts.html |here} to see how to use UpdateDrgRouteDistributionStatements API.
     */
    updateDrgRouteDistributionStatements(updateDrgRouteDistributionStatementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteDistributionStatements.");
            const pathParams = {
                "{drgRouteDistributionId}": updateDrgRouteDistributionStatementsRequest.drgRouteDistributionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteDistributions/{drgRouteDistributionId}/actions/updateDrgRouteDistributionStatements",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateDrgRouteDistributionStatementsRequest.updateDrgRouteDistributionStatementsDetails, "UpdateDrgRouteDistributionStatementsDetails", models.UpdateDrgRouteDistributionStatementsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgRouteDistributionStatementsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteDistributionStatement[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more route rules in the specified DRG route table.
     *
     * @param UpdateDrgRouteRulesRequest
     * @return UpdateDrgRouteRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrgRouteRules.ts.html |here} to see how to use UpdateDrgRouteRules API.
     */
    updateDrgRouteRules(updateDrgRouteRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteRules.");
            const pathParams = {
                "{drgRouteTableId}": updateDrgRouteRulesRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}/actions/updateDrgRouteRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateDrgRouteRulesRequest.updateDrgRouteRulesDetails, "UpdateDrgRouteRulesDetails", models.UpdateDrgRouteRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgRouteRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "DrgRouteRule[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified DRG route table.
     *
     * @param UpdateDrgRouteTableRequest
     * @return UpdateDrgRouteTableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateDrgRouteTable.ts.html |here} to see how to use UpdateDrgRouteTable API.
     */
    updateDrgRouteTable(updateDrgRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateDrgRouteTable.");
            const pathParams = {
                "{drgRouteTableId}": updateDrgRouteTableRequest.drgRouteTableId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDrgRouteTableRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgRouteTables/{drgRouteTableId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDrgRouteTableRequest.updateDrgRouteTableDetails, "UpdateDrgRouteTableDetails", models.UpdateDrgRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDrgRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "drgRouteTable",
                    bodyModel: "model.DrgRouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified IPSec connection.
  * <p>
  To update an individual IPSec tunnel's attributes, use
  * {@link #updateIPSecConnectionTunnel(UpdateIPSecConnectionTunnelRequest) updateIPSecConnectionTunnel}.
  *
       * @param UpdateIPSecConnectionRequest
       * @return UpdateIPSecConnectionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateIPSecConnection.ts.html |here} to see how to use UpdateIPSecConnection API.
       */
    updateIPSecConnection(updateIPSecConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnection.");
            const pathParams = {
                "{ipscId}": updateIPSecConnectionRequest.ipscId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIPSecConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIPSecConnectionRequest.updateIPSecConnectionDetails, "UpdateIPSecConnectionDetails", models.UpdateIPSecConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateIPSecConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnection",
                    bodyModel: "model.IPSecConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified tunnel. This operation lets you change tunnel attributes such as the
     * routing type (BGP dynamic routing or static routing). Here are some important notes:
     * <p>
     * If you change the tunnel's routing type or BGP session configuration, the tunnel will go
     *     down while it's reprovisioned.
     * <p>
     * If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
     *     BGP session configuration attributes have been set ({@link #bgpSessionInfo(BgpSessionInfoRequest) bgpSessionInfo}).
     * <p>
     * If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
     *     {@link IPSecConnection} already has at least one valid CIDR
     *     static route.
     *
     * @param UpdateIPSecConnectionTunnelRequest
     * @return UpdateIPSecConnectionTunnelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateIPSecConnectionTunnel.ts.html |here} to see how to use UpdateIPSecConnectionTunnel API.
     */
    updateIPSecConnectionTunnel(updateIPSecConnectionTunnelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnectionTunnel.");
            const pathParams = {
                "{ipscId}": updateIPSecConnectionTunnelRequest.ipscId,
                "{tunnelId}": updateIPSecConnectionTunnelRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIPSecConnectionTunnelRequest.ifMatch,
                "opc-request-id": updateIPSecConnectionTunnelRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIPSecConnectionTunnelRequest.updateIPSecConnectionTunnelDetails, "UpdateIPSecConnectionTunnelDetails", models.UpdateIPSecConnectionTunnelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateIPSecConnectionTunnelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionTunnel",
                    bodyModel: "model.IPSecConnectionTunnel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the shared secret (pre-shared key) for the specified tunnel.
     * <p>
     **Important:** If you change the shared secret, the tunnel will go down while it's reprovisioned.
     *
     * @param UpdateIPSecConnectionTunnelSharedSecretRequest
     * @return UpdateIPSecConnectionTunnelSharedSecretResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateIPSecConnectionTunnelSharedSecret.ts.html |here} to see how to use UpdateIPSecConnectionTunnelSharedSecret API.
     */
    updateIPSecConnectionTunnelSharedSecret(updateIPSecConnectionTunnelSharedSecretRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateIPSecConnectionTunnelSharedSecret.");
            const pathParams = {
                "{ipscId}": updateIPSecConnectionTunnelSharedSecretRequest.ipscId,
                "{tunnelId}": updateIPSecConnectionTunnelSharedSecretRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIPSecConnectionTunnelSharedSecretRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/sharedSecret",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIPSecConnectionTunnelSharedSecretRequest.updateIPSecConnectionTunnelSharedSecretDetails, "UpdateIPSecConnectionTunnelSharedSecretDetails", models.UpdateIPSecConnectionTunnelSharedSecretDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateIPSecConnectionTunnelSharedSecretRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "iPSecConnectionTunnelSharedSecret",
                    bodyModel: "model.IPSecConnectionTunnelSharedSecret",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified internet gateway. You can disable/enable it, or change its display name
  * or tags. Avoid entering confidential information.
  * <p>
  If the gateway is disabled, that means no traffic will flow to/from the internet even if there's
  * a route rule that enables that traffic.
  *
       * @param UpdateInternetGatewayRequest
       * @return UpdateInternetGatewayResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateInternetGateway.ts.html |here} to see how to use UpdateInternetGateway API.
       */
    updateInternetGateway(updateInternetGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateInternetGateway.");
            const pathParams = {
                "{igId}": updateInternetGatewayRequest.igId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateInternetGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internetGateways/{igId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInternetGatewayRequest.updateInternetGatewayDetails, "UpdateInternetGatewayDetails", models.UpdateInternetGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateInternetGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "internetGateway",
                    bodyModel: "model.InternetGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified IPv6. You must specify the object's OCID.
     * Use this operation if you want to:
     * <p>
     * Move an IPv6 to a different VNIC in the same subnet.
     *   * Enable/disable internet access for an IPv6.
     *   * Change the display name for an IPv6.
     *   * Update resource tags for an IPv6.
     *
     * @param UpdateIpv6Request
     * @return UpdateIpv6Response
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateIpv6.ts.html |here} to see how to use UpdateIpv6 API.
     */
    updateIpv6(updateIpv6Request) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateIpv6.");
            const pathParams = {
                "{ipv6Id}": updateIpv6Request.ipv6Id
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateIpv6Request.ifMatch,
                "opc-request-id": updateIpv6Request.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipv6/{ipv6Id}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateIpv6Request.updateIpv6Details, "UpdateIpv6Details", models.UpdateIpv6Details.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateIpv6Request.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ipv6",
                    bodyModel: "model.Ipv6",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified local peering gateway (LPG).
     *
     * @param UpdateLocalPeeringGatewayRequest
     * @return UpdateLocalPeeringGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateLocalPeeringGateway.ts.html |here} to see how to use UpdateLocalPeeringGateway API.
     */
    updateLocalPeeringGateway(updateLocalPeeringGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateLocalPeeringGateway.");
            const pathParams = {
                "{localPeeringGatewayId}": updateLocalPeeringGatewayRequest.localPeeringGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLocalPeeringGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/localPeeringGateways/{localPeeringGatewayId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLocalPeeringGatewayRequest.updateLocalPeeringGatewayDetails, "UpdateLocalPeeringGatewayDetails", models.UpdateLocalPeeringGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLocalPeeringGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "localPeeringGateway",
                    bodyModel: "model.LocalPeeringGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified NAT gateway.
     *
     * @param UpdateNatGatewayRequest
     * @return UpdateNatGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateNatGateway.ts.html |here} to see how to use UpdateNatGateway API.
     */
    updateNatGateway(updateNatGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateNatGateway.");
            const pathParams = {
                "{natGatewayId}": updateNatGatewayRequest.natGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNatGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/natGateways/{natGatewayId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNatGatewayRequest.updateNatGatewayDetails, "UpdateNatGatewayDetails", models.UpdateNatGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateNatGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "natGateway",
                    bodyModel: "model.NatGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified network security group.
  * <p>
  To add or remove an existing VNIC from the group, use
  * {@link #updateVnic(UpdateVnicRequest) updateVnic}.
  * <p>
  To add a VNIC to the group *when you create the VNIC*, specify the NSG's OCID during creation.
  * For example, see the `nsgIds` attribute in {@link #createVnicDetails(CreateVnicDetailsRequest) createVnicDetails}.
  * <p>
  To add or remove security rules from the group, use
  * {@link #addNetworkSecurityGroupSecurityRules(AddNetworkSecurityGroupSecurityRulesRequest) addNetworkSecurityGroupSecurityRules}
  * or
  * {@link #removeNetworkSecurityGroupSecurityRules(RemoveNetworkSecurityGroupSecurityRulesRequest) removeNetworkSecurityGroupSecurityRules}.
  * <p>
  To edit the contents of existing security rules in the group, use
  * {@link #updateNetworkSecurityGroupSecurityRules(UpdateNetworkSecurityGroupSecurityRulesRequest) updateNetworkSecurityGroupSecurityRules}.
  *
       * @param UpdateNetworkSecurityGroupRequest
       * @return UpdateNetworkSecurityGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateNetworkSecurityGroup.ts.html |here} to see how to use UpdateNetworkSecurityGroup API.
       */
    updateNetworkSecurityGroup(updateNetworkSecurityGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateNetworkSecurityGroup.");
            const pathParams = {
                "{networkSecurityGroupId}": updateNetworkSecurityGroupRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateNetworkSecurityGroupRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNetworkSecurityGroupRequest.updateNetworkSecurityGroupDetails, "UpdateNetworkSecurityGroupDetails", models.UpdateNetworkSecurityGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateNetworkSecurityGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "networkSecurityGroup",
                    bodyModel: "model.NetworkSecurityGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates one or more security rules in the specified network security group.
     *
     * @param UpdateNetworkSecurityGroupSecurityRulesRequest
     * @return UpdateNetworkSecurityGroupSecurityRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateNetworkSecurityGroupSecurityRules.ts.html |here} to see how to use UpdateNetworkSecurityGroupSecurityRules API.
     */
    updateNetworkSecurityGroupSecurityRules(updateNetworkSecurityGroupSecurityRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateNetworkSecurityGroupSecurityRules.");
            const pathParams = {
                "{networkSecurityGroupId}": updateNetworkSecurityGroupSecurityRulesRequest.networkSecurityGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/networkSecurityGroups/{networkSecurityGroupId}/actions/updateSecurityRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateNetworkSecurityGroupSecurityRulesRequest.updateNetworkSecurityGroupSecurityRulesDetails, "UpdateNetworkSecurityGroupSecurityRulesDetails", models.UpdateNetworkSecurityGroupSecurityRulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateNetworkSecurityGroupSecurityRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updatedNetworkSecurityGroupSecurityRules",
                    bodyModel: "model.UpdatedNetworkSecurityGroupSecurityRules",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified private IP. You must specify the object's OCID.
  * Use this operation if you want to:
  * <p>
    - Move a secondary private IP to a different VNIC in the same subnet.
  *   - Change the display name for a secondary private IP.
  *   - Change the hostname for a secondary private IP.
  * <p>
  This operation cannot be used with primary private IPs.
  * To update the hostname for the primary IP on a VNIC, use
  * {@link #updateVnic(UpdateVnicRequest) updateVnic}.
  *
       * @param UpdatePrivateIpRequest
       * @return UpdatePrivateIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdatePrivateIp.ts.html |here} to see how to use UpdatePrivateIp API.
       */
    updatePrivateIp(updatePrivateIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updatePrivateIp.");
            const pathParams = {
                "{privateIpId}": updatePrivateIpRequest.privateIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePrivateIpRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/privateIps/{privateIpId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePrivateIpRequest.updatePrivateIpDetails, "UpdatePrivateIpDetails", models.UpdatePrivateIpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updatePrivateIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "privateIp",
                    bodyModel: "model.PrivateIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified public IP. You must specify the object's OCID. Use this operation if you want to:
  * <p>
  * Assign a reserved public IP in your pool to a private IP.
  * * Move a reserved public IP to a different private IP.
  * * Unassign a reserved public IP from a private IP (which returns it to your pool
  * of reserved public IPs).
  * * Change the display name or tags for a public IP.
  * <p>
  Assigning, moving, and unassigning a reserved public IP are asynchronous
  * operations. Poll the public IP's `lifecycleState` to determine if the operation
  * succeeded.
  * <p>
  **Note:** When moving a reserved public IP, the target private IP
  * must not already have a public IP with `lifecycleState` = ASSIGNING or ASSIGNED. If it
  * does, an error is returned. Also, the initial unassignment from the original
  * private IP always succeeds, but the assignment to the target private IP is asynchronous and
  * could fail silently (for example, if the target private IP is deleted or has a different public IP
  * assigned to it in the interim). If that occurs, the public IP remains unassigned and its
  * `lifecycleState` switches to AVAILABLE (it is not reassigned to its original private IP).
  * You must poll the public IP's `lifecycleState` to determine if the move succeeded.
  * <p>
  Regarding ephemeral public IPs:
  * <p>
  * If you want to assign an ephemeral public IP to a primary private IP, use
  * {@link #createPublicIp(CreatePublicIpRequest) createPublicIp}.
  * * You can't move an ephemeral public IP to a different private IP.
  * * If you want to unassign an ephemeral public IP from its private IP, use
  * {@link #deletePublicIp(DeletePublicIpRequest) deletePublicIp}, which
  * unassigns and deletes the ephemeral public IP.
  * <p>
  **Note:** If a public IP is assigned to a secondary private
  * IP (see {@link PrivateIp}), and you move that secondary
  * private IP to another VNIC, the public IP moves with it.
  * <p>
  **Note:** There's a limit to the number of {@link PublicIp}
  * a VNIC or instance can have. If you try to move a reserved public IP
  * to a VNIC or instance that has already reached its public IP limit, an error is
  * returned. For information about the public IP limits, see
  * [Public IP Addresses](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingpublicIPs.htm).
  *
       * @param UpdatePublicIpRequest
       * @return UpdatePublicIpResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdatePublicIp.ts.html |here} to see how to use UpdatePublicIp API.
       */
    updatePublicIp(updatePublicIpRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIp.");
            const pathParams = {
                "{publicIpId}": updatePublicIpRequest.publicIpId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePublicIpRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIps/{publicIpId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePublicIpRequest.updatePublicIpDetails, "UpdatePublicIpDetails", models.UpdatePublicIpDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updatePublicIpRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIp",
                    bodyModel: "model.PublicIp",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified public IP pool.
     *
     * @param UpdatePublicIpPoolRequest
     * @return UpdatePublicIpPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdatePublicIpPool.ts.html |here} to see how to use UpdatePublicIpPool API.
     */
    updatePublicIpPool(updatePublicIpPoolRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updatePublicIpPool.");
            const pathParams = {
                "{publicIpPoolId}": updatePublicIpPoolRequest.publicIpPoolId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updatePublicIpPoolRequest.opcRequestId,
                "if-match": updatePublicIpPoolRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/publicIpPools/{publicIpPoolId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePublicIpPoolRequest.updatePublicIpPoolDetails, "UpdatePublicIpPoolDetails", models.UpdatePublicIpPoolDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updatePublicIpPoolRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "publicIpPool",
                    bodyModel: "model.PublicIpPool",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified remote peering connection (RPC).
     *
     * @param UpdateRemotePeeringConnectionRequest
     * @return UpdateRemotePeeringConnectionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateRemotePeeringConnection.ts.html |here} to see how to use UpdateRemotePeeringConnection API.
     */
    updateRemotePeeringConnection(updateRemotePeeringConnectionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateRemotePeeringConnection.");
            const pathParams = {
                "{remotePeeringConnectionId}": updateRemotePeeringConnectionRequest.remotePeeringConnectionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRemotePeeringConnectionRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/remotePeeringConnections/{remotePeeringConnectionId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRemotePeeringConnectionRequest.updateRemotePeeringConnectionDetails, "UpdateRemotePeeringConnectionDetails", models.UpdateRemotePeeringConnectionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRemotePeeringConnectionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "remotePeeringConnection",
                    bodyModel: "model.RemotePeeringConnection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified route table's display name or route rules.
  * Avoid entering confidential information.
  * <p>
  Note that the `routeRules` object you provide replaces the entire existing set of rules.
  *
       * @param UpdateRouteTableRequest
       * @return UpdateRouteTableResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateRouteTable.ts.html |here} to see how to use UpdateRouteTable API.
       */
    updateRouteTable(updateRouteTableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateRouteTable.");
            const pathParams = {
                "{rtId}": updateRouteTableRequest.rtId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRouteTableRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/routeTables/{rtId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRouteTableRequest.updateRouteTableDetails, "UpdateRouteTableDetails", models.UpdateRouteTableDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRouteTableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "routeTable",
                    bodyModel: "model.RouteTable",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified security list's display name or rules.
  * Avoid entering confidential information.
  * <p>
  Note that the `egressSecurityRules` or `ingressSecurityRules` objects you provide replace the entire
  * existing objects.
  *
       * @param UpdateSecurityListRequest
       * @return UpdateSecurityListResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateSecurityList.ts.html |here} to see how to use UpdateSecurityList API.
       */
    updateSecurityList(updateSecurityListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateSecurityList.");
            const pathParams = {
                "{securityListId}": updateSecurityListRequest.securityListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSecurityListRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityLists/{securityListId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSecurityListRequest.updateSecurityListDetails, "UpdateSecurityListDetails", models.UpdateSecurityListDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateSecurityListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityList",
                    bodyModel: "model.SecurityList",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified service gateway. The information you provide overwrites the existing
     * attributes of the gateway.
     *
     * @param UpdateServiceGatewayRequest
     * @return UpdateServiceGatewayResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateServiceGateway.ts.html |here} to see how to use UpdateServiceGateway API.
     */
    updateServiceGateway(updateServiceGatewayRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateServiceGateway.");
            const pathParams = {
                "{serviceGatewayId}": updateServiceGatewayRequest.serviceGatewayId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateServiceGatewayRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/serviceGateways/{serviceGatewayId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateServiceGatewayRequest.updateServiceGatewayDetails, "UpdateServiceGatewayDetails", models.UpdateServiceGatewayDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateServiceGatewayRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "serviceGateway",
                    bodyModel: "model.ServiceGateway",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified subnet.
     *
     * @param UpdateSubnetRequest
     * @return UpdateSubnetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateSubnet.ts.html |here} to see how to use UpdateSubnet API.
     */
    updateSubnet(updateSubnetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateSubnet.");
            const pathParams = {
                "{subnetId}": updateSubnetRequest.subnetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSubnetRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/subnets/{subnetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSubnetRequest.updateSubnetDetails, "UpdateSubnetDetails", models.UpdateSubnetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateSubnetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "subnet",
                    bodyModel: "model.Subnet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates the set of CPE configuration answers for the specified tunnel.
     * The answers correlate to the questions that are specific to the CPE device type (see the
     * `parameters` attribute of {@link CpeDeviceShapeDetail}).
     *
     * @param UpdateTunnelCpeDeviceConfigRequest
     * @return UpdateTunnelCpeDeviceConfigResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateTunnelCpeDeviceConfig.ts.html |here} to see how to use UpdateTunnelCpeDeviceConfig API.
     */
    updateTunnelCpeDeviceConfig(updateTunnelCpeDeviceConfigRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateTunnelCpeDeviceConfig.");
            const pathParams = {
                "{ipscId}": updateTunnelCpeDeviceConfigRequest.ipscId,
                "{tunnelId}": updateTunnelCpeDeviceConfigRequest.tunnelId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTunnelCpeDeviceConfigRequest.ifMatch,
                "opc-retry-token": updateTunnelCpeDeviceConfigRequest.opcRetryToken,
                "opc-request-id": updateTunnelCpeDeviceConfigRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/ipsecConnections/{ipscId}/tunnels/{tunnelId}/tunnelDeviceConfig",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTunnelCpeDeviceConfigRequest.updateTunnelCpeDeviceConfigDetails, "UpdateTunnelCpeDeviceConfigDetails", models.UpdateTunnelCpeDeviceConfigDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTunnelCpeDeviceConfigRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tunnelCpeDeviceConfig",
                    bodyModel: "model.TunnelCpeDeviceConfig",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified VCN.
     *
     * @param UpdateVcnRequest
     * @return UpdateVcnResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVcn.ts.html |here} to see how to use UpdateVcn API.
     */
    updateVcn(updateVcnRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateVcn.");
            const pathParams = {
                "{vcnId}": updateVcnRequest.vcnId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVcnRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vcns/{vcnId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVcnRequest.updateVcnDetails, "UpdateVcnDetails", models.UpdateVcnDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVcnRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vcn",
                    bodyModel: "model.Vcn",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified virtual circuit. This can be called by
  * either the customer who owns the virtual circuit, or the
  * provider (when provisioning or de-provisioning the virtual
  * circuit from their end). The documentation for
  * {@link #updateVirtualCircuitDetails(UpdateVirtualCircuitDetailsRequest) updateVirtualCircuitDetails}
  * indicates who can update each property of the virtual circuit.
  * <p>
  **Important:** If the virtual circuit is working and in the
  * PROVISIONED state, updating any of the network-related properties
  * (such as the DRG being used, the BGP ASN, and so on) will cause the virtual
  * circuit's state to switch to PROVISIONING and the related BGP
  * session to go down. After Oracle re-provisions the virtual circuit,
  * its state will return to PROVISIONED. Make sure you confirm that
  * the associated BGP session is back up. For more information
  * about the various states and how to test connectivity, see
  * [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
  * <p>
  To change the list of public IP prefixes for a public virtual circuit,
  * use {@link #bulkAddVirtualCircuitPublicPrefixes(BulkAddVirtualCircuitPublicPrefixesRequest) bulkAddVirtualCircuitPublicPrefixes}
  * and
  * {@link #bulkDeleteVirtualCircuitPublicPrefixes(BulkDeleteVirtualCircuitPublicPrefixesRequest) bulkDeleteVirtualCircuitPublicPrefixes}.
  * Updating the list of prefixes does NOT cause the BGP session to go down. However,
  * Oracle must verify the customer's ownership of each added prefix before
  * traffic for that prefix will flow across the virtual circuit.
  *
       * @param UpdateVirtualCircuitRequest
       * @return UpdateVirtualCircuitResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVirtualCircuit.ts.html |here} to see how to use UpdateVirtualCircuit API.
       */
    updateVirtualCircuit(updateVirtualCircuitRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateVirtualCircuit.");
            const pathParams = {
                "{virtualCircuitId}": updateVirtualCircuitRequest.virtualCircuitId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVirtualCircuitRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/virtualCircuits/{virtualCircuitId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVirtualCircuitRequest.updateVirtualCircuitDetails, "UpdateVirtualCircuitDetails", models.UpdateVirtualCircuitDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVirtualCircuitRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "virtualCircuit",
                    bodyModel: "model.VirtualCircuit",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified VLAN. Note that this operation might require changes to all
     * the VNICs in the VLAN, which can take a while. The VLAN will be in the UPDATING state until the changes are complete.
     *
     * @param UpdateVlanRequest
     * @return UpdateVlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVlan.ts.html |here} to see how to use UpdateVlan API.
     */
    updateVlan(updateVlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateVlan.");
            const pathParams = {
                "{vlanId}": updateVlanRequest.vlanId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVlanRequest.ifMatch,
                "opc-request-id": updateVlanRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vlans/{vlanId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVlanRequest.updateVlanDetails, "UpdateVlanDetails", models.UpdateVlanDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVlanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vlan",
                    bodyModel: "model.Vlan",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified VNIC.
     *
     * @param UpdateVnicRequest
     * @return UpdateVnicResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpdateVnic.ts.html |here} to see how to use UpdateVnic API.
     */
    updateVnic(updateVnicRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#updateVnic.");
            const pathParams = {
                "{vnicId}": updateVnicRequest.vnicId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateVnicRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vnics/{vnicId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateVnicRequest.updateVnicDetails, "UpdateVnicDetails", models.UpdateVnicDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateVnicRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "vnic",
                    bodyModel: "model.Vnic",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Upgrades the DRG. After upgrade, you can control routing inside your DRG
     * via DRG attachments, route distributions, and DRG route tables.
     *
     * @param UpgradeDrgRequest
     * @return UpgradeDrgResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/UpgradeDrg.ts.html |here} to see how to use UpgradeDrg API.
     */
    upgradeDrg(upgradeDrgRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#upgradeDrg.");
            const pathParams = {
                "{drgId}": upgradeDrgRequest.drgId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": upgradeDrgRequest.opcRequestId,
                "opc-retry-token": upgradeDrgRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/drgs/{drgId}/actions/upgrade",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upgradeDrgRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Submits the BYOIP CIDR block you are importing for validation. Do not submit to Oracle for validation if you have not already
     * modified the information for the BYOIP CIDR block with your Regional Internet Registry. See [To import a CIDR block](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/BYOIP.htm#import_cidr) for details.
     *
     * @param ValidateByoipRangeRequest
     * @return ValidateByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/ValidateByoipRange.ts.html |here} to see how to use ValidateByoipRange API.
     */
    validateByoipRange(validateByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#validateByoipRange.");
            const pathParams = {
                "{byoipRangeId}": validateByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": validateByoipRangeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}/actions/validate",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Withdraws BGP route advertisement for the BYOIP CIDR block.
     *
     * @param WithdrawByoipRangeRequest
     * @return WithdrawByoipRangeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/core/WithdrawByoipRange.ts.html |here} to see how to use WithdrawByoipRange API.
     */
    withdrawByoipRange(withdrawByoipRangeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VirtualNetworkClient#withdrawByoipRange.");
            const pathParams = {
                "{byoipRangeId}": withdrawByoipRangeRequest.byoipRangeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": withdrawByoipRangeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/byoipRanges/{byoipRangeId}/actions/withdraw",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, withdrawByoipRangeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.VirtualNetworkClient = VirtualNetworkClient;
VirtualNetworkClient.serviceEndpointTemplate = "https://iaas.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map