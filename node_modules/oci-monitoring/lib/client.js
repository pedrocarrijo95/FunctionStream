"use strict";
/**
 * Monitoring API
 * Use the Monitoring API to manage metric queries and alarms for assessing the health, capacity, and performance of your cloud resources.
Endpoints vary by operation. For PostMetric, use the `telemetry-ingestion` endpoints; for all other operations, use the `telemetry` endpoints.
For information about monitoring, see [Monitoring Overview](/iaas/Content/Monitoring/Concepts/monitoringoverview.htm).

 * OpenAPI spec version: 20180401
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringClient = exports.MonitoringApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const monitoring_waiter_1 = require("./monitoring-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var MonitoringApiKeys;
(function (MonitoringApiKeys) {
})(MonitoringApiKeys = exports.MonitoringApiKeys || (exports.MonitoringApiKeys = {}));
class MonitoringClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180401";
        if (this.logger)
            this.logger.info(`MonitoringClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(MonitoringClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(MonitoringClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new MonitoringWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new monitoring_waiter_1.MonitoringWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
       * Moves an alarm into a different compartment within the same tenancy.
  * <p>
  For information about moving resources between compartments, see [Moving Resources Between Compartments](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  *
       * @param ChangeAlarmCompartmentRequest
       * @return ChangeAlarmCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/ChangeAlarmCompartment.ts.html |here} to see how to use ChangeAlarmCompartment API.
       */
    changeAlarmCompartment(changeAlarmCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#changeAlarmCompartment.");
            const pathParams = {
                "{alarmId}": changeAlarmCompartmentRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeAlarmCompartmentRequest.ifMatch,
                "opc-request-id": changeAlarmCompartmentRequest.opcRequestId,
                "opc-retry-token": changeAlarmCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAlarmCompartmentRequest.changeAlarmCompartmentDetails, "ChangeAlarmCompartmentDetails", models.ChangeAlarmCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeAlarmCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new alarm in the specified compartment.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param CreateAlarmRequest
       * @return CreateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/CreateAlarm.ts.html |here} to see how to use CreateAlarm API.
       */
    createAlarm(createAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#createAlarm.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createAlarmRequest.opcRequestId,
                "opc-retry-token": createAlarmRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createAlarmRequest.createAlarmDetails, "CreateAlarmDetails", models.CreateAlarmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createAlarmRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Deletes the specified alarm.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param DeleteAlarmRequest
       * @return DeleteAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/DeleteAlarm.ts.html |here} to see how to use DeleteAlarm API.
       */
    deleteAlarm(deleteAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#deleteAlarm.");
            const pathParams = {
                "{alarmId}": deleteAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteAlarmRequest.ifMatch,
                "opc-request-id": deleteAlarmRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAlarmRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the specified alarm.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param GetAlarmRequest
       * @return GetAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/GetAlarm.ts.html |here} to see how to use GetAlarm API.
       */
    getAlarm(getAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#getAlarm.");
            const pathParams = {
                "{alarmId}": getAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlarmRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAlarmRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Get the history of the specified alarm.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param GetAlarmHistoryRequest
       * @return GetAlarmHistoryResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/GetAlarmHistory.ts.html |here} to see how to use GetAlarmHistory API.
       */
    getAlarmHistory(getAlarmHistoryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#getAlarmHistory.");
            const pathParams = {
                "{alarmId}": getAlarmHistoryRequest.alarmId
            };
            const queryParams = {
                "alarmHistorytype": getAlarmHistoryRequest.alarmHistorytype,
                "page": getAlarmHistoryRequest.page,
                "limit": getAlarmHistoryRequest.limit,
                "timestampGreaterThanOrEqualTo": getAlarmHistoryRequest.timestampGreaterThanOrEqualTo,
                "timestampLessThan": getAlarmHistoryRequest.timestampLessThan
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAlarmHistoryRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/history",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAlarmHistoryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarmHistoryCollection",
                    bodyModel: "model.AlarmHistoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the alarms for the specified compartment.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param ListAlarmsRequest
       * @return ListAlarmsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/ListAlarms.ts.html |here} to see how to use ListAlarms API.
       */
    listAlarms(listAlarmsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listAlarms.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAlarmsRequest.compartmentId,
                "page": listAlarmsRequest.page,
                "limit": listAlarmsRequest.limit,
                "displayName": listAlarmsRequest.displayName,
                "lifecycleState": listAlarmsRequest.lifecycleState,
                "sortBy": listAlarmsRequest.sortBy,
                "sortOrder": listAlarmsRequest.sortOrder,
                "compartmentIdInSubtree": listAlarmsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlarmsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAlarmsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AlarmSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AlarmSummary objects
     * contained in responses from the listAlarms operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarms(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarms(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarms operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarms(req));
    }
    /**
       * List the status of each alarm in the specified compartment.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param ListAlarmsStatusRequest
       * @return ListAlarmsStatusResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/ListAlarmsStatus.ts.html |here} to see how to use ListAlarmsStatus API.
       */
    listAlarmsStatus(listAlarmsStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listAlarmsStatus.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listAlarmsStatusRequest.compartmentId,
                "compartmentIdInSubtree": listAlarmsStatusRequest.compartmentIdInSubtree,
                "page": listAlarmsStatusRequest.page,
                "limit": listAlarmsStatusRequest.limit,
                "displayName": listAlarmsStatusRequest.displayName,
                "sortBy": listAlarmsStatusRequest.sortBy,
                "sortOrder": listAlarmsStatusRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAlarmsStatusRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/status",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAlarmsStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "AlarmStatusSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.AlarmStatusSummary objects
     * contained in responses from the listAlarmsStatus operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatus(request) {
        return oci_common_1.paginateRecords(request, req => this.listAlarmsStatus(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAlarmsStatus operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAlarmsStatusResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listAlarmsStatus(req));
    }
    /**
       * Returns metric definitions that match the criteria specified in the request. Compartment OCID required.
  * For information about metrics, see [Metrics Overview](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#MetricsOverview).
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * @param ListMetricsRequest
       * @return ListMetricsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/ListMetrics.ts.html |here} to see how to use ListMetrics API.
       */
    listMetrics(listMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#listMetrics.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMetricsRequest.compartmentId,
                "page": listMetricsRequest.page,
                "limit": listMetricsRequest.limit,
                "compartmentIdInSubtree": listMetricsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMetricsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics/actions/listMetrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(listMetricsRequest.listMetricsDetails, "ListMetricsDetails", models.ListMetricsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listMetricsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "Metric[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.Metric objects
     * contained in responses from the listMetrics operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetrics(request) {
        return oci_common_1.paginateRecords(request, req => this.listMetrics(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMetrics operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMetricsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMetrics(req));
    }
    /**
       * Publishes raw metric data points to the Monitoring service.
  * For more information about publishing metrics, see [Publishing Custom Metrics](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/publishingcustommetrics.htm).
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  Per-call limits information follows.
  * <p>
  * Dimensions per metric group*. Maximum: 20. Minimum: 1.
  * * Unique metric streams*. Maximum: 50.
  * * Transactions Per Second (TPS) per-tenancy limit for this operation: 50.
  * <p>
  *A metric group is the combination of a given metric, metric namespace, and tenancy for the purpose of determining limits.
  * A dimension is a qualifier provided in a metric definition.
  * A metric stream is an individual set of aggregated data for a metric, typically specific to a resource.
  * For more information about metric-related concepts, see [Monitoring Concepts](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#concepts).
  * <p>
  The endpoints for this operation differ from other Monitoring operations. Replace the string `telemetry` with `telemetry-ingestion` in the endpoint, as in the following example:
  * <p>
  https://telemetry-ingestion.eu-frankfurt-1.oraclecloud.com
  *
       * @param PostMetricDataRequest
       * @return PostMetricDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/PostMetricData.ts.html |here} to see how to use PostMetricData API.
       */
    postMetricData(postMetricDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#postMetricData.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": postMetricDataRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(postMetricDataRequest.postMetricDataDetails, "PostMetricDataDetails", models.PostMetricDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, postMetricDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "postMetricDataResponseDetails",
                    bodyModel: "model.PostMetricDataResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Removes any existing suppression for the specified alarm.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param RemoveAlarmSuppressionRequest
       * @return RemoveAlarmSuppressionResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/RemoveAlarmSuppression.ts.html |here} to see how to use RemoveAlarmSuppression API.
       */
    removeAlarmSuppression(removeAlarmSuppressionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#removeAlarmSuppression.");
            const pathParams = {
                "{alarmId}": removeAlarmSuppressionRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeAlarmSuppressionRequest.ifMatch,
                "opc-request-id": removeAlarmSuppressionRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}/actions/removeSuppression",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeAlarmSuppressionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns aggregated data that match the criteria specified in the request. Compartment OCID required.
  * For information on metric queries, see [Building Metric Queries](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Tasks/buildingqueries.htm).
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  Transactions Per Second (TPS) per-tenancy limit for this operation: 10.
  *
       * @param SummarizeMetricsDataRequest
       * @return SummarizeMetricsDataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/SummarizeMetricsData.ts.html |here} to see how to use SummarizeMetricsData API.
       */
    summarizeMetricsData(summarizeMetricsDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#summarizeMetricsData.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeMetricsDataRequest.compartmentId,
                "compartmentIdInSubtree": summarizeMetricsDataRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeMetricsDataRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/metrics/actions/summarizeMetricsData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(summarizeMetricsDataRequest.summarizeMetricsDataDetails, "SummarizeMetricsDataDetails", models.SummarizeMetricsDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeMetricsDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "MetricData[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Updates the specified alarm.
  * For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
  * <p>
  This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
  * Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
  * or transactions, per second (TPS) for a given tenancy.
  *
       * @param UpdateAlarmRequest
       * @return UpdateAlarmResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/monitoring/UpdateAlarm.ts.html |here} to see how to use UpdateAlarm API.
       */
    updateAlarm(updateAlarmRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation MonitoringClient#updateAlarm.");
            const pathParams = {
                "{alarmId}": updateAlarmRequest.alarmId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateAlarmRequest.ifMatch,
                "opc-request-id": updateAlarmRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/alarms/{alarmId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateAlarmRequest.updateAlarmDetails, "UpdateAlarmDetails", models.UpdateAlarmDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateAlarmRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "alarm",
                    bodyModel: "model.Alarm",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.MonitoringClient = MonitoringClient;
MonitoringClient.serviceEndpointTemplate = "https://telemetry.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map