"use strict";
/**
 * Operations Insights API
 * Use the Operations Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Operations Insights](https://docs.cloud.oracle.com/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostConfigurationMetricGroup = void 0;
const model = __importStar(require("../model"));
var HostConfigurationMetricGroup;
(function (HostConfigurationMetricGroup) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        if ("metricName" in obj && obj.metricName) {
            switch (obj.metricName) {
                case "HOST_RESOURCE_ALLOCATION":
                    return model.HostResourceAllocation.getJsonObj(jsonObj, true);
                case "HOST_PRODUCT":
                    return model.HostProduct.getJsonObj(jsonObj, true);
                case "HOST_NETWORK_CONFIGURATION":
                    return model.HostNetworkConfiguration.getJsonObj(jsonObj, true);
                case "HOST_ENTITIES":
                    return model.HostEntities.getJsonObj(jsonObj, true);
                case "HOST_MEMORY_CONFIGURATION":
                    return model.HostMemoryConfiguration.getJsonObj(jsonObj, true);
                case "HOST_CPU_HARDWARE_CONFIGURATION":
                    return model.HostCpuHardwareConfiguration.getJsonObj(jsonObj, true);
                case "HOST_HARDWARE_CONFIGURATION":
                    return model.HostHardwareConfiguration.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.metricName);
            }
        }
        return jsonObj;
    }
    HostConfigurationMetricGroup.getJsonObj = getJsonObj;
})(HostConfigurationMetricGroup = exports.HostConfigurationMetricGroup || (exports.HostConfigurationMetricGroup = {}));
//# sourceMappingURL=host-configuration-metric-group.js.map