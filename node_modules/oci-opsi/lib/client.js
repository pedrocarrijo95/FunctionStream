"use strict";
/**
 * Operations Insights API
 * Use the Operations Insights API to perform data extraction operations to obtain database
resource utilization, performance statistics, and reference information. For more information,
see [About Oracle Cloud Infrastructure Operations Insights](https://docs.cloud.oracle.com/en-us/iaas/operations-insights/doc/operations-insights.html).

 * OpenAPI spec version: 20200630
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationsInsightsClient = exports.OperationsInsightsApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const operationsinsights_waiter_1 = require("./operationsinsights-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var OperationsInsightsApiKeys;
(function (OperationsInsightsApiKeys) {
})(OperationsInsightsApiKeys = exports.OperationsInsightsApiKeys || (exports.OperationsInsightsApiKeys = {}));
class OperationsInsightsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20200630";
        if (this.logger)
            this.logger.info(`OperationsInsightsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OperationsInsightsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OperationsInsightsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new OperationsInsightsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new operationsinsights_waiter_1.OperationsInsightsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a DatabaseInsight resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * @param ChangeDatabaseInsightCompartmentRequest
     * @return ChangeDatabaseInsightCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ChangeDatabaseInsightCompartment.ts.html |here} to see how to use ChangeDatabaseInsightCompartment API.
     */
    changeDatabaseInsightCompartment(changeDatabaseInsightCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeDatabaseInsightCompartment.");
            const pathParams = {
                "{databaseInsightId}": changeDatabaseInsightCompartmentRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDatabaseInsightCompartmentRequest.ifMatch,
                "opc-request-id": changeDatabaseInsightCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDatabaseInsightCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseInsightCompartmentRequest.changeDatabaseInsightCompartmentDetails, "ChangeDatabaseInsightCompartmentDetails", models.ChangeDatabaseInsightCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDatabaseInsightCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a EnterpriseManagerBridge resource from one compartment to another. When provided, If-Match is checked against ETag values of the resource.
     * @param ChangeEnterpriseManagerBridgeCompartmentRequest
     * @return ChangeEnterpriseManagerBridgeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ChangeEnterpriseManagerBridgeCompartment.ts.html |here} to see how to use ChangeEnterpriseManagerBridgeCompartment API.
     */
    changeEnterpriseManagerBridgeCompartment(changeEnterpriseManagerBridgeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeEnterpriseManagerBridgeCompartment.");
            const pathParams = {
                "{enterpriseManagerBridgeId}": changeEnterpriseManagerBridgeCompartmentRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeEnterpriseManagerBridgeCompartmentRequest.ifMatch,
                "opc-request-id": changeEnterpriseManagerBridgeCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeEnterpriseManagerBridgeCompartmentRequest.changeEnterpriseManagerBridgeCompartmentDetails, "ChangeEnterpriseManagerBridgeCompartmentDetails", models.ChangeEnterpriseManagerBridgeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeEnterpriseManagerBridgeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostInsight resource from one compartment identifier to another. When provided, If-Match is checked against ETag values of the resource.
     * @param ChangeHostInsightCompartmentRequest
     * @return ChangeHostInsightCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ChangeHostInsightCompartment.ts.html |here} to see how to use ChangeHostInsightCompartment API.
     */
    changeHostInsightCompartment(changeHostInsightCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#changeHostInsightCompartment.");
            const pathParams = {
                "{hostInsightId}": changeHostInsightCompartmentRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostInsightCompartmentRequest.ifMatch,
                "opc-request-id": changeHostInsightCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostInsightCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostInsightCompartmentRequest.changeHostInsightCompartmentDetails, "ChangeHostInsightCompartmentDetails", models.ChangeHostInsightCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostInsightCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Database Insight resource for a database in Operations Insights. The database will be enabled in Operations Insights. Database metric collection and analysis will be started.
     *
     * @param CreateDatabaseInsightRequest
     * @return CreateDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/CreateDatabaseInsight.ts.html |here} to see how to use CreateDatabaseInsight API.
     */
    createDatabaseInsight(createDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createDatabaseInsight.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDatabaseInsightRequest.opcRetryToken,
                "opc-request-id": createDatabaseInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDatabaseInsightRequest.createDatabaseInsightDetails, "CreateDatabaseInsightDetails", models.CreateDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsight",
                    bodyModel: "model.DatabaseInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Enterprise Manager bridge in Operations Insights.
     *
     * @param CreateEnterpriseManagerBridgeRequest
     * @return CreateEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/CreateEnterpriseManagerBridge.ts.html |here} to see how to use CreateEnterpriseManagerBridge API.
     */
    createEnterpriseManagerBridge(createEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createEnterpriseManagerBridge.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createEnterpriseManagerBridgeRequest.opcRetryToken,
                "opc-request-id": createEnterpriseManagerBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEnterpriseManagerBridgeRequest.createEnterpriseManagerBridgeDetails, "CreateEnterpriseManagerBridgeDetails", models.CreateEnterpriseManagerBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createEnterpriseManagerBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridge",
                    bodyModel: "model.EnterpriseManagerBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a Host Insight resource for a host in Operations Insights. The host will be enabled in Operations Insights. Host metric collection and analysis will be started.
     *
     * @param CreateHostInsightRequest
     * @return CreateHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/CreateHostInsight.ts.html |here} to see how to use CreateHostInsight API.
     */
    createHostInsight(createHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#createHostInsight.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostInsightRequest.opcRetryToken,
                "opc-request-id": createHostInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostInsightRequest.createHostInsightDetails, "CreateHostInsightDetails", models.CreateHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsight",
                    bodyModel: "model.HostInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-location"),
                            key: "contentLocation",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a database insight. The database insight will be deleted and cannot be enabled again.
     * @param DeleteDatabaseInsightRequest
     * @return DeleteDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/DeleteDatabaseInsight.ts.html |here} to see how to use DeleteDatabaseInsight API.
     */
    deleteDatabaseInsight(deleteDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteDatabaseInsight.");
            const pathParams = {
                "{databaseInsightId}": deleteDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDatabaseInsightRequest.ifMatch,
                "opc-request-id": deleteDatabaseInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Operations Insights Enterprise Manager bridge. If any database insight is still referencing this bridge, the operation will fail.
     * @param DeleteEnterpriseManagerBridgeRequest
     * @return DeleteEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/DeleteEnterpriseManagerBridge.ts.html |here} to see how to use DeleteEnterpriseManagerBridge API.
     */
    deleteEnterpriseManagerBridge(deleteEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteEnterpriseManagerBridge.");
            const pathParams = {
                "{enterpriseManagerBridgeId}": deleteEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteEnterpriseManagerBridgeRequest.ifMatch,
                "opc-request-id": deleteEnterpriseManagerBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteEnterpriseManagerBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a host insight. The host insight will be deleted and cannot be enabled again.
     * @param DeleteHostInsightRequest
     * @return DeleteHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/DeleteHostInsight.ts.html |here} to see how to use DeleteHostInsight API.
     */
    deleteHostInsight(deleteHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#deleteHostInsight.");
            const pathParams = {
                "{hostInsightId}": deleteHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostInsightRequest.ifMatch,
                "opc-request-id": deleteHostInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a database in Operations Insights. Database metric collection and analysis will be stopped.
     * @param DisableDatabaseInsightRequest
     * @return DisableDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/DisableDatabaseInsight.ts.html |here} to see how to use DisableDatabaseInsight API.
     */
    disableDatabaseInsight(disableDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableDatabaseInsight.");
            const pathParams = {
                "{databaseInsightId}": disableDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableDatabaseInsightRequest.ifMatch,
                "opc-request-id": disableDatabaseInsightRequest.opcRequestId,
                "opc-retry-token": disableDatabaseInsightRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, disableDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a host in Operations Insights. Host metric collection and analysis will be stopped.
     * @param DisableHostInsightRequest
     * @return DisableHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/DisableHostInsight.ts.html |here} to see how to use DisableHostInsight API.
     */
    disableHostInsight(disableHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#disableHostInsight.");
            const pathParams = {
                "{hostInsightId}": disableHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableHostInsightRequest.ifMatch,
                "opc-request-id": disableHostInsightRequest.opcRequestId,
                "opc-retry-token": disableHostInsightRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/disable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, disableHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a database in Operations Insights. Database metric collection and analysis will be started.
     * @param EnableDatabaseInsightRequest
     * @return EnableDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/EnableDatabaseInsight.ts.html |here} to see how to use EnableDatabaseInsight API.
     */
    enableDatabaseInsight(enableDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableDatabaseInsight.");
            const pathParams = {
                "{databaseInsightId}": enableDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableDatabaseInsightRequest.ifMatch,
                "opc-request-id": enableDatabaseInsightRequest.opcRequestId,
                "opc-retry-token": enableDatabaseInsightRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}/actions/enable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableDatabaseInsightRequest.enableDatabaseInsightDetails, "EnableDatabaseInsightDetails", models.EnableDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, enableDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a host in Operations Insights. Host metric collection and analysis will be started.
     * @param EnableHostInsightRequest
     * @return EnableHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/EnableHostInsight.ts.html |here} to see how to use EnableHostInsight API.
     */
    enableHostInsight(enableHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#enableHostInsight.");
            const pathParams = {
                "{hostInsightId}": enableHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableHostInsightRequest.ifMatch,
                "opc-request-id": enableHostInsightRequest.opcRequestId,
                "opc-retry-token": enableHostInsightRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}/actions/enable",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableHostInsightRequest.enableHostInsightDetails, "EnableHostInsightDetails", models.EnableHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, enableHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a database insight.
     * @param GetDatabaseInsightRequest
     * @return GetDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/GetDatabaseInsight.ts.html |here} to see how to use GetDatabaseInsight API.
     */
    getDatabaseInsight(getDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getDatabaseInsight.");
            const pathParams = {
                "{databaseInsightId}": getDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsight",
                    bodyModel: "model.DatabaseInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of an Operations Insights Enterprise Manager bridge.
     * @param GetEnterpriseManagerBridgeRequest
     * @return GetEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/GetEnterpriseManagerBridge.ts.html |here} to see how to use GetEnterpriseManagerBridge API.
     */
    getEnterpriseManagerBridge(getEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getEnterpriseManagerBridge.");
            const pathParams = {
                "{enterpriseManagerBridgeId}": getEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getEnterpriseManagerBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getEnterpriseManagerBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridge",
                    bodyModel: "model.EnterpriseManagerBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets details of a host insight.
     * @param GetHostInsightRequest
     * @return GetHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/GetHostInsight.ts.html |here} to see how to use GetHostInsight API.
     */
    getHostInsight(getHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getHostInsight.");
            const pathParams = {
                "{hostInsightId}": getHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsight",
                    bodyModel: "model.HostInsight",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#getWorkRequest.");
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all database configuration metrics.
     * @param IngestDatabaseConfigurationRequest
     * @return IngestDatabaseConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestDatabaseConfiguration.ts.html |here} to see how to use IngestDatabaseConfiguration API.
     */
    ingestDatabaseConfiguration(ingestDatabaseConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestDatabaseConfiguration.");
            const pathParams = {};
            const queryParams = {
                "databaseId": ingestDatabaseConfigurationRequest.databaseId,
                "id": ingestDatabaseConfigurationRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestDatabaseConfigurationRequest.opcRequestId,
                "if-match": ingestDatabaseConfigurationRequest.ifMatch,
                "opc-retry-token": ingestDatabaseConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestDatabaseConfiguration",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestDatabaseConfigurationRequest.ingestDatabaseConfigurationDetails, "IngestDatabaseConfigurationDetails", models.IngestDatabaseConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestDatabaseConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestDatabaseConfigurationResponseDetails",
                    bodyModel: "model.IngestDatabaseConfigurationResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all the host configuration metrics
     * @param IngestHostConfigurationRequest
     * @return IngestHostConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestHostConfiguration.ts.html |here} to see how to use IngestHostConfiguration API.
     */
    ingestHostConfiguration(ingestHostConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestHostConfiguration.");
            const pathParams = {};
            const queryParams = {
                "id": ingestHostConfigurationRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestHostConfigurationRequest.opcRequestId,
                "if-match": ingestHostConfigurationRequest.ifMatch,
                "opc-retry-token": ingestHostConfigurationRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/actions/ingestHostConfiguration",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestHostConfigurationRequest.ingestHostConfigurationDetails, "IngestHostConfigurationDetails", models.IngestHostConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestHostConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestHostConfigurationResponseDetails",
                    bodyModel: "model.IngestHostConfigurationResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This is a generic ingest endpoint for all the host performance metrics
     * @param IngestHostMetricsRequest
     * @return IngestHostMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestHostMetrics.ts.html |here} to see how to use IngestHostMetrics API.
     */
    ingestHostMetrics(ingestHostMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestHostMetrics.");
            const pathParams = {};
            const queryParams = {
                "id": ingestHostMetricsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestHostMetricsRequest.opcRequestId,
                "if-match": ingestHostMetricsRequest.ifMatch,
                "opc-retry-token": ingestHostMetricsRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/actions/ingestHostMetrics",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestHostMetricsRequest.ingestHostMetricsDetails, "IngestHostMetricsDetails", models.IngestHostMetricsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestHostMetricsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestHostMetricsResponseDetails",
                    bodyModel: "model.IngestHostMetricsResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The sqlbucket endpoint takes in a JSON payload, persists it in Operations Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * @param IngestSqlBucketRequest
     * @return IngestSqlBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestSqlBucket.ts.html |here} to see how to use IngestSqlBucket API.
     */
    ingestSqlBucket(ingestSqlBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlBucket.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlBucketRequest.compartmentId,
                "databaseId": ingestSqlBucketRequest.databaseId,
                "id": ingestSqlBucketRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlBucketRequest.opcRequestId,
                "if-match": ingestSqlBucketRequest.ifMatch,
                "opc-retry-token": ingestSqlBucketRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlBucket",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlBucketRequest.ingestSqlBucketDetails, "IngestSqlBucketDetails", models.IngestSqlBucketDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestSqlBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlBucketResponseDetails",
                    bodyModel: "model.IngestSqlBucketResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SqlPlanLines endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     *
     * @param IngestSqlPlanLinesRequest
     * @return IngestSqlPlanLinesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestSqlPlanLines.ts.html |here} to see how to use IngestSqlPlanLines API.
     */
    ingestSqlPlanLines(ingestSqlPlanLinesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlPlanLines.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlPlanLinesRequest.compartmentId,
                "databaseId": ingestSqlPlanLinesRequest.databaseId,
                "id": ingestSqlPlanLinesRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlPlanLinesRequest.opcRequestId,
                "if-match": ingestSqlPlanLinesRequest.ifMatch,
                "opc-retry-token": ingestSqlPlanLinesRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlPlanLines",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlPlanLinesRequest.ingestSqlPlanLinesDetails, "IngestSqlPlanLinesDetails", models.IngestSqlPlanLinesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestSqlPlanLinesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlPlanLinesResponseDetails",
                    bodyModel: "model.IngestSqlPlanLinesResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The SqlText endpoint takes in a JSON payload, persists it in Operation Insights ingest pipeline.
     * Either databaseId or id must be specified.
     * Disclaimer: SQL text being uploaded explicitly via APIs is not masked. Any sensitive literals contained in the sqlFullText column should be masked prior to ingestion.
     *
     * @param IngestSqlTextRequest
     * @return IngestSqlTextResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/IngestSqlText.ts.html |here} to see how to use IngestSqlText API.
     */
    ingestSqlText(ingestSqlTextRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#ingestSqlText.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": ingestSqlTextRequest.compartmentId,
                "databaseId": ingestSqlTextRequest.databaseId,
                "id": ingestSqlTextRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": ingestSqlTextRequest.opcRequestId,
                "if-match": ingestSqlTextRequest.ifMatch,
                "opc-retry-token": ingestSqlTextRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/actions/ingestSqlText",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(ingestSqlTextRequest.ingestSqlTextDetails, "IngestSqlTextDetails", models.IngestSqlTextDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, ingestSqlTextRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "ingestSqlTextResponseDetails",
                    bodyModel: "model.IngestSqlTextResponseDetails",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of database insights based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     * @param ListDatabaseInsightsRequest
     * @return ListDatabaseInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListDatabaseInsights.ts.html |here} to see how to use ListDatabaseInsights API.
     */
    listDatabaseInsights(listDatabaseInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listDatabaseInsights.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDatabaseInsightsRequest.compartmentId,
                "enterpriseManagerBridgeId": listDatabaseInsightsRequest.enterpriseManagerBridgeId,
                "id": listDatabaseInsightsRequest.id,
                "status": listDatabaseInsightsRequest.status,
                "lifecycleState": listDatabaseInsightsRequest.lifecycleState,
                "databaseType": listDatabaseInsightsRequest.databaseType,
                "databaseId": listDatabaseInsightsRequest.databaseId,
                "fields": listDatabaseInsightsRequest.fields,
                "limit": listDatabaseInsightsRequest.limit,
                "page": listDatabaseInsightsRequest.page,
                "sortOrder": listDatabaseInsightsRequest.sortOrder,
                "sortBy": listDatabaseInsightsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseInsightsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDatabaseInsightsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseInsightsCollection",
                    bodyModel: "model.DatabaseInsightsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of Operations Insights Enterprise Manager bridges. Either compartmentId or id must be specified.
     *
     * @param ListEnterpriseManagerBridgesRequest
     * @return ListEnterpriseManagerBridgesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListEnterpriseManagerBridges.ts.html |here} to see how to use ListEnterpriseManagerBridges API.
     */
    listEnterpriseManagerBridges(listEnterpriseManagerBridgesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listEnterpriseManagerBridges.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEnterpriseManagerBridgesRequest.compartmentId,
                "displayName": listEnterpriseManagerBridgesRequest.displayName,
                "id": listEnterpriseManagerBridgesRequest.id,
                "lifecycleState": listEnterpriseManagerBridgesRequest.lifecycleState,
                "limit": listEnterpriseManagerBridgesRequest.limit,
                "page": listEnterpriseManagerBridgesRequest.page,
                "sortOrder": listEnterpriseManagerBridgesRequest.sortOrder,
                "sortBy": listEnterpriseManagerBridgesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEnterpriseManagerBridgesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listEnterpriseManagerBridgesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "enterpriseManagerBridgeCollection",
                    bodyModel: "model.EnterpriseManagerBridgeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of host insights based on the query parameters specified. Either compartmentId or id query parameter must be specified.
     * @param ListHostInsightsRequest
     * @return ListHostInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListHostInsights.ts.html |here} to see how to use ListHostInsights API.
     */
    listHostInsights(listHostInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listHostInsights.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostInsightsRequest.compartmentId,
                "id": listHostInsightsRequest.id,
                "status": listHostInsightsRequest.status,
                "lifecycleState": listHostInsightsRequest.lifecycleState,
                "hostType": listHostInsightsRequest.hostType,
                "platformType": listHostInsightsRequest.platformType,
                "limit": listHostInsightsRequest.limit,
                "page": listHostInsightsRequest.page,
                "sortOrder": listHostInsightsRequest.sortOrder,
                "sortBy": listHostInsightsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostInsightsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostInsightsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostInsightSummaryCollection",
                    bodyModel: "model.HostInsightSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a list of hosted entities details.
     *
     * @param ListHostedEntitiesRequest
     * @return ListHostedEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListHostedEntities.ts.html |here} to see how to use ListHostedEntities API.
     */
    listHostedEntities(listHostedEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listHostedEntities.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostedEntitiesRequest.compartmentId,
                "analysisTimeInterval": listHostedEntitiesRequest.analysisTimeInterval,
                "timeIntervalStart": listHostedEntitiesRequest.timeIntervalStart,
                "timeIntervalEnd": listHostedEntitiesRequest.timeIntervalEnd,
                "platformType": listHostedEntitiesRequest.platformType,
                "id": listHostedEntitiesRequest.id,
                "limit": listHostedEntitiesRequest.limit,
                "page": listHostedEntitiesRequest.page,
                "sortOrder": listHostedEntitiesRequest.sortOrder,
                "sortBy": listHostedEntitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostedEntitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/hostedEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostedEntitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostedEntityCollection",
                    bodyModel: "model.HostedEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of importable entities for an Operations Insights Enterprise Manager bridge that have not been imported before.
     *
     * @param ListImportableEnterpriseManagerEntitiesRequest
     * @return ListImportableEnterpriseManagerEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListImportableEnterpriseManagerEntities.ts.html |here} to see how to use ListImportableEnterpriseManagerEntities API.
     */
    listImportableEnterpriseManagerEntities(listImportableEnterpriseManagerEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listImportableEnterpriseManagerEntities.");
            const pathParams = {
                "{enterpriseManagerBridgeId}": listImportableEnterpriseManagerEntitiesRequest.enterpriseManagerBridgeId
            };
            const queryParams = {
                "limit": listImportableEnterpriseManagerEntitiesRequest.limit,
                "page": listImportableEnterpriseManagerEntitiesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImportableEnterpriseManagerEntitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}/importableEnterpriseManagerEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listImportableEnterpriseManagerEntitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "importableEnterpriseManagerEntityCollection",
                    bodyModel: "model.ImportableEnterpriseManagerEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to list the plan xml for a given SQL execution plan. This returns a SqlPlanCollection object, but is currently limited to a single plan.
     * Either databaseId or id must be specified.
     *
     * @param ListSqlPlansRequest
     * @return ListSqlPlansResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListSqlPlans.ts.html |here} to see how to use ListSqlPlans API.
     */
    listSqlPlans(listSqlPlansRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlPlans.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlPlansRequest.compartmentId,
                "databaseId": listSqlPlansRequest.databaseId,
                "id": listSqlPlansRequest.id,
                "sqlIdentifier": listSqlPlansRequest.sqlIdentifier,
                "planHash": listSqlPlansRequest.planHash,
                "page": listSqlPlansRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlPlansRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlPlans",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSqlPlansRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlPlanCollection",
                    bodyModel: "model.SqlPlanCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Search SQL by SQL Identifier across databases and get the SQL Text and the details of the databases executing the SQL for a given time period.
     * @param ListSqlSearchesRequest
     * @return ListSqlSearchesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListSqlSearches.ts.html |here} to see how to use ListSqlSearches API.
     */
    listSqlSearches(listSqlSearchesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlSearches.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlSearchesRequest.compartmentId,
                "sqlIdentifier": listSqlSearchesRequest.sqlIdentifier,
                "analysisTimeInterval": listSqlSearchesRequest.analysisTimeInterval,
                "timeIntervalStart": listSqlSearchesRequest.timeIntervalStart,
                "timeIntervalEnd": listSqlSearchesRequest.timeIntervalEnd,
                "page": listSqlSearchesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlSearchesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlSearches",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSqlSearchesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlSearchCollection",
                    bodyModel: "model.SqlSearchCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the full SQL Text for a SQL.
     * @param ListSqlTextsRequest
     * @return ListSqlTextsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListSqlTexts.ts.html |here} to see how to use ListSqlTexts API.
     */
    listSqlTexts(listSqlTextsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listSqlTexts.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSqlTextsRequest.compartmentId,
                "databaseId": listSqlTextsRequest.databaseId,
                "id": listSqlTextsRequest.id,
                "sqlIdentifier": listSqlTextsRequest.sqlIdentifier,
                "page": listSqlTextsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSqlTextsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlTexts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSqlTextsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlTextCollection",
                    bodyModel: "model.SqlTextCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequestErrors.");
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequestLogs.");
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestLogsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#listWorkRequests.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity, baseCapacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     *
     * @param SummarizeDatabaseInsightResourceCapacityTrendRequest
     * @return SummarizeDatabaseInsightResourceCapacityTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceCapacityTrend API.
     */
    summarizeDatabaseInsightResourceCapacityTrend(summarizeDatabaseInsightResourceCapacityTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceCapacityTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceCapacityTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceCapacityTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceCapacityTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceCapacityTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceCapacityTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceCapacityTrendRequest.id,
                "utilizationLevel": summarizeDatabaseInsightResourceCapacityTrendRequest.utilizationLevel,
                "page": summarizeDatabaseInsightResourceCapacityTrendRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceCapacityTrendRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceCapacityTrendRequest.sortBy,
                "tablespaceName": summarizeDatabaseInsightResourceCapacityTrendRequest.tablespaceName,
                "hostName": summarizeDatabaseInsightResourceCapacityTrendRequest.hostName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceCapacityTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceCapacityTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceCapacityTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
                    bodyModel: "model.SummarizeDatabaseInsightResourceCapacityTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Forecast predictions for CPU and Storage resources since a time in the past.
     *
     * @param SummarizeDatabaseInsightResourceForecastTrendRequest
     * @return SummarizeDatabaseInsightResourceForecastTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceForecastTrend API.
     */
    summarizeDatabaseInsightResourceForecastTrend(summarizeDatabaseInsightResourceForecastTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceForecastTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceForecastTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceForecastTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceForecastTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceForecastTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceForecastTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceForecastTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceForecastTrendRequest.id,
                "statistic": summarizeDatabaseInsightResourceForecastTrendRequest.statistic,
                "forecastDays": summarizeDatabaseInsightResourceForecastTrendRequest.forecastDays,
                "forecastModel": summarizeDatabaseInsightResourceForecastTrendRequest.forecastModel,
                "utilizationLevel": summarizeDatabaseInsightResourceForecastTrendRequest.utilizationLevel,
                "confidence": summarizeDatabaseInsightResourceForecastTrendRequest.confidence,
                "page": summarizeDatabaseInsightResourceForecastTrendRequest.page,
                "hostName": summarizeDatabaseInsightResourceForecastTrendRequest.hostName,
                "tablespaceName": summarizeDatabaseInsightResourceForecastTrendRequest.tablespaceName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceForecastTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceForecastTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceForecastTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceForecastTrendAggregation",
                    bodyModel: "model.SummarizeDatabaseInsightResourceForecastTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the Resource statistics (usage,capacity, usage change percent, utilization percent, base capacity, isAutoScalingEnabled) for each database filtered by utilization level
     * @param SummarizeDatabaseInsightResourceStatisticsRequest
     * @return SummarizeDatabaseInsightResourceStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceStatistics.ts.html |here} to see how to use SummarizeDatabaseInsightResourceStatistics API.
     */
    summarizeDatabaseInsightResourceStatistics(summarizeDatabaseInsightResourceStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceStatistics.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceStatisticsRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceStatisticsRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceStatisticsRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceStatisticsRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceStatisticsRequest.databaseId,
                "id": summarizeDatabaseInsightResourceStatisticsRequest.id,
                "percentile": summarizeDatabaseInsightResourceStatisticsRequest.percentile,
                "insightBy": summarizeDatabaseInsightResourceStatisticsRequest.insightBy,
                "forecastDays": summarizeDatabaseInsightResourceStatisticsRequest.forecastDays,
                "limit": summarizeDatabaseInsightResourceStatisticsRequest.limit,
                "page": summarizeDatabaseInsightResourceStatisticsRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceStatisticsRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceStatisticsRequest.sortBy,
                "hostName": summarizeDatabaseInsightResourceStatisticsRequest.hostName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceStatisticsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceStatisticsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceStatisticsAggregationCollection",
                    bodyModel: "model.SummarizeDatabaseInsightResourceStatisticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per database within the specified time period.
     * For each database, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     *
     * @param SummarizeDatabaseInsightResourceUsageRequest
     * @return SummarizeDatabaseInsightResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceUsage.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsage API.
     */
    summarizeDatabaseInsightResourceUsage(summarizeDatabaseInsightResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsage.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUsageRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUsageRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUsageRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUsageRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUsageRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUsageRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUsageRequest.id,
                "page": summarizeDatabaseInsightResourceUsageRequest.page,
                "percentile": summarizeDatabaseInsightResourceUsageRequest.percentile
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUsageRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceUsageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUsageAggregation",
                    bodyModel: "model.SummarizeDatabaseInsightResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, usage, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     *
     * @param SummarizeDatabaseInsightResourceUsageTrendRequest
     * @return SummarizeDatabaseInsightResourceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceUsageTrend.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUsageTrend API.
     */
    summarizeDatabaseInsightResourceUsageTrend(summarizeDatabaseInsightResourceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUsageTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUsageTrendRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUsageTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUsageTrendRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUsageTrendRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUsageTrendRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUsageTrendRequest.id,
                "page": summarizeDatabaseInsightResourceUsageTrendRequest.page,
                "sortOrder": summarizeDatabaseInsightResourceUsageTrendRequest.sortOrder,
                "sortBy": summarizeDatabaseInsightResourceUsageTrendRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUsageTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceUsageTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUsageTrendAggregationCollection",
                    bodyModel: "model.SummarizeDatabaseInsightResourceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets resources with current utilization (high and low) and projected utilization (high and low) for a resource type over specified time period.
     * @param SummarizeDatabaseInsightResourceUtilizationInsightRequest
     * @return SummarizeDatabaseInsightResourceUtilizationInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeDatabaseInsightResourceUtilizationInsight API.
     */
    summarizeDatabaseInsightResourceUtilizationInsight(summarizeDatabaseInsightResourceUtilizationInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightResourceUtilizationInsight.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightResourceUtilizationInsightRequest.compartmentId,
                "resourceMetric": summarizeDatabaseInsightResourceUtilizationInsightRequest.resourceMetric,
                "analysisTimeInterval": summarizeDatabaseInsightResourceUtilizationInsightRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightResourceUtilizationInsightRequest.timeIntervalEnd,
                "databaseType": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseType,
                "databaseId": summarizeDatabaseInsightResourceUtilizationInsightRequest.databaseId,
                "id": summarizeDatabaseInsightResourceUtilizationInsightRequest.id,
                "forecastDays": summarizeDatabaseInsightResourceUtilizationInsightRequest.forecastDays,
                "page": summarizeDatabaseInsightResourceUtilizationInsightRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightResourceUtilizationInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/resourceUtilizationInsight",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightResourceUtilizationInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightResourceUtilizationInsightAggregation",
                    bodyModel: "model.SummarizeDatabaseInsightResourceUtilizationInsightAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with usage time series data (endTimestamp, usage, capacity) with breakdown by tablespaceName for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     * Either databaseId or id must be specified.
     *
     * @param SummarizeDatabaseInsightTablespaceUsageTrendRequest
     * @return SummarizeDatabaseInsightTablespaceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeDatabaseInsightTablespaceUsageTrend.ts.html |here} to see how to use SummarizeDatabaseInsightTablespaceUsageTrend API.
     */
    summarizeDatabaseInsightTablespaceUsageTrend(summarizeDatabaseInsightTablespaceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeDatabaseInsightTablespaceUsageTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeDatabaseInsightTablespaceUsageTrendRequest.compartmentId,
                "analysisTimeInterval": summarizeDatabaseInsightTablespaceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeDatabaseInsightTablespaceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeDatabaseInsightTablespaceUsageTrendRequest.timeIntervalEnd,
                "databaseId": summarizeDatabaseInsightTablespaceUsageTrendRequest.databaseId,
                "id": summarizeDatabaseInsightTablespaceUsageTrendRequest.id,
                "page": summarizeDatabaseInsightTablespaceUsageTrendRequest.page,
                "limit": summarizeDatabaseInsightTablespaceUsageTrendRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeDatabaseInsightTablespaceUsageTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/tablespaceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeDatabaseInsightTablespaceUsageTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeDatabaseInsightTablespaceUsageTrendAggregationCollection",
                    bodyModel: "model.SummarizeDatabaseInsightTablespaceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     *
     * @param SummarizeHostInsightResourceCapacityTrendRequest
     * @return SummarizeHostInsightResourceCapacityTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceCapacityTrend.ts.html |here} to see how to use SummarizeHostInsightResourceCapacityTrend API.
     */
    summarizeHostInsightResourceCapacityTrend(summarizeHostInsightResourceCapacityTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceCapacityTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceCapacityTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceCapacityTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceCapacityTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceCapacityTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceCapacityTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceCapacityTrendRequest.platformType,
                "id": summarizeHostInsightResourceCapacityTrendRequest.id,
                "utilizationLevel": summarizeHostInsightResourceCapacityTrendRequest.utilizationLevel,
                "page": summarizeHostInsightResourceCapacityTrendRequest.page,
                "sortOrder": summarizeHostInsightResourceCapacityTrendRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceCapacityTrendRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceCapacityTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceCapacityTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceCapacityTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceCapacityTrendAggregationCollection",
                    bodyModel: "model.SummarizeHostInsightResourceCapacityTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get Forecast predictions for CPU or memory resources since a time in the past.
     *
     * @param SummarizeHostInsightResourceForecastTrendRequest
     * @return SummarizeHostInsightResourceForecastTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceForecastTrend.ts.html |here} to see how to use SummarizeHostInsightResourceForecastTrend API.
     */
    summarizeHostInsightResourceForecastTrend(summarizeHostInsightResourceForecastTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceForecastTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceForecastTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceForecastTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceForecastTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceForecastTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceForecastTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceForecastTrendRequest.platformType,
                "id": summarizeHostInsightResourceForecastTrendRequest.id,
                "statistic": summarizeHostInsightResourceForecastTrendRequest.statistic,
                "forecastDays": summarizeHostInsightResourceForecastTrendRequest.forecastDays,
                "forecastModel": summarizeHostInsightResourceForecastTrendRequest.forecastModel,
                "utilizationLevel": summarizeHostInsightResourceForecastTrendRequest.utilizationLevel,
                "confidence": summarizeHostInsightResourceForecastTrendRequest.confidence,
                "page": summarizeHostInsightResourceForecastTrendRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceForecastTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceForecastTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceForecastTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceForecastTrendAggregation",
                    bodyModel: "model.SummarizeHostInsightResourceForecastTrendAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the resource statistics (usage, capacity, usage change percent, utilization percent, load) for each host filtered
     * by utilization level.
     *
     * @param SummarizeHostInsightResourceStatisticsRequest
     * @return SummarizeHostInsightResourceStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceStatistics.ts.html |here} to see how to use SummarizeHostInsightResourceStatistics API.
     */
    summarizeHostInsightResourceStatistics(summarizeHostInsightResourceStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceStatistics.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceStatisticsRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceStatisticsRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceStatisticsRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceStatisticsRequest.platformType,
                "id": summarizeHostInsightResourceStatisticsRequest.id,
                "percentile": summarizeHostInsightResourceStatisticsRequest.percentile,
                "insightBy": summarizeHostInsightResourceStatisticsRequest.insightBy,
                "forecastDays": summarizeHostInsightResourceStatisticsRequest.forecastDays,
                "limit": summarizeHostInsightResourceStatisticsRequest.limit,
                "page": summarizeHostInsightResourceStatisticsRequest.page,
                "sortOrder": summarizeHostInsightResourceStatisticsRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceStatisticsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceStatisticsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceStatisticsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceStatisticsAggregationCollection",
                    bodyModel: "model.SummarizeHostInsightResourceStatisticsAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * A cumulative distribution function is used to rank the usage data points per host within the specified time period.
     * For each host, the minimum data point with a ranking > the percentile value is included in the summation.
     * Linear regression functions are used to calculate the usage change percentage.
     *
     * @param SummarizeHostInsightResourceUsageRequest
     * @return SummarizeHostInsightResourceUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceUsage.ts.html |here} to see how to use SummarizeHostInsightResourceUsage API.
     */
    summarizeHostInsightResourceUsage(summarizeHostInsightResourceUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUsage.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUsageRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUsageRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUsageRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUsageRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUsageRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUsageRequest.platformType,
                "id": summarizeHostInsightResourceUsageRequest.id,
                "page": summarizeHostInsightResourceUsageRequest.page,
                "percentile": summarizeHostInsightResourceUsageRequest.percentile
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUsageRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUsageSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceUsageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUsageAggregation",
                    bodyModel: "model.SummarizeHostInsightResourceUsageAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns response with time series data (endTimestamp, usage, capacity) for the time period specified.
     * The maximum time range for analysis is 2 years, hence this is intentionally not paginated.
     *
     * @param SummarizeHostInsightResourceUsageTrendRequest
     * @return SummarizeHostInsightResourceUsageTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceUsageTrend.ts.html |here} to see how to use SummarizeHostInsightResourceUsageTrend API.
     */
    summarizeHostInsightResourceUsageTrend(summarizeHostInsightResourceUsageTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUsageTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUsageTrendRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUsageTrendRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUsageTrendRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUsageTrendRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUsageTrendRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUsageTrendRequest.platformType,
                "id": summarizeHostInsightResourceUsageTrendRequest.id,
                "page": summarizeHostInsightResourceUsageTrendRequest.page,
                "sortOrder": summarizeHostInsightResourceUsageTrendRequest.sortOrder,
                "sortBy": summarizeHostInsightResourceUsageTrendRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUsageTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUsageTrend",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceUsageTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUsageTrendAggregationCollection",
                    bodyModel: "model.SummarizeHostInsightResourceUsageTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets resources with current utilization (high and low) and projected utilization (high and low) for a resource type over specified time period.
     * @param SummarizeHostInsightResourceUtilizationInsightRequest
     * @return SummarizeHostInsightResourceUtilizationInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeHostInsightResourceUtilizationInsight.ts.html |here} to see how to use SummarizeHostInsightResourceUtilizationInsight API.
     */
    summarizeHostInsightResourceUtilizationInsight(summarizeHostInsightResourceUtilizationInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeHostInsightResourceUtilizationInsight.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeHostInsightResourceUtilizationInsightRequest.compartmentId,
                "resourceMetric": summarizeHostInsightResourceUtilizationInsightRequest.resourceMetric,
                "analysisTimeInterval": summarizeHostInsightResourceUtilizationInsightRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeHostInsightResourceUtilizationInsightRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeHostInsightResourceUtilizationInsightRequest.timeIntervalEnd,
                "platformType": summarizeHostInsightResourceUtilizationInsightRequest.platformType,
                "id": summarizeHostInsightResourceUtilizationInsightRequest.id,
                "forecastDays": summarizeHostInsightResourceUtilizationInsightRequest.forecastDays,
                "page": summarizeHostInsightResourceUtilizationInsightRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeHostInsightResourceUtilizationInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/resourceUtilizationInsight",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeHostInsightResourceUtilizationInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "summarizeHostInsightResourceUtilizationInsightAggregation",
                    bodyModel: "model.SummarizeHostInsightResourceUtilizationInsightAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance insights for SQLs taking greater than X% database time for a given time period across the given databases or database types.
     * @param SummarizeSqlInsightsRequest
     * @return SummarizeSqlInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlInsights.ts.html |here} to see how to use SummarizeSqlInsights API.
     */
    summarizeSqlInsights(summarizeSqlInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlInsights.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlInsightsRequest.compartmentId,
                "databaseType": summarizeSqlInsightsRequest.databaseType,
                "databaseId": summarizeSqlInsightsRequest.databaseId,
                "id": summarizeSqlInsightsRequest.id,
                "databaseTimePctGreaterThan": summarizeSqlInsightsRequest.databaseTimePctGreaterThan,
                "analysisTimeInterval": summarizeSqlInsightsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlInsightsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlInsightsRequest.timeIntervalEnd,
                "page": summarizeSqlInsightsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlInsightsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlInsightsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlInsightAggregationCollection",
                    bodyModel: "model.SqlInsightAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance insights on the execution plans for a given SQL for a given time period.
     * Either databaseId or id must be specified.
     *
     * @param SummarizeSqlPlanInsightsRequest
     * @return SummarizeSqlPlanInsightsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlPlanInsights.ts.html |here} to see how to use SummarizeSqlPlanInsights API.
     */
    summarizeSqlPlanInsights(summarizeSqlPlanInsightsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlPlanInsights.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlPlanInsightsRequest.compartmentId,
                "databaseId": summarizeSqlPlanInsightsRequest.databaseId,
                "id": summarizeSqlPlanInsightsRequest.id,
                "sqlIdentifier": summarizeSqlPlanInsightsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlPlanInsightsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlPlanInsightsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlPlanInsightsRequest.timeIntervalEnd,
                "page": summarizeSqlPlanInsightsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlPlanInsightsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlPlanInsights",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlPlanInsightsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlPlanInsightAggregationCollection",
                    bodyModel: "model.SqlPlanInsightAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to summarize the response time distribution of query executions for a given SQL for a given time period.
     * Either databaseId or id must be specified.
     *
     * @param SummarizeSqlResponseTimeDistributionsRequest
     * @return SummarizeSqlResponseTimeDistributionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlResponseTimeDistributions.ts.html |here} to see how to use SummarizeSqlResponseTimeDistributions API.
     */
    summarizeSqlResponseTimeDistributions(summarizeSqlResponseTimeDistributionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlResponseTimeDistributions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlResponseTimeDistributionsRequest.compartmentId,
                "databaseId": summarizeSqlResponseTimeDistributionsRequest.databaseId,
                "id": summarizeSqlResponseTimeDistributionsRequest.id,
                "sqlIdentifier": summarizeSqlResponseTimeDistributionsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlResponseTimeDistributionsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlResponseTimeDistributionsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlResponseTimeDistributionsRequest.timeIntervalEnd,
                "page": summarizeSqlResponseTimeDistributionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlResponseTimeDistributionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlResponseTimeDistributions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlResponseTimeDistributionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlResponseTimeDistributionAggregationCollection",
                    bodyModel: "model.SqlResponseTimeDistributionAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics for SQLs taking greater than X% database time for a given time period across the given databases or database types.
     * @param SummarizeSqlStatisticsRequest
     * @return SummarizeSqlStatisticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlStatistics.ts.html |here} to see how to use SummarizeSqlStatistics API.
     */
    summarizeSqlStatistics(summarizeSqlStatisticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatistics.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsRequest.compartmentId,
                "databaseType": summarizeSqlStatisticsRequest.databaseType,
                "databaseId": summarizeSqlStatisticsRequest.databaseId,
                "id": summarizeSqlStatisticsRequest.id,
                "databaseTimePctGreaterThan": summarizeSqlStatisticsRequest.databaseTimePctGreaterThan,
                "sqlIdentifier": summarizeSqlStatisticsRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsRequest.timeIntervalEnd,
                "limit": summarizeSqlStatisticsRequest.limit,
                "page": summarizeSqlStatisticsRequest.page,
                "sortOrder": summarizeSqlStatisticsRequest.sortOrder,
                "sortBy": summarizeSqlStatisticsRequest.sortBy,
                "category": summarizeSqlStatisticsRequest.category
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatistics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlStatisticsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticAggregationCollection",
                    bodyModel: "model.SqlStatisticAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics time series for a given SQL across given databases for a given time period.
     *
     * @param SummarizeSqlStatisticsTimeSeriesRequest
     * @return SummarizeSqlStatisticsTimeSeriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlStatisticsTimeSeries.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeries API.
     */
    summarizeSqlStatisticsTimeSeries(summarizeSqlStatisticsTimeSeriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeries.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsTimeSeriesRequest.compartmentId,
                "databaseId": summarizeSqlStatisticsTimeSeriesRequest.databaseId,
                "id": summarizeSqlStatisticsTimeSeriesRequest.id,
                "sqlIdentifier": summarizeSqlStatisticsTimeSeriesRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesRequest.timeIntervalEnd,
                "page": summarizeSqlStatisticsTimeSeriesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsTimeSeriesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatisticsTimeSeries",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlStatisticsTimeSeriesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticsTimeSeriesAggregationCollection",
                    bodyModel: "model.SqlStatisticsTimeSeriesAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Query SQL Warehouse to get the performance statistics time series for a given SQL by execution plans for a given time period.
     * Either databaseId or id must be specified.
     *
     * @param SummarizeSqlStatisticsTimeSeriesByPlanRequest
     * @return SummarizeSqlStatisticsTimeSeriesByPlanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/SummarizeSqlStatisticsTimeSeriesByPlan.ts.html |here} to see how to use SummarizeSqlStatisticsTimeSeriesByPlan API.
     */
    summarizeSqlStatisticsTimeSeriesByPlan(summarizeSqlStatisticsTimeSeriesByPlanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#summarizeSqlStatisticsTimeSeriesByPlan.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": summarizeSqlStatisticsTimeSeriesByPlanRequest.compartmentId,
                "databaseId": summarizeSqlStatisticsTimeSeriesByPlanRequest.databaseId,
                "id": summarizeSqlStatisticsTimeSeriesByPlanRequest.id,
                "sqlIdentifier": summarizeSqlStatisticsTimeSeriesByPlanRequest.sqlIdentifier,
                "analysisTimeInterval": summarizeSqlStatisticsTimeSeriesByPlanRequest.analysisTimeInterval,
                "timeIntervalStart": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalStart,
                "timeIntervalEnd": summarizeSqlStatisticsTimeSeriesByPlanRequest.timeIntervalEnd,
                "page": summarizeSqlStatisticsTimeSeriesByPlanRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeSqlStatisticsTimeSeriesByPlanRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/sqlStatisticsTimeSeriesByPlan",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, summarizeSqlStatisticsTimeSeriesByPlanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sqlStatisticsTimeSeriesByPlanAggregationCollection",
                    bodyModel: "model.SqlStatisticsTimeSeriesByPlanAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of a database insight.
     * @param UpdateDatabaseInsightRequest
     * @return UpdateDatabaseInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/UpdateDatabaseInsight.ts.html |here} to see how to use UpdateDatabaseInsight API.
     */
    updateDatabaseInsight(updateDatabaseInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateDatabaseInsight.");
            const pathParams = {
                "{databaseInsightId}": updateDatabaseInsightRequest.databaseInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDatabaseInsightRequest.ifMatch,
                "opc-request-id": updateDatabaseInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseInsights/{databaseInsightId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDatabaseInsightRequest.updateDatabaseInsightDetails, "UpdateDatabaseInsightDetails", models.UpdateDatabaseInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDatabaseInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of an Operations Insights Enterprise Manager bridge.
     * @param UpdateEnterpriseManagerBridgeRequest
     * @return UpdateEnterpriseManagerBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/UpdateEnterpriseManagerBridge.ts.html |here} to see how to use UpdateEnterpriseManagerBridge API.
     */
    updateEnterpriseManagerBridge(updateEnterpriseManagerBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateEnterpriseManagerBridge.");
            const pathParams = {
                "{enterpriseManagerBridgeId}": updateEnterpriseManagerBridgeRequest.enterpriseManagerBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateEnterpriseManagerBridgeRequest.ifMatch,
                "opc-request-id": updateEnterpriseManagerBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/enterpriseManagerBridges/{enterpriseManagerBridgeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateEnterpriseManagerBridgeRequest.updateEnterpriseManagerBridgeDetails, "UpdateEnterpriseManagerBridgeDetails", models.UpdateEnterpriseManagerBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateEnterpriseManagerBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of a host insight.
     * @param UpdateHostInsightRequest
     * @return UpdateHostInsightResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/opsi/UpdateHostInsight.ts.html |here} to see how to use UpdateHostInsight API.
     */
    updateHostInsight(updateHostInsightRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OperationsInsightsClient#updateHostInsight.");
            const pathParams = {
                "{hostInsightId}": updateHostInsightRequest.hostInsightId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostInsightRequest.ifMatch,
                "opc-request-id": updateHostInsightRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostInsights/{hostInsightId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostInsightRequest.updateHostInsightDetails, "UpdateHostInsightDetails", models.UpdateHostInsightDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateHostInsightRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.OperationsInsightsClient = OperationsInsightsClient;
OperationsInsightsClient.serviceEndpointTemplate = "https://operationsinsights.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map