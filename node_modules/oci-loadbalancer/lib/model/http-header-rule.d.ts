/**
 * Load Balancing API
 * API for the Load Balancing service. Use this API to manage load balancers, backend sets, and related items. For more
information, see [Overview of Load Balancing](/iaas/Content/Balance/Concepts/balanceoverview.htm).

 * OpenAPI spec version: 20170115
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * An object that represents the advance http header options that allow the setting of http header size and allow/disallow
 * invalid characters in the http headers.
 * For example httpLargeHeaderSizeInKB=32, the http header could have 4 buffers of 32KBs each
 * This rule applies only to HTTP listeners. No more than one `HttpHeaderRule` object can be present in
 * a given listener.
 *
 */
export interface HttpHeaderRule extends model.Rule {
    /**
     * Indicates whether or not invalid characters in client header fields will be allowed.
     * Valid names are composed of English letters, digits, hyphens and underscores.
     * If \"true\", invalid characters are allowed in the HTTP header.
     * If \"false\", invalid characters are not allowed in the HTTP header
     *
     */
    "areInvalidCharactersAllowed"?: boolean;
    /**
     * The maximum size of each buffer used for reading http client request header.
     * This value indicates the maximum size allowed for each buffer.
     * The allowed values for buffer size are 8, 16, 32 and 64.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "httpLargeHeaderSizeInKB"?: number;
    "action": string;
}
export declare namespace HttpHeaderRule {
    function getJsonObj(obj: HttpHeaderRule, isParentJsonObj?: boolean): object;
    const action = "HTTP_HEADER";
}
