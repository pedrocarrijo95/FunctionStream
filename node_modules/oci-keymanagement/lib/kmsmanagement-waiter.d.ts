/**
 * Vault Service Key Management API
 * API for managing and performing operations with keys and vaults. (For the API for managing secrets, see the Vault Service
Secret Management API. For the API for retrieving secrets, see the Vault Service Secret Retrieval API.)

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { KmsManagementClient } from "./client";
export declare class KmsManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: KmsManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKeyResponse | null (null in case of 404 response)
     */
    forKey(request: serviceRequests.GetKeyRequest, ...targetStates: models.Key.LifecycleState[]): Promise<serviceResponses.GetKeyResponse | null>;
    /**
     * Waits forKeyVersion till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetKeyVersionResponse | null (null in case of 404 response)
     */
    forKeyVersion(request: serviceRequests.GetKeyVersionRequest, ...targetStates: models.KeyVersion.LifecycleState[]): Promise<serviceResponses.GetKeyVersionResponse | null>;
    /**
     * Waits forWrappingKey till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetWrappingKeyResponse | null (null in case of 404 response)
     */
    forWrappingKey(request: serviceRequests.GetWrappingKeyRequest, ...targetStates: models.WrappingKey.LifecycleState[]): Promise<serviceResponses.GetWrappingKeyResponse | null>;
}
