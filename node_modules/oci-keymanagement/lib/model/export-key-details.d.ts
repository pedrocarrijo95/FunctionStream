/**
 * Vault Service Key Management API
 * API for managing and performing operations with keys and vaults. (For the API for managing secrets, see the Vault Service
Secret Management API. For the API for retrieving secrets, see the Vault Service Secret Retrieval API.)

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * The details of the key that you want to wrap and export.
 */
export interface ExportKeyDetails {
    /**
     * The OCID of the master encryption key associated with the key version you want to export.
     */
    "keyId": string;
    /**
     * The OCID of the specific key version to export. If not specified, the service exports the current key version.
     *
     */
    "keyVersionId"?: string;
    /**
     * The encryption algorithm to use to encrypt exportable key material from a software-backed key. Specifying `RSA_OAEP_AES_SHA256`
     * invokes the RSA AES key wrap mechanism, which generates a temporary AES key. The temporary AES key is wrapped by the RSA public
     * wrapping key provided along with the request, creating a wrapped temporary AES key. The temporary AES key is also used to wrap
     * the exportable key material. The wrapped temporary AES key and the wrapped exportable key material are concatenated, producing
     * concatenated blob output that jointly represents them. Specifying `RSA_OAEP_SHA256` means that the software key is wrapped by
     * the RSA public wrapping key provided along with the request.
     *
     */
    "algorithm": ExportKeyDetails.Algorithm;
    /**
     * The PEM format of the 2048-bit, 3072-bit, or 4096-bit RSA wrapping key in your possession that you want to use to encrypt the key.
     *
     */
    "publicKey": string;
    /**
     * Information that provides context for audit logging. You can provide this additional
     * data as key-value pairs to include in the audit logs when audit logging is enabled.
     *
     */
    "loggingContext"?: {
        [key: string]: string;
    };
}
export declare namespace ExportKeyDetails {
    enum Algorithm {
        RsaOaepAesSha256 = "RSA_OAEP_AES_SHA256",
        RsaOaepSha256 = "RSA_OAEP_SHA256"
    }
    function getJsonObj(obj: ExportKeyDetails): object;
}
