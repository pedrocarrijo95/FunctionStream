/**
 * Vault Service Key Management API
 * API for managing and performing operations with keys and vaults. (For the API for managing secrets, see the Vault Service
Secret Management API. For the API for retrieving secrets, see the Vault Service Secret Retrieval API.)

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
export interface WrappedImportKey {
    /**
     * The key material to import, wrapped by the vault's RSA public wrapping key and base64-encoded.
     */
    "keyMaterial": string;
    /**
     * The wrapping mechanism to use during key import.
     * `RSA_OAEP_AES_SHA256` invokes the RSA AES key wrap mechanism, which generates a temporary AES key. The temporary AES key is wrapped
     * by the vault's RSA public wrapping key, creating a wrapped temporary AES key. The temporary AES key is also used to wrap the private key material.
     * The wrapped temporary AES key and the wrapped exportable key material are concatenated, producing concatenated blob output that jointly represents them.
     * `RSA_OAEP_SHA256` means that the exportable key material is wrapped by the vault's RSA public wrapping key.
     *
     */
    "wrappingAlgorithm": WrappedImportKey.WrappingAlgorithm;
}
export declare namespace WrappedImportKey {
    enum WrappingAlgorithm {
        RsaOaepSha256 = "RSA_OAEP_SHA256",
        RsaOaepAesSha256 = "RSA_OAEP_AES_SHA256"
    }
    function getJsonObj(obj: WrappedImportKey): object;
}
