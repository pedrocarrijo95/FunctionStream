/**
 * Vault Service Key Management API
 * API for managing and performing operations with keys and vaults. (For the API for managing secrets, see the Vault Service
Secret Management API. For the API for retrieving secrets, see the Vault Service Secret Retrieval API.)

 * OpenAPI spec version: release
 * Contact: sparta_kms_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * The cryptographic properties of a key.
 */
export interface KeyShape {
    /**
     * The algorithm used by a key's key versions to encrypt or decrypt.
     */
    "algorithm": KeyShape.Algorithm;
    /**
     * The length of the key in bytes, expressed as an integer. Supported values include the following:
     *   - AES: 16, 24, or 32
     *   - RSA: 256, 384, or 512
     *   - ECDSA: 32, 48, or 66
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "length": number;
    /**
     * Supported curve IDs for ECDSA keys.
     */
    "curveId"?: KeyShape.CurveId;
}
export declare namespace KeyShape {
    enum Algorithm {
        Aes = "AES",
        Rsa = "RSA",
        Ecdsa = "ECDSA",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    enum CurveId {
        NistP256 = "NIST_P256",
        NistP384 = "NIST_P384",
        NistP521 = "NIST_P521",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: KeyShape): object;
}
