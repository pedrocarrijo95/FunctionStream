"use strict";
/**
 * Object Storage Service API
 * Common set of Object Storage and Archive Storage APIs for managing buckets, objects, and related resources.
For more information, see [Overview of Object Storage](/Content/Object/Concepts/objectstorageoverview.htm) and
[Overview of Archive Storage](/Content/Archive/Concepts/archivestorageoverview.htm).

 * OpenAPI spec version: 20160918
 * Contact: opc_casper_users_us_grp@oracle.com
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectStorageClient = exports.ObjectStorageApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const objectstorage_waiter_1 = require("./objectstorage-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ObjectStorageApiKeys;
(function (ObjectStorageApiKeys) {
})(ObjectStorageApiKeys = exports.ObjectStorageApiKeys || (exports.ObjectStorageApiKeys = {}));
class ObjectStorageClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        if (this.logger)
            this.logger.info(`ObjectStorageClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ObjectStorageClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ObjectStorageClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new ObjectStorageWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new objectstorage_waiter_1.ObjectStorageWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Aborts an in-progress multipart upload and deletes all parts that have been uploaded.
     *
     * @param AbortMultipartUploadRequest
     * @return AbortMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/AbortMultipartUpload.ts.html |here} to see how to use AbortMultipartUpload API.
     */
    abortMultipartUpload(abortMultipartUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#abortMultipartUpload.");
            const pathParams = {
                "{namespaceName}": abortMultipartUploadRequest.namespaceName,
                "{bucketName}": abortMultipartUploadRequest.bucketName,
                "{objectName}": abortMultipartUploadRequest.objectName
            };
            const queryParams = {
                "uploadId": abortMultipartUploadRequest.uploadId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": abortMultipartUploadRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, abortMultipartUploadRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancels a work request.
     *
     * @param CancelWorkRequestRequest
     * @return CancelWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CancelWorkRequest.ts.html |here} to see how to use CancelWorkRequest API.
     */
    cancelWorkRequest(cancelWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#cancelWorkRequest.");
            const pathParams = {
                "{workRequestId}": cancelWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": cancelWorkRequestRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, cancelWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Commits a multipart upload, which involves checking part numbers and entity tags (ETags) of the parts, to create an aggregate object.
     *
     * @param CommitMultipartUploadRequest
     * @return CommitMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CommitMultipartUpload.ts.html |here} to see how to use CommitMultipartUpload API.
     */
    commitMultipartUpload(commitMultipartUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#commitMultipartUpload.");
            const pathParams = {
                "{namespaceName}": commitMultipartUploadRequest.namespaceName,
                "{bucketName}": commitMultipartUploadRequest.bucketName,
                "{objectName}": commitMultipartUploadRequest.objectName
            };
            const queryParams = {
                "uploadId": commitMultipartUploadRequest.uploadId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": commitMultipartUploadRequest.ifMatch,
                "if-none-match": commitMultipartUploadRequest.ifNoneMatch,
                "opc-client-request-id": commitMultipartUploadRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(commitMultipartUploadRequest.commitMultipartUploadDetails, "CommitMultipartUploadDetails", models.CommitMultipartUploadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, commitMultipartUploadRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-multipart-md5"),
                            key: "opcMultipartMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a request to copy an object within a region or to another region.
     *
     * @param CopyObjectRequest
     * @return CopyObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CopyObject.ts.html |here} to see how to use CopyObject API.
     */
    copyObject(copyObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#copyObject.");
            const pathParams = {
                "{namespaceName}": copyObjectRequest.namespaceName,
                "{bucketName}": copyObjectRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": copyObjectRequest.opcClientRequestId,
                "opc-sse-customer-algorithm": copyObjectRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": copyObjectRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": copyObjectRequest.opcSseCustomerKeySha256,
                "opc-source-sse-customer-algorithm": copyObjectRequest.opcSourceSseCustomerAlgorithm,
                "opc-source-sse-customer-key": copyObjectRequest.opcSourceSseCustomerKey,
                "opc-source-sse-customer-key-sha256": copyObjectRequest.opcSourceSseCustomerKeySha256
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/copyObject",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(copyObjectRequest.copyObjectDetails, "CopyObjectDetails", models.CopyObjectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, copyObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a bucket in the given namespace with a bucket name and optional user-defined metadata. Avoid entering
     * confidential information in bucket names.
     *
     * @param CreateBucketRequest
     * @return CreateBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CreateBucket.ts.html |here} to see how to use CreateBucket API.
     */
    createBucket(createBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#createBucket.");
            const pathParams = {
                "{namespaceName}": createBucketRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": createBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createBucketRequest.createBucketDetails, "CreateBucketDetails", models.CreateBucketDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bucket",
                    bodyModel: "model.Bucket",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Starts a new multipart upload to a specific object in the given bucket in the given namespace.
     *
     * @param CreateMultipartUploadRequest
     * @return CreateMultipartUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CreateMultipartUpload.ts.html |here} to see how to use CreateMultipartUpload API.
     */
    createMultipartUpload(createMultipartUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#createMultipartUpload.");
            const pathParams = {
                "{namespaceName}": createMultipartUploadRequest.namespaceName,
                "{bucketName}": createMultipartUploadRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": createMultipartUploadRequest.ifMatch,
                "if-none-match": createMultipartUploadRequest.ifNoneMatch,
                "opc-client-request-id": createMultipartUploadRequest.opcClientRequestId,
                "opc-sse-customer-algorithm": createMultipartUploadRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": createMultipartUploadRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": createMultipartUploadRequest.opcSseCustomerKeySha256
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMultipartUploadRequest.createMultipartUploadDetails, "CreateMultipartUploadDetails", models.CreateMultipartUploadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createMultipartUploadRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "multipartUpload",
                    bodyModel: "model.MultipartUpload",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a pre-authenticated request specific to the bucket.
     *
     * @param CreatePreauthenticatedRequestRequest
     * @return CreatePreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CreatePreauthenticatedRequest.ts.html |here} to see how to use CreatePreauthenticatedRequest API.
     */
    createPreauthenticatedRequest(createPreauthenticatedRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#createPreauthenticatedRequest.");
            const pathParams = {
                "{namespaceName}": createPreauthenticatedRequestRequest.namespaceName,
                "{bucketName}": createPreauthenticatedRequestRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": createPreauthenticatedRequestRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/p",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPreauthenticatedRequestRequest.createPreauthenticatedRequestDetails, "CreatePreauthenticatedRequestDetails", models.CreatePreauthenticatedRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createPreauthenticatedRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "preauthenticatedRequest",
                    bodyModel: "model.PreauthenticatedRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a replication policy for the specified bucket.
     *
     * @param CreateReplicationPolicyRequest
     * @return CreateReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CreateReplicationPolicy.ts.html |here} to see how to use CreateReplicationPolicy API.
     */
    createReplicationPolicy(createReplicationPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#createReplicationPolicy.");
            const pathParams = {
                "{namespaceName}": createReplicationPolicyRequest.namespaceName,
                "{bucketName}": createReplicationPolicyRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": createReplicationPolicyRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createReplicationPolicyRequest.createReplicationPolicyDetails, "CreateReplicationPolicyDetails", models.CreateReplicationPolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createReplicationPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "replicationPolicy",
                    bodyModel: "model.ReplicationPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new retention rule in the specified bucket. The new rule will take effect typically within 30 seconds.
     * Note that a maximum of 100 rules are supported on a bucket.
     *
     * @param CreateRetentionRuleRequest
     * @return CreateRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/CreateRetentionRule.ts.html |here} to see how to use CreateRetentionRule API.
     */
    createRetentionRule(createRetentionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#createRetentionRule.");
            const pathParams = {
                "{namespaceName}": createRetentionRuleRequest.namespaceName,
                "{bucketName}": createRetentionRuleRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": createRetentionRuleRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/retentionRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createRetentionRuleRequest.createRetentionRuleDetails, "CreateRetentionRuleDetails", models.CreateRetentionRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createRetentionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "retentionRule",
                    bodyModel: "model.RetentionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a bucket if the bucket is already empty. If the bucket is not empty, use
     * {@link #deleteObject(DeleteObjectRequest) deleteObject} first. In addition,
     * you cannot delete a bucket that has a multipart upload in progress or a pre-authenticated
     * request associated with that bucket.
     *
     * @param DeleteBucketRequest
     * @return DeleteBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeleteBucket.ts.html |here} to see how to use DeleteBucket API.
     */
    deleteBucket(deleteBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deleteBucket.");
            const pathParams = {
                "{namespaceName}": deleteBucketRequest.namespaceName,
                "{bucketName}": deleteBucketRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteBucketRequest.ifMatch,
                "opc-client-request-id": deleteBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an object.
     *
     * @param DeleteObjectRequest
     * @return DeleteObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeleteObject.ts.html |here} to see how to use DeleteObject API.
     */
    deleteObject(deleteObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deleteObject.");
            const pathParams = {
                "{namespaceName}": deleteObjectRequest.namespaceName,
                "{bucketName}": deleteObjectRequest.bucketName,
                "{objectName}": deleteObjectRequest.objectName
            };
            const queryParams = {
                "versionId": deleteObjectRequest.versionId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteObjectRequest.ifMatch,
                "opc-client-request-id": deleteObjectRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("is-delete-marker"),
                            key: "isDeleteMarker",
                            dataType: "boolean"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the object lifecycle policy for the bucket.
     *
     * @param DeleteObjectLifecyclePolicyRequest
     * @return DeleteObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeleteObjectLifecyclePolicy.ts.html |here} to see how to use DeleteObjectLifecyclePolicy API.
     */
    deleteObjectLifecyclePolicy(deleteObjectLifecyclePolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deleteObjectLifecyclePolicy.");
            const pathParams = {
                "{namespaceName}": deleteObjectLifecyclePolicyRequest.namespaceName,
                "{bucketName}": deleteObjectLifecyclePolicyRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": deleteObjectLifecyclePolicyRequest.opcClientRequestId,
                "if-match": deleteObjectLifecyclePolicyRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/l",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteObjectLifecyclePolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the pre-authenticated request for the bucket.
     * @param DeletePreauthenticatedRequestRequest
     * @return DeletePreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeletePreauthenticatedRequest.ts.html |here} to see how to use DeletePreauthenticatedRequest API.
     */
    deletePreauthenticatedRequest(deletePreauthenticatedRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deletePreauthenticatedRequest.");
            const pathParams = {
                "{namespaceName}": deletePreauthenticatedRequestRequest.namespaceName,
                "{bucketName}": deletePreauthenticatedRequestRequest.bucketName,
                "{parId}": deletePreauthenticatedRequestRequest.parId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": deletePreauthenticatedRequestRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/p/{parId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deletePreauthenticatedRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the replication policy associated with the source bucket.
     *
     * @param DeleteReplicationPolicyRequest
     * @return DeleteReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeleteReplicationPolicy.ts.html |here} to see how to use DeleteReplicationPolicy API.
     */
    deleteReplicationPolicy(deleteReplicationPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deleteReplicationPolicy.");
            const pathParams = {
                "{namespaceName}": deleteReplicationPolicyRequest.namespaceName,
                "{bucketName}": deleteReplicationPolicyRequest.bucketName,
                "{replicationId}": deleteReplicationPolicyRequest.replicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": deleteReplicationPolicyRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies/{replicationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteReplicationPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified rule. The deletion takes effect typically within 30 seconds.
     * @param DeleteRetentionRuleRequest
     * @return DeleteRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/DeleteRetentionRule.ts.html |here} to see how to use DeleteRetentionRule API.
     */
    deleteRetentionRule(deleteRetentionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#deleteRetentionRule.");
            const pathParams = {
                "{namespaceName}": deleteRetentionRuleRequest.namespaceName,
                "{bucketName}": deleteRetentionRuleRequest.bucketName,
                "{retentionRuleId}": deleteRetentionRuleRequest.retentionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteRetentionRuleRequest.ifMatch,
                "opc-client-request-id": deleteRetentionRuleRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteRetentionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the current representation of the given bucket in the given Object Storage namespace.
     *
     * @param GetBucketRequest
     * @return GetBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetBucket.ts.html |here} to see how to use GetBucket API.
     */
    getBucket(getBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getBucket.");
            const pathParams = {
                "{namespaceName}": getBucketRequest.namespaceName,
                "{bucketName}": getBucketRequest.bucketName
            };
            const queryParams = {
                "fields": getBucketRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": getBucketRequest.ifMatch,
                "if-none-match": getBucketRequest.ifNoneMatch,
                "opc-client-request-id": getBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bucket",
                    bodyModel: "model.Bucket",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Each Oracle Cloud Infrastructure tenant is assigned one unique and uneditable Object Storage namespace. The namespace
  * is a system-generated string assigned during account creation. For some older tenancies, the namespace string may be
  * the tenancy name in all lower-case letters. You cannot edit a namespace.
  * <p>
  GetNamespace returns the name of the Object Storage namespace for the user making the request.
  * If an optional compartmentId query parameter is provided, GetNamespace returns the namespace name of the corresponding
  * tenancy, provided the user has access to it.
  *
       * @param GetNamespaceRequest
       * @return GetNamespaceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetNamespace.ts.html |here} to see how to use GetNamespace API.
       */
    getNamespace(getNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getNamespace.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": getNamespaceRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getNamespaceRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNamespaceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: []
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets the metadata for the Object Storage namespace, which contains defaultS3CompartmentId and
  * defaultSwiftCompartmentId.
  * <p>
  Any user with the OBJECTSTORAGE_NAMESPACE_READ permission will be able to see the current metadata. If you are
  * not authorized, talk to an administrator. If you are an administrator who needs to write policies
  * to give users access, see
  * [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
  *
       * @param GetNamespaceMetadataRequest
       * @return GetNamespaceMetadataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetNamespaceMetadata.ts.html |here} to see how to use GetNamespaceMetadata API.
       */
    getNamespaceMetadata(getNamespaceMetadataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getNamespaceMetadata.");
            const pathParams = {
                "{namespaceName}": getNamespaceMetadataRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getNamespaceMetadataRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNamespaceMetadataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespaceMetadata",
                    bodyModel: "model.NamespaceMetadata",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the metadata and body of an object.
     *
     * @param GetObjectRequest
     * @return GetObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetObject.ts.html |here} to see how to use GetObject API.
     */
    getObject(getObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getObject.");
            const pathParams = {
                "{namespaceName}": getObjectRequest.namespaceName,
                "{bucketName}": getObjectRequest.bucketName,
                "{objectName}": getObjectRequest.objectName
            };
            const queryParams = {
                "versionId": getObjectRequest.versionId,
                "httpResponseContentDisposition": getObjectRequest.httpResponseContentDisposition,
                "httpResponseCacheControl": getObjectRequest.httpResponseCacheControl,
                "httpResponseContentType": getObjectRequest.httpResponseContentType,
                "httpResponseContentLanguage": getObjectRequest.httpResponseContentLanguage,
                "httpResponseContentEncoding": getObjectRequest.httpResponseContentEncoding,
                "httpResponseExpires": getObjectRequest.httpResponseExpires
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": getObjectRequest.ifMatch,
                "if-none-match": getObjectRequest.ifNoneMatch,
                "opc-client-request-id": getObjectRequest.opcClientRequestId,
                "range": getObjectRequest.range,
                "opc-sse-customer-algorithm": getObjectRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": getObjectRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": getObjectRequest.opcSseCustomerKeySha256
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-range"),
                            key: "contentRange",
                            dataType: "common.Range"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-multipart-md5"),
                            key: "opcMultipartMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-language"),
                            key: "contentLanguage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-encoding"),
                            key: "contentEncoding",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("storage-tier"),
                            key: "storageTier",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("archival-state"),
                            key: "archivalState",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("time-of-archival"),
                            key: "timeOfArchival",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("expires"),
                            key: "expires",
                            dataType: "Date"
                        }
                    ]
                });
                const opcMeta = {};
                const pattern = "opc-meta-";
                response.headers.forEach((v, k) => {
                    if (k.startsWith(pattern)) {
                        Object.assign(opcMeta, { k: v });
                    }
                });
                sdkResponse.opcMeta = opcMeta;
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the object lifecycle policy for the bucket.
     *
     * @param GetObjectLifecyclePolicyRequest
     * @return GetObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetObjectLifecyclePolicy.ts.html |here} to see how to use GetObjectLifecyclePolicy API.
     */
    getObjectLifecyclePolicy(getObjectLifecyclePolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getObjectLifecyclePolicy.");
            const pathParams = {
                "{namespaceName}": getObjectLifecyclePolicyRequest.namespaceName,
                "{bucketName}": getObjectLifecyclePolicyRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getObjectLifecyclePolicyRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/l",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getObjectLifecyclePolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "objectLifecyclePolicy",
                    bodyModel: "model.ObjectLifecyclePolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the pre-authenticated request for the bucket.
     * @param GetPreauthenticatedRequestRequest
     * @return GetPreauthenticatedRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetPreauthenticatedRequest.ts.html |here} to see how to use GetPreauthenticatedRequest API.
     */
    getPreauthenticatedRequest(getPreauthenticatedRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getPreauthenticatedRequest.");
            const pathParams = {
                "{namespaceName}": getPreauthenticatedRequestRequest.namespaceName,
                "{bucketName}": getPreauthenticatedRequestRequest.bucketName,
                "{parId}": getPreauthenticatedRequestRequest.parId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getPreauthenticatedRequestRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/p/{parId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPreauthenticatedRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "preauthenticatedRequestSummary",
                    bodyModel: "model.PreauthenticatedRequestSummary",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the replication policy.
     *
     * @param GetReplicationPolicyRequest
     * @return GetReplicationPolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetReplicationPolicy.ts.html |here} to see how to use GetReplicationPolicy API.
     */
    getReplicationPolicy(getReplicationPolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getReplicationPolicy.");
            const pathParams = {
                "{namespaceName}": getReplicationPolicyRequest.namespaceName,
                "{bucketName}": getReplicationPolicyRequest.bucketName,
                "{replicationId}": getReplicationPolicyRequest.replicationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getReplicationPolicyRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies/{replicationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getReplicationPolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "replicationPolicy",
                    bodyModel: "model.ReplicationPolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the specified retention rule.
     * @param GetRetentionRuleRequest
     * @return GetRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetRetentionRule.ts.html |here} to see how to use GetRetentionRule API.
     */
    getRetentionRule(getRetentionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getRetentionRule.");
            const pathParams = {
                "{namespaceName}": getRetentionRuleRequest.namespaceName,
                "{bucketName}": getRetentionRuleRequest.bucketName,
                "{retentionRuleId}": getRetentionRuleRequest.retentionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getRetentionRuleRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getRetentionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "retentionRule",
                    bodyModel: "model.RetentionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request for the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#getWorkRequest.");
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": getWorkRequestRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Efficiently checks to see if a bucket exists and gets the current entity tag (ETag) for the bucket.
     *
     * @param HeadBucketRequest
     * @return HeadBucketResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/HeadBucket.ts.html |here} to see how to use HeadBucket API.
     */
    headBucket(headBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#headBucket.");
            const pathParams = {
                "{namespaceName}": headBucketRequest.namespaceName,
                "{bucketName}": headBucketRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": headBucketRequest.ifMatch,
                "if-none-match": headBucketRequest.ifNoneMatch,
                "opc-client-request-id": headBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, headBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the user-defined metadata and entity tag (ETag) for an object.
     *
     * @param HeadObjectRequest
     * @return HeadObjectResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/HeadObject.ts.html |here} to see how to use HeadObject API.
     */
    headObject(headObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#headObject.");
            const pathParams = {
                "{namespaceName}": headObjectRequest.namespaceName,
                "{bucketName}": headObjectRequest.bucketName,
                "{objectName}": headObjectRequest.objectName
            };
            const queryParams = {
                "versionId": headObjectRequest.versionId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": headObjectRequest.ifMatch,
                "if-none-match": headObjectRequest.ifNoneMatch,
                "opc-client-request-id": headObjectRequest.opcClientRequestId,
                "opc-sse-customer-algorithm": headObjectRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": headObjectRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": headObjectRequest.opcSseCustomerKeySha256
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
                method: "HEAD",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, headObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-length"),
                            key: "contentLength",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("content-md5"),
                            key: "contentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-multipart-md5"),
                            key: "opcMultipartMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-type"),
                            key: "contentType",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-language"),
                            key: "contentLanguage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-encoding"),
                            key: "contentEncoding",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("cache-control"),
                            key: "cacheControl",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("content-disposition"),
                            key: "contentDisposition",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("storage-tier"),
                            key: "storageTier",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("archival-state"),
                            key: "archivalState",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("time-of-archival"),
                            key: "timeOfArchival",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                const opcMeta = {};
                const pattern = "opc-meta-";
                response.headers.forEach((v, k) => {
                    if (k.startsWith(pattern)) {
                        Object.assign(opcMeta, { k: v });
                    }
                });
                sdkResponse.opcMeta = opcMeta;
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Gets a list of all BucketSummary items in a compartment. A BucketSummary contains only summary fields for the bucket
  * and does not contain fields like the user-defined metadata.
  * <p>
  ListBuckets returns a BucketSummary containing at most 1000 buckets. To paginate through more buckets, use the returned
  * `opc-next-page` value with the `page` request parameter.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
  *
       * @param ListBucketsRequest
       * @return ListBucketsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListBuckets.ts.html |here} to see how to use ListBuckets API.
       */
    listBuckets(listBucketsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listBuckets.");
            const pathParams = {
                "{namespaceName}": listBucketsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listBucketsRequest.compartmentId,
                "limit": listBucketsRequest.limit,
                "page": listBucketsRequest.page,
                "fields": listBucketsRequest.fields
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listBucketsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listBucketsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "BucketSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.BucketSummary objects
     * contained in responses from the listBuckets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBuckets(request) {
        return oci_common_1.paginateRecords(request, req => this.listBuckets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listBuckets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllBucketsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listBuckets(req));
    }
    /**
     * Lists the parts of an in-progress multipart upload.
     *
     * @param ListMultipartUploadPartsRequest
     * @return ListMultipartUploadPartsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListMultipartUploadParts.ts.html |here} to see how to use ListMultipartUploadParts API.
     */
    listMultipartUploadParts(listMultipartUploadPartsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listMultipartUploadParts.");
            const pathParams = {
                "{namespaceName}": listMultipartUploadPartsRequest.namespaceName,
                "{bucketName}": listMultipartUploadPartsRequest.bucketName,
                "{objectName}": listMultipartUploadPartsRequest.objectName
            };
            const queryParams = {
                "uploadId": listMultipartUploadPartsRequest.uploadId,
                "limit": listMultipartUploadPartsRequest.limit,
                "page": listMultipartUploadPartsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listMultipartUploadPartsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listMultipartUploadPartsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "MultipartUploadPartSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.MultipartUploadPartSummary objects
     * contained in responses from the listMultipartUploadParts operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadParts(request) {
        return oci_common_1.paginateRecords(request, req => this.listMultipartUploadParts(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploadParts operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadPartsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMultipartUploadParts(req));
    }
    /**
     * Lists all of the in-progress multipart uploads for the given bucket in the given Object Storage namespace.
     *
     * @param ListMultipartUploadsRequest
     * @return ListMultipartUploadsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListMultipartUploads.ts.html |here} to see how to use ListMultipartUploads API.
     */
    listMultipartUploads(listMultipartUploadsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listMultipartUploads.");
            const pathParams = {
                "{namespaceName}": listMultipartUploadsRequest.namespaceName,
                "{bucketName}": listMultipartUploadsRequest.bucketName
            };
            const queryParams = {
                "limit": listMultipartUploadsRequest.limit,
                "page": listMultipartUploadsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listMultipartUploadsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listMultipartUploadsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "MultipartUpload[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.MultipartUpload objects
     * contained in responses from the listMultipartUploads operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploads(request) {
        return oci_common_1.paginateRecords(request, req => this.listMultipartUploads(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMultipartUploads operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMultipartUploadsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMultipartUploads(req));
    }
    /**
       * Lists the object versions in a bucket.
  * <p>
  ListObjectVersions returns an ObjectVersionCollection containing at most 1000 object versions. To paginate through
  * more object versions, use the returned `opc-next-page` value with the `page` request parameter.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
  *
       * @param ListObjectVersionsRequest
       * @return ListObjectVersionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListObjectVersions.ts.html |here} to see how to use ListObjectVersions API.
       */
    listObjectVersions(listObjectVersionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listObjectVersions.");
            const pathParams = {
                "{namespaceName}": listObjectVersionsRequest.namespaceName,
                "{bucketName}": listObjectVersionsRequest.bucketName
            };
            const queryParams = {
                "prefix": listObjectVersionsRequest.prefix,
                "start": listObjectVersionsRequest.start,
                "end": listObjectVersionsRequest.end,
                "limit": listObjectVersionsRequest.limit,
                "delimiter": listObjectVersionsRequest.delimiter,
                "fields": listObjectVersionsRequest.fields,
                "startAfter": listObjectVersionsRequest.startAfter,
                "page": listObjectVersionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listObjectVersionsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/objectversions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listObjectVersionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "objectVersionCollection",
                    bodyModel: "model.ObjectVersionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Lists the objects in a bucket. By default, ListObjects returns object names only. See the `fields`
  * parameter for other fields that you can optionally include in ListObjects response.
  * <p>
  ListObjects returns at most 1000 objects. To paginate through more objects, use the returned 'nextStartWith'
  * value with the 'start' parameter. To filter which objects ListObjects returns, use the 'start' and 'end'
  * parameters.
  * <p>
  To use this and other API operations, you must be authorized in an IAM policy. If you are not authorized,
  * talk to an administrator. If you are an administrator who needs to write policies to give users access, see
  * [Getting Started with Policies](https://docs.cloud.oracle.com/Content/Identity/Concepts/policygetstarted.htm).
  *
       * @param ListObjectsRequest
       * @return ListObjectsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListObjects.ts.html |here} to see how to use ListObjects API.
       */
    listObjects(listObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listObjects.");
            const pathParams = {
                "{namespaceName}": listObjectsRequest.namespaceName,
                "{bucketName}": listObjectsRequest.bucketName
            };
            const queryParams = {
                "prefix": listObjectsRequest.prefix,
                "start": listObjectsRequest.start,
                "end": listObjectsRequest.end,
                "limit": listObjectsRequest.limit,
                "delimiter": listObjectsRequest.delimiter,
                "fields": listObjectsRequest.fields,
                "startAfter": listObjectsRequest.startAfter
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listObjectsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/o",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listObjectsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "listObjects",
                    bodyModel: "model.ListObjects",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ObjectSummary objects
     * contained in responses from the listObjects operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllObjects(request) {
        return oci_common_1.genericPaginateRecords(request, req => this.listObjects(req), res => res.listObjects.nextStartWith, (req, nextPageToken) => (req.start = nextPageToken), res => res.listObjects.objects);
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listObjects operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllObjectsResponses(request) {
        return oci_common_1.genericPaginateResponses(request, req => this.listObjects(req), res => res.listObjects.nextStartWith, (req, nextPageToken) => (req.start = nextPageToken));
    }
    /**
     * Lists pre-authenticated requests for the bucket.
     *
     * @param ListPreauthenticatedRequestsRequest
     * @return ListPreauthenticatedRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListPreauthenticatedRequests.ts.html |here} to see how to use ListPreauthenticatedRequests API.
     */
    listPreauthenticatedRequests(listPreauthenticatedRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listPreauthenticatedRequests.");
            const pathParams = {
                "{namespaceName}": listPreauthenticatedRequestsRequest.namespaceName,
                "{bucketName}": listPreauthenticatedRequestsRequest.bucketName
            };
            const queryParams = {
                "objectNamePrefix": listPreauthenticatedRequestsRequest.objectNamePrefix,
                "limit": listPreauthenticatedRequestsRequest.limit,
                "page": listPreauthenticatedRequestsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listPreauthenticatedRequestsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/p",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPreauthenticatedRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PreauthenticatedRequestSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.PreauthenticatedRequestSummary objects
     * contained in responses from the listPreauthenticatedRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPreauthenticatedRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listPreauthenticatedRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPreauthenticatedRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPreauthenticatedRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPreauthenticatedRequests(req));
    }
    /**
     * List the replication policies associated with a bucket.
     *
     * @param ListReplicationPoliciesRequest
     * @return ListReplicationPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListReplicationPolicies.ts.html |here} to see how to use ListReplicationPolicies API.
     */
    listReplicationPolicies(listReplicationPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listReplicationPolicies.");
            const pathParams = {
                "{namespaceName}": listReplicationPoliciesRequest.namespaceName,
                "{bucketName}": listReplicationPoliciesRequest.bucketName
            };
            const queryParams = {
                "page": listReplicationPoliciesRequest.page,
                "limit": listReplicationPoliciesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listReplicationPoliciesRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/replicationPolicies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listReplicationPoliciesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ReplicationPolicySummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationPolicySummary objects
     * contained in responses from the listReplicationPolicies operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationPolicies(request) {
        return oci_common_1.paginateRecords(request, req => this.listReplicationPolicies(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplicationPolicies operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationPoliciesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listReplicationPolicies(req));
    }
    /**
     * List the replication sources of a destination bucket.
     *
     * @param ListReplicationSourcesRequest
     * @return ListReplicationSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListReplicationSources.ts.html |here} to see how to use ListReplicationSources API.
     */
    listReplicationSources(listReplicationSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listReplicationSources.");
            const pathParams = {
                "{namespaceName}": listReplicationSourcesRequest.namespaceName,
                "{bucketName}": listReplicationSourcesRequest.bucketName
            };
            const queryParams = {
                "page": listReplicationSourcesRequest.page,
                "limit": listReplicationSourcesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listReplicationSourcesRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/replicationSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listReplicationSourcesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ReplicationSource[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ReplicationSource objects
     * contained in responses from the listReplicationSources operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationSources(request) {
        return oci_common_1.paginateRecords(request, req => this.listReplicationSources(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listReplicationSources operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllReplicationSourcesResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listReplicationSources(req));
    }
    /**
     * List the retention rules for a bucket. The retention rules are sorted based on creation time,
     * with the most recently created retention rule returned first.
     *
     * @param ListRetentionRulesRequest
     * @return ListRetentionRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListRetentionRules.ts.html |here} to see how to use ListRetentionRules API.
     */
    listRetentionRules(listRetentionRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listRetentionRules.");
            const pathParams = {
                "{namespaceName}": listRetentionRulesRequest.namespaceName,
                "{bucketName}": listRetentionRulesRequest.bucketName
            };
            const queryParams = {
                "page": listRetentionRulesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/retentionRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRetentionRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "retentionRuleCollection",
                    bodyModel: "model.RetentionRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the errors of the work request with the given ID.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listWorkRequestErrors.");
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listWorkRequestErrorsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestError[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestError objects
     * contained in responses from the listWorkRequestErrors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrors(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestErrors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestErrorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestErrors(req));
    }
    /**
     * Lists the logs of the work request with the given ID.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listWorkRequestLogs.");
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listWorkRequestLogsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestLogsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestLogEntry[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestLogEntry objects
     * contained in responses from the listWorkRequestLogs operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogs(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequestLogs operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestLogsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequestLogs(req));
    }
    /**
     * Lists the work requests in a compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#listWorkRequests.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": listWorkRequestsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "WorkRequestSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.WorkRequestSummary objects
     * contained in responses from the listWorkRequests operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequests(request) {
        return oci_common_1.paginateRecords(request, req => this.listWorkRequests(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listWorkRequests operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllWorkRequestsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listWorkRequests(req));
    }
    /**
     * Stops replication to the destination bucket and removes the replication policy. When the replication
     * policy was created, this destination bucket became read-only except for new and changed objects replicated
     * automatically from the source bucket. MakeBucketWritable removes the replication policy. This bucket is no
     * longer the target for replication and is now writable, allowing users to make changes to bucket contents.
     *
     * @param MakeBucketWritableRequest
     * @return MakeBucketWritableResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/MakeBucketWritable.ts.html |here} to see how to use MakeBucketWritable API.
     */
    makeBucketWritable(makeBucketWritableRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#makeBucketWritable.");
            const pathParams = {
                "{namespaceName}": makeBucketWritableRequest.namespaceName,
                "{bucketName}": makeBucketWritableRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": makeBucketWritableRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/makeBucketWritable",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, makeBucketWritableRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new object or overwrites an existing object with the same name. The maximum object size allowed by
  * PutObject is 50 GiB.
  * <p>
  See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  * <p>
  See [Special Instructions for Object Storage PUT](https://docs.cloud.oracle.com/Content/API/Concepts/signingrequests.htm#ObjectStoragePut)
  * for request signature requirements.
  *
       * @param PutObjectRequest
       * @return PutObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/PutObject.ts.html |here} to see how to use PutObject API.
       */
    putObject(putObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#putObject.");
            const pathParams = {
                "{namespaceName}": putObjectRequest.namespaceName,
                "{bucketName}": putObjectRequest.bucketName,
                "{objectName}": putObjectRequest.objectName
            };
            const queryParams = {};
            let headerParams = {
                "if-match": putObjectRequest.ifMatch,
                "if-none-match": putObjectRequest.ifNoneMatch,
                "opc-client-request-id": putObjectRequest.opcClientRequestId,
                "Expect": putObjectRequest.expect,
                "Content-Length": putObjectRequest.contentLength,
                "Content-MD5": putObjectRequest.contentMD5,
                "Content-Type": putObjectRequest.contentType,
                "Content-Language": putObjectRequest.contentLanguage,
                "Content-Encoding": putObjectRequest.contentEncoding,
                "Content-Disposition": putObjectRequest.contentDisposition,
                "Cache-Control": putObjectRequest.cacheControl,
                "opc-sse-customer-algorithm": putObjectRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": putObjectRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": putObjectRequest.opcSseCustomerKeySha256,
                "storage-tier": putObjectRequest.storageTier
            };
            if (putObjectRequest.opcMeta) {
                Object.entries(putObjectRequest.opcMeta).forEach(([key, value]) => {
                    Object.assign(headerParams, { ["opc-meta-" + key]: value });
                });
            }
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/o/{objectName}",
                method: "PUT",
                bodyContent: putObjectRequest.putObjectBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, putObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or replaces the object lifecycle policy for the bucket.
     *
     * @param PutObjectLifecyclePolicyRequest
     * @return PutObjectLifecyclePolicyResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/PutObjectLifecyclePolicy.ts.html |here} to see how to use PutObjectLifecyclePolicy API.
     */
    putObjectLifecyclePolicy(putObjectLifecyclePolicyRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#putObjectLifecyclePolicy.");
            const pathParams = {
                "{namespaceName}": putObjectLifecyclePolicyRequest.namespaceName,
                "{bucketName}": putObjectLifecyclePolicyRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": putObjectLifecyclePolicyRequest.opcClientRequestId,
                "if-match": putObjectLifecyclePolicyRequest.ifMatch,
                "if-none-match": putObjectLifecyclePolicyRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/l",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(putObjectLifecyclePolicyRequest.putObjectLifecyclePolicyDetails, "PutObjectLifecyclePolicyDetails", models.PutObjectLifecyclePolicyDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, putObjectLifecyclePolicyRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "objectLifecyclePolicy",
                    bodyModel: "model.ObjectLifecyclePolicy",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Re-encrypts the unique data encryption key that encrypts each object written to the bucket by using the most recent
  * version of the master encryption key assigned to the bucket. (All data encryption keys are encrypted by a master
  * encryption key. Master encryption keys are assigned to buckets and managed by Oracle by default, but you can assign
  * a key that you created and control through the Oracle Cloud Infrastructure Key Management service.) The kmsKeyId property
  * of the bucket determines which master encryption key is assigned to the bucket. If you assigned a different Key Management
  * master encryption key to the bucket, you can call this API to re-encrypt all data encryption keys with the newly
  * assigned key. Similarly, you might want to re-encrypt all data encryption keys if the assigned key has been rotated to
  * a new key version since objects were last added to the bucket. If you call this API and there is no kmsKeyId associated
  * with the bucket, the call will fail.
  * <p>
  Calling this API starts a work request task to re-encrypt the data encryption key of all objects in the bucket. Only
  * objects created before the time of the API call will be re-encrypted. The call can take a long time, depending on how many
  * objects are in the bucket and how big they are. This API returns a work request ID that you can use to retrieve the status
  * of the work request task.
  * All the versions of objects will be re-encrypted whether versioning is enabled or suspended at the bucket.
  *
       * @param ReencryptBucketRequest
       * @return ReencryptBucketResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ReencryptBucket.ts.html |here} to see how to use ReencryptBucket API.
       */
    reencryptBucket(reencryptBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#reencryptBucket.");
            const pathParams = {
                "{namespaceName}": reencryptBucketRequest.namespaceName,
                "{bucketName}": reencryptBucketRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": reencryptBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/reencrypt",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, reencryptBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Re-encrypts the data encryption keys that encrypt the object and its chunks. By default, when you create a bucket, the Object Storage
  * service manages the master encryption key used to encrypt each object's data encryption keys. The encryption mechanism that you specify for
  * the bucket applies to the objects it contains.
  * <p>
  You can alternatively employ one of these encryption strategies for an object:
  * <p>
  - You can assign a key that you created and control through the Oracle Cloud Infrastructure Vault service.
  * <p>
  - You can encrypt an object using your own encryption key. The key you supply is known as a customer-provided encryption key (SSE-C).
  *
       * @param ReencryptObjectRequest
       * @return ReencryptObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/ReencryptObject.ts.html |here} to see how to use ReencryptObject API.
       */
    reencryptObject(reencryptObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#reencryptObject.");
            const pathParams = {
                "{namespaceName}": reencryptObjectRequest.namespaceName,
                "{bucketName}": reencryptObjectRequest.bucketName,
                "{objectName}": reencryptObjectRequest.objectName
            };
            const queryParams = {
                "versionId": reencryptObjectRequest.versionId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": reencryptObjectRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/reencrypt/{objectName}",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(reencryptObjectRequest.reencryptObjectDetails, "ReencryptObjectDetails", models.ReencryptObjectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, reencryptObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Rename an object in the given Object Storage namespace.
  * <p>
  See [Object Names](https://docs.cloud.oracle.com/Content/Object/Tasks/managingobjects.htm#namerequirements)
  * for object naming requirements.
  *
       * @param RenameObjectRequest
       * @return RenameObjectResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/RenameObject.ts.html |here} to see how to use RenameObject API.
       */
    renameObject(renameObjectRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#renameObject.");
            const pathParams = {
                "{namespaceName}": renameObjectRequest.namespaceName,
                "{bucketName}": renameObjectRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": renameObjectRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/renameObject",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(renameObjectRequest.renameObjectDetails, "RenameObjectDetails", models.RenameObjectDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, renameObjectRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("last-modified"),
                            key: "lastModified",
                            dataType: "Date"
                        },
                        {
                            value: response.headers.get("version-id"),
                            key: "versionId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Restores one or more objects specified by the objectName parameter.
     * By default objects will be restored for 24 hours. Duration can be configured using the hours parameter.
     *
     * @param RestoreObjectsRequest
     * @return RestoreObjectsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/RestoreObjects.ts.html |here} to see how to use RestoreObjects API.
     */
    restoreObjects(restoreObjectsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#restoreObjects.");
            const pathParams = {
                "{namespaceName}": restoreObjectsRequest.namespaceName,
                "{bucketName}": restoreObjectsRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": restoreObjectsRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/restoreObjects",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(restoreObjectsRequest.restoreObjectsDetails, "RestoreObjectsDetails", models.RestoreObjectsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, restoreObjectsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Performs a partial or full update of a bucket's user-defined metadata.
  * <p>
  Use UpdateBucket to move a bucket from one compartment to another within the same tenancy. Supply the compartmentID
  * of the compartment that you want to move the bucket to. For more information about moving resources between compartments,
  * see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  *
       * @param UpdateBucketRequest
       * @return UpdateBucketResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/UpdateBucket.ts.html |here} to see how to use UpdateBucket API.
       */
    updateBucket(updateBucketRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#updateBucket.");
            const pathParams = {
                "{namespaceName}": updateBucketRequest.namespaceName,
                "{bucketName}": updateBucketRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateBucketRequest.ifMatch,
                "opc-client-request-id": updateBucketRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateBucketRequest.updateBucketDetails, "UpdateBucketDetails", models.UpdateBucketDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBucketRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "bucket",
                    bodyModel: "model.Bucket",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * By default, buckets created using the Amazon S3 Compatibility API or the Swift API are created in the root
  * compartment of the Oracle Cloud Infrastructure tenancy.
  * <p>
  You can change the default Swift/Amazon S3 compartmentId designation to a different compartmentId. All
  * subsequent bucket creations will use the new default compartment, but no previously created
  * buckets will be modified. A user must have OBJECTSTORAGE_NAMESPACE_UPDATE permission to make changes to the default
  * compartments for Amazon S3 and Swift.
  *
       * @param UpdateNamespaceMetadataRequest
       * @return UpdateNamespaceMetadataResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/UpdateNamespaceMetadata.ts.html |here} to see how to use UpdateNamespaceMetadata API.
       */
    updateNamespaceMetadata(updateNamespaceMetadataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#updateNamespaceMetadata.");
            const pathParams = {
                "{namespaceName}": updateNamespaceMetadataRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": updateNamespaceMetadataRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateNamespaceMetadataRequest.updateNamespaceMetadataDetails, "UpdateNamespaceMetadataDetails", models.UpdateNamespaceMetadataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateNamespaceMetadataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespaceMetadata",
                    bodyModel: "model.NamespaceMetadata",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Changes the storage tier of the object specified by the objectName parameter.
     *
     * @param UpdateObjectStorageTierRequest
     * @return UpdateObjectStorageTierResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/UpdateObjectStorageTier.ts.html |here} to see how to use UpdateObjectStorageTier API.
     */
    updateObjectStorageTier(updateObjectStorageTierRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#updateObjectStorageTier.");
            const pathParams = {
                "{namespaceName}": updateObjectStorageTierRequest.namespaceName,
                "{bucketName}": updateObjectStorageTierRequest.bucketName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-client-request-id": updateObjectStorageTierRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/actions/updateObjectStorageTier",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateObjectStorageTierRequest.updateObjectStorageTierDetails, "UpdateObjectStorageTierDetails", models.UpdateObjectStorageTierDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateObjectStorageTierRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified retention rule. Rule changes take effect typically within 30 seconds.
     *
     * @param UpdateRetentionRuleRequest
     * @return UpdateRetentionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/UpdateRetentionRule.ts.html |here} to see how to use UpdateRetentionRule API.
     */
    updateRetentionRule(updateRetentionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#updateRetentionRule.");
            const pathParams = {
                "{namespaceName}": updateRetentionRuleRequest.namespaceName,
                "{bucketName}": updateRetentionRuleRequest.bucketName,
                "{retentionRuleId}": updateRetentionRuleRequest.retentionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateRetentionRuleRequest.ifMatch,
                "opc-client-request-id": updateRetentionRuleRequest.opcClientRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/retentionRules/{retentionRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateRetentionRuleRequest.updateRetentionRuleDetails, "UpdateRetentionRuleDetails", models.UpdateRetentionRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateRetentionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "retentionRule",
                    bodyModel: "model.RetentionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Uploads a single part of a multipart upload.
     *
     * @param UploadPartRequest
     * @return UploadPartResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/objectstorage/UploadPart.ts.html |here} to see how to use UploadPart API.
     */
    uploadPart(uploadPartRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ObjectStorageClient#uploadPart.");
            const pathParams = {
                "{namespaceName}": uploadPartRequest.namespaceName,
                "{bucketName}": uploadPartRequest.bucketName,
                "{objectName}": uploadPartRequest.objectName
            };
            const queryParams = {
                "uploadId": uploadPartRequest.uploadId,
                "uploadPartNum": uploadPartRequest.uploadPartNum
            };
            let headerParams = {
                "opc-client-request-id": uploadPartRequest.opcClientRequestId,
                "if-match": uploadPartRequest.ifMatch,
                "if-none-match": uploadPartRequest.ifNoneMatch,
                "Expect": uploadPartRequest.expect,
                "Content-Length": uploadPartRequest.contentLength,
                "Content-MD5": uploadPartRequest.contentMD5,
                "opc-sse-customer-algorithm": uploadPartRequest.opcSseCustomerAlgorithm,
                "opc-sse-customer-key": uploadPartRequest.opcSseCustomerKey,
                "opc-sse-customer-key-sha256": uploadPartRequest.opcSseCustomerKeySha256
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/n/{namespaceName}/b/{bucketName}/u/{objectName}",
                method: "PUT",
                bodyContent: uploadPartRequest.uploadPartBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, uploadPartRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, true);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-client-request-id"),
                            key: "opcClientRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("ETag"),
                            key: "eTag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ObjectStorageClient = ObjectStorageClient;
ObjectStorageClient.serviceEndpointTemplate = "https://objectstorage.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map