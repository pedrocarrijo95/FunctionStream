/**
 * Cloud Advisor API
 * APIs for managing Cloud Advisor. Cloud Advisor provides recommendations that help you maximize cost savings and improve the security posture of your tenancy.
 * OpenAPI spec version: 20200606
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { OptimizerClient } from "./client";
export declare class OptimizerWaiter {
    private client;
    private readonly config?;
    constructor(client: OptimizerClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forCategory till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCategoryResponse | null (null in case of 404 response)
     */
    forCategory(request: serviceRequests.GetCategoryRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetCategoryResponse | null>;
    /**
     * Waits forEnrollmentStatus till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEnrollmentStatusResponse | null (null in case of 404 response)
     */
    forEnrollmentStatus(request: serviceRequests.GetEnrollmentStatusRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetEnrollmentStatusResponse | null>;
    /**
     * Waits forProfile till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProfileResponse | null (null in case of 404 response)
     */
    forProfile(request: serviceRequests.GetProfileRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetProfileResponse | null>;
    /**
     * Waits forRecommendation till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetRecommendationResponse | null (null in case of 404 response)
     */
    forRecommendation(request: serviceRequests.GetRecommendationRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetRecommendationResponse | null>;
    /**
     * Waits forResourceAction till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResourceActionResponse | null (null in case of 404 response)
     */
    forResourceAction(request: serviceRequests.GetResourceActionRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetResourceActionResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
