/**
 * Service Connector Hub API
 * Use the Service Connector Hub API to transfer data between services in Oracle Cloud Infrastructure.
For more information about Service Connector Hub, see
[Service Connector Hub Overview](/iaas/Content/service-connector-hub/overview.htm).

 * OpenAPI spec version: 20200909
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { ServiceConnectorWaiter } from "./serviceconnector-waiter";
export declare enum ServiceConnectorApiKeys {
}
export declare class ServiceConnectorClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": ServiceConnectorWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new ServiceConnectorWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): ServiceConnectorWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): ServiceConnectorWaiter;
    /**
       * Activates the specified service connector.
  * <p>
  After you send your request, the service connector's state is temporarily
  * UPDATING. When the state changes to ACTIVE, data begins transferring from the
  * source service to the target service. For instructions on activating service
  * connectors, see
  * [To activate a service connector](https://docs.cloud.oracle.com/iaas/Content/service-connector-hub/managingconnectors.htm#activate).
  *
       * @param ActivateServiceConnectorRequest
       * @return ActivateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ActivateServiceConnector.ts.html |here} to see how to use ActivateServiceConnector API.
       */
    activateServiceConnector(activateServiceConnectorRequest: requests.ActivateServiceConnectorRequest): Promise<responses.ActivateServiceConnectorResponse>;
    /**
       * Moves a service connector into a different compartment within the same tenancy.
  * For information about moving resources between compartments, see
  * [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
  * <p>
  When provided, If-Match is checked against ETag values of the resource.
  *
       * @param ChangeServiceConnectorCompartmentRequest
       * @return ChangeServiceConnectorCompartmentResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ChangeServiceConnectorCompartment.ts.html |here} to see how to use ChangeServiceConnectorCompartment API.
       */
    changeServiceConnectorCompartment(changeServiceConnectorCompartmentRequest: requests.ChangeServiceConnectorCompartmentRequest): Promise<responses.ChangeServiceConnectorCompartmentResponse>;
    /**
       * Creates a new service connector in the specified compartment.
  * A service connector is a logically defined flow for moving data from
  * a source service to a destination service in Oracle Cloud Infrastructure.
  * For general information about service connectors, see
  * [Service Connector Hub Overview](https://docs.cloud.oracle.com/iaas/Content/service-connector-hub/overview.htm).
  * <p>
  For purposes of access control, you must provide the
  * [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where
  * you want the service connector to reside. Notice that the service connector
  * doesn't have to be in the same compartment as the source or target services.
  * For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
  * <p>
  After you send your request, the new service connector's state is temporarily
  * CREATING. When the state changes to ACTIVE, data begins transferring from the
  * source service to the target service. For instructions on deactivating and
  * activating service connectors, see
  * [To activate or deactivate a service connector](https://docs.cloud.oracle.com/iaas/Content/service-connector-hub/overview.htm).
  *
       * @param CreateServiceConnectorRequest
       * @return CreateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/CreateServiceConnector.ts.html |here} to see how to use CreateServiceConnector API.
       */
    createServiceConnector(createServiceConnectorRequest: requests.CreateServiceConnectorRequest): Promise<responses.CreateServiceConnectorResponse>;
    /**
       * Deactivates the specified service connector.
  * <p>
  After you send your request, the service connector's state is temporarily
  * UPDATING and any data transfer stops. The state then changes to INACTIVE.
  * For instructions on deactivating service connectors, see
  * [To deactivate a service connector](https://docs.cloud.oracle.com/iaas/Content/service-connector-hub/managingconnectors.htm#deactivate).
  *
       * @param DeactivateServiceConnectorRequest
       * @return DeactivateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/DeactivateServiceConnector.ts.html |here} to see how to use DeactivateServiceConnector API.
       */
    deactivateServiceConnector(deactivateServiceConnectorRequest: requests.DeactivateServiceConnectorRequest): Promise<responses.DeactivateServiceConnectorResponse>;
    /**
       * Deletes the specified service connector.
  * <p>
  After you send your request, the service connector's state is temporarily
  * DELETING and any data transfer stops. The state then changes to DELETED.
  *
       * @param DeleteServiceConnectorRequest
       * @return DeleteServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/DeleteServiceConnector.ts.html |here} to see how to use DeleteServiceConnector API.
       */
    deleteServiceConnector(deleteServiceConnectorRequest: requests.DeleteServiceConnectorRequest): Promise<responses.DeleteServiceConnectorResponse>;
    /**
     * Gets the specified service connector's configuration information.
     *
     * @param GetServiceConnectorRequest
     * @return GetServiceConnectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/GetServiceConnector.ts.html |here} to see how to use GetServiceConnector API.
     */
    getServiceConnector(getServiceConnectorRequest: requests.GetServiceConnectorRequest): Promise<responses.GetServiceConnectorResponse>;
    /**
     * Gets the details of the specified work request.
     *
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest: requests.GetWorkRequestRequest): Promise<responses.GetWorkRequestResponse>;
    /**
     * Lists service connectors in the specified compartment.
     *
     * @param ListServiceConnectorsRequest
     * @return ListServiceConnectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ListServiceConnectors.ts.html |here} to see how to use ListServiceConnectors API.
     */
    listServiceConnectors(listServiceConnectorsRequest: requests.ListServiceConnectorsRequest): Promise<responses.ListServiceConnectorsResponse>;
    /**
     * Lists work request errors for the specified work request. Results are paginated.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest: requests.ListWorkRequestErrorsRequest): Promise<responses.ListWorkRequestErrorsResponse>;
    /**
     * Lists logs for the specified work request. Results are paginated.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest: requests.ListWorkRequestLogsRequest): Promise<responses.ListWorkRequestLogsResponse>;
    /**
     * Lists the work requests in the specified compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest: requests.ListWorkRequestsRequest): Promise<responses.ListWorkRequestsResponse>;
    /**
       * Updates the configuration information for the specified service connector.
  * <p>
  After you send your request, the service connector's state is temporarily
  * UPDATING and any data transfer pauses. The state then changes back to its
  * original value: if ACTIVE, then data transfer resumes.
  *
       * @param UpdateServiceConnectorRequest
       * @return UpdateServiceConnectorResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/sch/UpdateServiceConnector.ts.html |here} to see how to use UpdateServiceConnector API.
       */
    updateServiceConnector(updateServiceConnectorRequest: requests.UpdateServiceConnectorRequest): Promise<responses.UpdateServiceConnectorResponse>;
}
