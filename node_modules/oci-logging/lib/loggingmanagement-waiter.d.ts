/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, and delete log groups, log objects, and agent configurations.
 * OpenAPI spec version: 20200531
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { LoggingManagementClient } from "./client";
export declare class LoggingManagementWaiter {
    private client;
    private readonly config?;
    constructor(client: LoggingManagementClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forLog till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogResponse
     */
    forLog(request: serviceRequests.GetLogRequest, ...targetStates: models.LogLifecycleState[]): Promise<serviceResponses.GetLogResponse>;
    /**
     * Waits forLogGroup till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogGroupResponse
     */
    forLogGroup(request: serviceRequests.GetLogGroupRequest, ...targetStates: models.LogGroupLifecycleState[]): Promise<serviceResponses.GetLogGroupResponse>;
    /**
     * Waits forLogSavedSearch till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogSavedSearchResponse
     */
    forLogSavedSearch(request: serviceRequests.GetLogSavedSearchRequest, ...targetStates: models.LogSavedSearchLifecycleState[]): Promise<serviceResponses.GetLogSavedSearchResponse>;
    /**
     * Waits forUnifiedAgentConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetUnifiedAgentConfigurationResponse
     */
    forUnifiedAgentConfiguration(request: serviceRequests.GetUnifiedAgentConfigurationRequest, ...targetStates: models.LogLifecycleState[]): Promise<serviceResponses.GetUnifiedAgentConfigurationResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
