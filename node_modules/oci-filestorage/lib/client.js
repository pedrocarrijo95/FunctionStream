"use strict";
/**
 * File Storage API
 * API for the File Storage service. Use this API to manage file systems, mount targets, and snapshots. For more information, see [Overview of File Storage](/iaas/Content/File/Concepts/filestorageoverview.htm).

 * OpenAPI spec version: 20171215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileStorageClient = exports.FileStorageApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const filestorage_waiter_1 = require("./filestorage-waiter");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var FileStorageApiKeys;
(function (FileStorageApiKeys) {
})(FileStorageApiKeys = exports.FileStorageApiKeys || (exports.FileStorageApiKeys = {}));
class FileStorageClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20171215";
        if (this.logger)
            this.logger.info(`FileStorageClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(FileStorageClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(FileStorageClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new FileStorageWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new filestorage_waiter_1.FileStorageWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a file system and its associated snapshots into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
     *
     * @param ChangeFileSystemCompartmentRequest
     * @return ChangeFileSystemCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ChangeFileSystemCompartment.ts.html |here} to see how to use ChangeFileSystemCompartment API.
     */
    changeFileSystemCompartment(changeFileSystemCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#changeFileSystemCompartment.");
            const pathParams = {
                "{fileSystemId}": changeFileSystemCompartmentRequest.fileSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeFileSystemCompartmentRequest.ifMatch,
                "opc-request-id": changeFileSystemCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems/{fileSystemId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeFileSystemCompartmentRequest.changeFileSystemCompartmentDetails, "ChangeFileSystemCompartmentDetails", models.ChangeFileSystemCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeFileSystemCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a mount target and its associated export set into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes)
     *
     * @param ChangeMountTargetCompartmentRequest
     * @return ChangeMountTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ChangeMountTargetCompartment.ts.html |here} to see how to use ChangeMountTargetCompartment API.
     */
    changeMountTargetCompartment(changeMountTargetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#changeMountTargetCompartment.");
            const pathParams = {
                "{mountTargetId}": changeMountTargetCompartmentRequest.mountTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeMountTargetCompartmentRequest.ifMatch,
                "opc-request-id": changeMountTargetCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets/{mountTargetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeMountTargetCompartmentRequest.changeMountTargetCompartmentDetails, "ChangeMountTargetCompartmentDetails", models.ChangeMountTargetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeMountTargetCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new export in the specified export set, path, and
     * file system.
     *
     * @param CreateExportRequest
     * @return CreateExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/CreateExport.ts.html |here} to see how to use CreateExport API.
     */
    createExport(createExportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#createExport.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createExportRequest.opcRetryToken,
                "opc-request-id": createExportRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exports",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createExportRequest.createExportDetails, "CreateExportDetails", models.CreateExportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createExportRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "export",
                    bodyModel: "model.Export",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new file system in the specified compartment and
  * availability domain. Instances can mount file systems in
  * another availability domain, but doing so might increase
  * latency when compared to mounting instances in the same
  * availability domain.
  * <p>
  After you create a file system, you can associate it with a mount
  * target. Instances can then mount the file system by connecting to the
  * mount target's IP address. You can associate a file system with
  * more than one mount target at a time.
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about Network Security Groups access control, see
  * [Network Security Groups](https://docs.cloud.oracle.com/Content/Network/Concepts/networksecuritygroups.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure resources, including
  * file systems, get an Oracle-assigned, unique ID called an Oracle
  * Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type or by viewing the resource in the Console.
  *
       * @param CreateFileSystemRequest
       * @return CreateFileSystemResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/CreateFileSystem.ts.html |here} to see how to use CreateFileSystem API.
       */
    createFileSystem(createFileSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#createFileSystem.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createFileSystemRequest.opcRetryToken,
                "opc-request-id": createFileSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createFileSystemRequest.createFileSystemDetails, "CreateFileSystemDetails", models.CreateFileSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createFileSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fileSystem",
                    bodyModel: "model.FileSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Creates a new mount target in the specified compartment and
  * subnet. You can associate a file system with a mount
  * target only when they exist in the same availability domain. Instances
  * can connect to mount targets in another availablity domain, but
  * you might see higher latency than with instances in the same
  * availability domain as the mount target.
  * <p>
  Mount targets have one or more private IP addresses that you can
  * provide as the host portion of remote target parameters in
  * client mount commands. These private IP addresses are listed
  * in the privateIpIds property of the mount target and are highly available. Mount
  * targets also consume additional IP addresses in their subnet.
  * Do not use /30 or smaller subnets for mount target creation because they
  * do not have sufficient available IP addresses.
  * Allow at least three IP addresses for each mount target.
  * <p>
  For information about access control and compartments, see
  * [Overview of the IAM
  * Service](https://docs.cloud.oracle.com/Content/Identity/Concepts/overview.htm).
  * <p>
  For information about availability domains, see [Regions and
  * Availability Domains](https://docs.cloud.oracle.com/Content/General/Concepts/regions.htm).
  * To get a list of availability domains, use the
  * `ListAvailabilityDomains` operation in the Identity and Access
  * Management Service API.
  * <p>
  All Oracle Cloud Infrastructure Services resources, including
  * mount targets, get an Oracle-assigned, unique ID called an
  * Oracle Cloud Identifier ([OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm)).
  * When you create a resource, you can find its OCID in the response.
  * You can also retrieve a resource's OCID by using a List API operation on that resource
  * type, or by viewing the resource in the Console.
  *
       * @param CreateMountTargetRequest
       * @return CreateMountTargetResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/CreateMountTarget.ts.html |here} to see how to use CreateMountTarget API.
       */
    createMountTarget(createMountTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#createMountTarget.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createMountTargetRequest.opcRetryToken,
                "opc-request-id": createMountTargetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createMountTargetRequest.createMountTargetDetails, "CreateMountTargetDetails", models.CreateMountTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createMountTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mountTarget",
                    bodyModel: "model.MountTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new snapshot of the specified file system. You
     * can access the snapshot at `.snapshot/<name>`.
     *
     * @param CreateSnapshotRequest
     * @return CreateSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/CreateSnapshot.ts.html |here} to see how to use CreateSnapshot API.
     */
    createSnapshot(createSnapshotRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#createSnapshot.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createSnapshotRequest.opcRetryToken,
                "opc-request-id": createSnapshotRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/snapshots",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSnapshotRequest.createSnapshotDetails, "CreateSnapshotDetails", models.CreateSnapshotDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createSnapshotRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "snapshot",
                    bodyModel: "model.Snapshot",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified export.
     *
     * @param DeleteExportRequest
     * @return DeleteExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/DeleteExport.ts.html |here} to see how to use DeleteExport API.
     */
    deleteExport(deleteExportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#deleteExport.");
            const pathParams = {
                "{exportId}": deleteExportRequest.exportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteExportRequest.ifMatch,
                "opc-request-id": deleteExportRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exports/{exportId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteExportRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified file system. Before you delete the file system,
     * verify that no remaining export resources still reference it. Deleting a
     * file system also deletes all of its snapshots.
     *
     * @param DeleteFileSystemRequest
     * @return DeleteFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/DeleteFileSystem.ts.html |here} to see how to use DeleteFileSystem API.
     */
    deleteFileSystem(deleteFileSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#deleteFileSystem.");
            const pathParams = {
                "{fileSystemId}": deleteFileSystemRequest.fileSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteFileSystemRequest.ifMatch,
                "opc-request-id": deleteFileSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems/{fileSystemId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteFileSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified mount target. This operation also deletes the
     * mount target's VNICs.
     *
     * @param DeleteMountTargetRequest
     * @return DeleteMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/DeleteMountTarget.ts.html |here} to see how to use DeleteMountTarget API.
     */
    deleteMountTarget(deleteMountTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#deleteMountTarget.");
            const pathParams = {
                "{mountTargetId}": deleteMountTargetRequest.mountTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteMountTargetRequest.ifMatch,
                "opc-request-id": deleteMountTargetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets/{mountTargetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteMountTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified snapshot.
     *
     * @param DeleteSnapshotRequest
     * @return DeleteSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/DeleteSnapshot.ts.html |here} to see how to use DeleteSnapshot API.
     */
    deleteSnapshot(deleteSnapshotRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#deleteSnapshot.");
            const pathParams = {
                "{snapshotId}": deleteSnapshotRequest.snapshotId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteSnapshotRequest.ifMatch,
                "opc-request-id": deleteSnapshotRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/snapshots/{snapshotId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSnapshotRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified export's information.
     * @param GetExportRequest
     * @return GetExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/GetExport.ts.html |here} to see how to use GetExport API.
     */
    getExport(getExportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#getExport.");
            const pathParams = {
                "{exportId}": getExportRequest.exportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExportRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exports/{exportId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getExportRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "export",
                    bodyModel: "model.Export",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified export set's information.
     * @param GetExportSetRequest
     * @return GetExportSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/GetExportSet.ts.html |here} to see how to use GetExportSet API.
     */
    getExportSet(getExportSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#getExportSet.");
            const pathParams = {
                "{exportSetId}": getExportSetRequest.exportSetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getExportSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exportSets/{exportSetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getExportSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exportSet",
                    bodyModel: "model.ExportSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified file system's information.
     * @param GetFileSystemRequest
     * @return GetFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/GetFileSystem.ts.html |here} to see how to use GetFileSystem API.
     */
    getFileSystem(getFileSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#getFileSystem.");
            const pathParams = {
                "{fileSystemId}": getFileSystemRequest.fileSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getFileSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems/{fileSystemId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getFileSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fileSystem",
                    bodyModel: "model.FileSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified mount target's information.
     * @param GetMountTargetRequest
     * @return GetMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/GetMountTarget.ts.html |here} to see how to use GetMountTarget API.
     */
    getMountTarget(getMountTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#getMountTarget.");
            const pathParams = {
                "{mountTargetId}": getMountTargetRequest.mountTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getMountTargetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets/{mountTargetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getMountTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mountTarget",
                    bodyModel: "model.MountTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the specified snapshot's information.
     * @param GetSnapshotRequest
     * @return GetSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/GetSnapshot.ts.html |here} to see how to use GetSnapshot API.
     */
    getSnapshot(getSnapshotRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#getSnapshot.");
            const pathParams = {
                "{snapshotId}": getSnapshotRequest.snapshotId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSnapshotRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/snapshots/{snapshotId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSnapshotRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "snapshot",
                    bodyModel: "model.Snapshot",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the export set resources in the specified compartment.
     *
     * @param ListExportSetsRequest
     * @return ListExportSetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ListExportSets.ts.html |here} to see how to use ListExportSets API.
     */
    listExportSets(listExportSetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#listExportSets.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExportSetsRequest.compartmentId,
                "availabilityDomain": listExportSetsRequest.availabilityDomain,
                "limit": listExportSetsRequest.limit,
                "page": listExportSetsRequest.page,
                "displayName": listExportSetsRequest.displayName,
                "lifecycleState": listExportSetsRequest.lifecycleState,
                "id": listExportSetsRequest.id,
                "sortBy": listExportSetsRequest.sortBy,
                "sortOrder": listExportSetsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExportSetsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exportSets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listExportSetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ExportSetSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ExportSetSummary objects
     * contained in responses from the listExportSets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportSets(request) {
        return oci_common_1.paginateRecords(request, req => this.listExportSets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listExportSets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportSetsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listExportSets(req));
    }
    /**
     * Lists export resources by compartment, file system, or export
     * set. You must specify an export set ID, a file system ID, and
     * / or a compartment ID.
     *
     * @param ListExportsRequest
     * @return ListExportsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ListExports.ts.html |here} to see how to use ListExports API.
     */
    listExports(listExportsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#listExports.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listExportsRequest.compartmentId,
                "limit": listExportsRequest.limit,
                "page": listExportsRequest.page,
                "exportSetId": listExportsRequest.exportSetId,
                "fileSystemId": listExportsRequest.fileSystemId,
                "lifecycleState": listExportsRequest.lifecycleState,
                "id": listExportsRequest.id,
                "sortBy": listExportsRequest.sortBy,
                "sortOrder": listExportsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listExportsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exports",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listExportsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "ExportSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.ExportSummary objects
     * contained in responses from the listExports operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExports(request) {
        return oci_common_1.paginateRecords(request, req => this.listExports(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listExports operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllExportsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listExports(req));
    }
    /**
     * Lists the file system resources in the specified compartment.
     *
     * @param ListFileSystemsRequest
     * @return ListFileSystemsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ListFileSystems.ts.html |here} to see how to use ListFileSystems API.
     */
    listFileSystems(listFileSystemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#listFileSystems.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listFileSystemsRequest.compartmentId,
                "availabilityDomain": listFileSystemsRequest.availabilityDomain,
                "limit": listFileSystemsRequest.limit,
                "page": listFileSystemsRequest.page,
                "displayName": listFileSystemsRequest.displayName,
                "lifecycleState": listFileSystemsRequest.lifecycleState,
                "id": listFileSystemsRequest.id,
                "sourceSnapshotId": listFileSystemsRequest.sourceSnapshotId,
                "parentFileSystemId": listFileSystemsRequest.parentFileSystemId,
                "sortBy": listFileSystemsRequest.sortBy,
                "sortOrder": listFileSystemsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFileSystemsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listFileSystemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "FileSystemSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.FileSystemSummary objects
     * contained in responses from the listFileSystems operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFileSystems(request) {
        return oci_common_1.paginateRecords(request, req => this.listFileSystems(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listFileSystems operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllFileSystemsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listFileSystems(req));
    }
    /**
     * Lists the mount target resources in the specified compartment.
     *
     * @param ListMountTargetsRequest
     * @return ListMountTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ListMountTargets.ts.html |here} to see how to use ListMountTargets API.
     */
    listMountTargets(listMountTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#listMountTargets.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listMountTargetsRequest.compartmentId,
                "availabilityDomain": listMountTargetsRequest.availabilityDomain,
                "limit": listMountTargetsRequest.limit,
                "page": listMountTargetsRequest.page,
                "displayName": listMountTargetsRequest.displayName,
                "exportSetId": listMountTargetsRequest.exportSetId,
                "lifecycleState": listMountTargetsRequest.lifecycleState,
                "id": listMountTargetsRequest.id,
                "sortBy": listMountTargetsRequest.sortBy,
                "sortOrder": listMountTargetsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMountTargetsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listMountTargetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "MountTargetSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.MountTargetSummary objects
     * contained in responses from the listMountTargets operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMountTargets(request) {
        return oci_common_1.paginateRecords(request, req => this.listMountTargets(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listMountTargets operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllMountTargetsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listMountTargets(req));
    }
    /**
     * Lists snapshots of the specified file system.
     *
     * @param ListSnapshotsRequest
     * @return ListSnapshotsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/ListSnapshots.ts.html |here} to see how to use ListSnapshots API.
     */
    listSnapshots(listSnapshotsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#listSnapshots.");
            const pathParams = {};
            const queryParams = {
                "fileSystemId": listSnapshotsRequest.fileSystemId,
                "limit": listSnapshotsRequest.limit,
                "page": listSnapshotsRequest.page,
                "lifecycleState": listSnapshotsRequest.lifecycleState,
                "id": listSnapshotsRequest.id,
                "sortOrder": listSnapshotsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSnapshotsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/snapshots",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSnapshotsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "SnapshotSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.SnapshotSummary objects
     * contained in responses from the listSnapshots operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSnapshots(request) {
        return oci_common_1.paginateRecords(request, req => this.listSnapshots(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSnapshots operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSnapshotsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listSnapshots(req));
    }
    /**
     * Updates the specified export's information.
     * @param UpdateExportRequest
     * @return UpdateExportResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/UpdateExport.ts.html |here} to see how to use UpdateExport API.
     */
    updateExport(updateExportRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#updateExport.");
            const pathParams = {
                "{exportId}": updateExportRequest.exportId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateExportRequest.ifMatch,
                "opc-request-id": updateExportRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exports/{exportId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExportRequest.updateExportDetails, "UpdateExportDetails", models.UpdateExportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateExportRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "export",
                    bodyModel: "model.Export",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified export set's information.
     * @param UpdateExportSetRequest
     * @return UpdateExportSetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/UpdateExportSet.ts.html |here} to see how to use UpdateExportSet API.
     */
    updateExportSet(updateExportSetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#updateExportSet.");
            const pathParams = {
                "{exportSetId}": updateExportSetRequest.exportSetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateExportSetRequest.ifMatch,
                "opc-request-id": updateExportSetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/exportSets/{exportSetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateExportSetRequest.updateExportSetDetails, "UpdateExportSetDetails", models.UpdateExportSetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateExportSetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "exportSet",
                    bodyModel: "model.ExportSet",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified file system's information.
     * You can use this operation to rename a file system.
     *
     * @param UpdateFileSystemRequest
     * @return UpdateFileSystemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/UpdateFileSystem.ts.html |here} to see how to use UpdateFileSystem API.
     */
    updateFileSystem(updateFileSystemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#updateFileSystem.");
            const pathParams = {
                "{fileSystemId}": updateFileSystemRequest.fileSystemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateFileSystemRequest.ifMatch,
                "opc-request-id": updateFileSystemRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fileSystems/{fileSystemId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateFileSystemRequest.updateFileSystemDetails, "UpdateFileSystemDetails", models.UpdateFileSystemDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateFileSystemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fileSystem",
                    bodyModel: "model.FileSystem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified mount target's information.
     * @param UpdateMountTargetRequest
     * @return UpdateMountTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/UpdateMountTarget.ts.html |here} to see how to use UpdateMountTarget API.
     */
    updateMountTarget(updateMountTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#updateMountTarget.");
            const pathParams = {
                "{mountTargetId}": updateMountTargetRequest.mountTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateMountTargetRequest.ifMatch,
                "opc-request-id": updateMountTargetRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/mountTargets/{mountTargetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateMountTargetRequest.updateMountTargetDetails, "UpdateMountTargetDetails", models.UpdateMountTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateMountTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mountTarget",
                    bodyModel: "model.MountTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified snapshot's information.
     * @param UpdateSnapshotRequest
     * @return UpdateSnapshotResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/filestorage/UpdateSnapshot.ts.html |here} to see how to use UpdateSnapshot API.
     */
    updateSnapshot(updateSnapshotRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation FileStorageClient#updateSnapshot.");
            const pathParams = {
                "{snapshotId}": updateSnapshotRequest.snapshotId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateSnapshotRequest.ifMatch,
                "opc-request-id": updateSnapshotRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/snapshots/{snapshotId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSnapshotRequest.updateSnapshotDetails, "UpdateSnapshotDetails", models.UpdateSnapshotDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateSnapshotRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "snapshot",
                    bodyModel: "model.Snapshot",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.FileStorageClient = FileStorageClient;
FileStorageClient.serviceEndpointTemplate = "https://filestorage.{region}.{secondLevelDomain}";
//# sourceMappingURL=client.js.map