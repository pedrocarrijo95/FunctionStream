/**
 * Streaming Service API
 * The API for the Streaming Service.
 * OpenAPI spec version: 20180418
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
import { StreamAdminWaiter } from "./streamadmin-waiter";
export declare enum StreamApiKeys {
}
export declare class StreamClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Provides a mechanism to manually commit offsets, if not using commit-on-get consumer semantics.
     * This commits offsets assicated with the provided cursor, extends the timeout on each of the affected partitions, and returns an updated cursor.
     *
     * @param ConsumerCommitRequest
     * @return ConsumerCommitResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ConsumerCommit.ts.html |here} to see how to use ConsumerCommit API.
     */
    consumerCommit(consumerCommitRequest: requests.ConsumerCommitRequest): Promise<responses.ConsumerCommitResponse>;
    /**
     * Allows long-running processes to extend the timeout on partitions reserved by a consumer instance.
     *
     * @param ConsumerHeartbeatRequest
     * @return ConsumerHeartbeatResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ConsumerHeartbeat.ts.html |here} to see how to use ConsumerHeartbeat API.
     */
    consumerHeartbeat(consumerHeartbeatRequest: requests.ConsumerHeartbeatRequest): Promise<responses.ConsumerHeartbeatResponse>;
    /**
     * Creates a cursor. Cursors are used to consume a stream, starting from a specific point in the partition and going forward from there.
     * You can create a cursor based on an offset, a time, the trim horizon, or the most recent message in the stream. As the oldest message
     * inside the retention period boundary, using the trim horizon effectively lets you consume all messages in the stream. A cursor based
     * on the most recent message allows consumption of only messages that are added to the stream after you create the cursor. Cursors expire
     * five minutes after you receive them from the service.
     *
     * @param CreateCursorRequest
     * @return CreateCursorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/CreateCursor.ts.html |here} to see how to use CreateCursor API.
     */
    createCursor(createCursorRequest: requests.CreateCursorRequest): Promise<responses.CreateCursorResponse>;
    /**
     * Creates a group-cursor.
     *
     * @param CreateGroupCursorRequest
     * @return CreateGroupCursorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/CreateGroupCursor.ts.html |here} to see how to use CreateGroupCursor API.
     */
    createGroupCursor(createGroupCursorRequest: requests.CreateGroupCursorRequest): Promise<responses.CreateGroupCursorResponse>;
    /**
     * Returns the current state of a consumer group.
     *
     * @param GetGroupRequest
     * @return GetGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/GetGroup.ts.html |here} to see how to use GetGroup API.
     */
    getGroup(getGroupRequest: requests.GetGroupRequest): Promise<responses.GetGroupResponse>;
    /**
     * Returns messages from the specified stream using the specified cursor as the starting point for consumption. By default, the number of messages returned is undefined, but the service returns as many as possible.
     * To get messages, you must first obtain a cursor using the {@link #createCursor(CreateCursorRequest) createCursor} operation.
     * In the response, retrieve the value of the 'opc-next-cursor' header to pass as a parameter to get the next batch of messages in the stream.
     *
     * @param GetMessagesRequest
     * @return GetMessagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/GetMessages.ts.html |here} to see how to use GetMessages API.
     */
    getMessages(getMessagesRequest: requests.GetMessagesRequest): Promise<responses.GetMessagesResponse>;
    /**
     * Emits messages to a stream. There's no limit to the number of messages in a request, but the total size of a message or request must be 1 MiB or less.
     * The service calculates the partition ID from the message key and stores messages that share a key on the same partition.
     * If a message does not contain a key or if the key is null, the service generates a message key for you.
     * The partition ID cannot be passed as a parameter.
     *
     * @param PutMessagesRequest
     * @return PutMessagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/PutMessages.ts.html |here} to see how to use PutMessages API.
     */
    putMessages(putMessagesRequest: requests.PutMessagesRequest): Promise<responses.PutMessagesResponse>;
    /**
     * Forcefully changes the current location of a group as a whole; reseting processing location of all consumers to a particular location in the stream.
     *
     * @param UpdateGroupRequest
     * @return UpdateGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/UpdateGroup.ts.html |here} to see how to use UpdateGroup API.
     */
    updateGroup(updateGroupRequest: requests.UpdateGroupRequest): Promise<responses.UpdateGroupResponse>;
}
export declare enum StreamAdminApiKeys {
}
export declare class StreamAdminClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": StreamAdminWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new StreamAdminWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): StreamAdminWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): StreamAdminWaiter;
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * @param ChangeConnectHarnessCompartmentRequest
     * @return ChangeConnectHarnessCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ChangeConnectHarnessCompartment.ts.html |here} to see how to use ChangeConnectHarnessCompartment API.
     */
    changeConnectHarnessCompartment(changeConnectHarnessCompartmentRequest: requests.ChangeConnectHarnessCompartmentRequest): Promise<responses.ChangeConnectHarnessCompartmentResponse>;
    /**
     * Moves a resource into a different compartment.
     * When provided, If-Match is checked against ETag values of the resource.
     * The stream will also be moved into the default stream pool in the destination compartment.
     *
     * @param ChangeStreamCompartmentRequest
     * @return ChangeStreamCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ChangeStreamCompartment.ts.html |here} to see how to use ChangeStreamCompartment API.
     */
    changeStreamCompartment(changeStreamCompartmentRequest: requests.ChangeStreamCompartmentRequest): Promise<responses.ChangeStreamCompartmentResponse>;
    /**
     * Moves a resource into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     * @param ChangeStreamPoolCompartmentRequest
     * @return ChangeStreamPoolCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ChangeStreamPoolCompartment.ts.html |here} to see how to use ChangeStreamPoolCompartment API.
     */
    changeStreamPoolCompartment(changeStreamPoolCompartmentRequest: requests.ChangeStreamPoolCompartmentRequest): Promise<responses.ChangeStreamPoolCompartmentResponse>;
    /**
     * Starts the provisioning of a new connect harness.
     * To track the progress of the provisioning, you can periodically call {@link ConnectHarness} object tells you its current state.
     *
     * @param CreateConnectHarnessRequest
     * @return CreateConnectHarnessResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/CreateConnectHarness.ts.html |here} to see how to use CreateConnectHarness API.
     */
    createConnectHarness(createConnectHarnessRequest: requests.CreateConnectHarnessRequest): Promise<responses.CreateConnectHarnessResponse>;
    /**
     * Starts the provisioning of a new stream.
     * The stream will be created in the given compartment id or stream pool id, depending on which parameter is specified.
     * Compartment id and stream pool id cannot be specified at the same time.
     * To track the progress of the provisioning, you can periodically call {@link #getStream(GetStreamRequest) getStream}.
     * In the response, the `lifecycleState` parameter of the {@link Stream} object tells you its current state.
     *
     * @param CreateStreamRequest
     * @return CreateStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/CreateStream.ts.html |here} to see how to use CreateStream API.
     */
    createStream(createStreamRequest: requests.CreateStreamRequest): Promise<responses.CreateStreamResponse>;
    /**
     * Starts the provisioning of a new stream pool.
     * To track the progress of the provisioning, you can periodically call GetStreamPool.
     * In the response, the `lifecycleState` parameter of the object tells you its current state.
     *
     * @param CreateStreamPoolRequest
     * @return CreateStreamPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/CreateStreamPool.ts.html |here} to see how to use CreateStreamPool API.
     */
    createStreamPool(createStreamPoolRequest: requests.CreateStreamPoolRequest): Promise<responses.CreateStreamPoolResponse>;
    /**
     * Deletes a connect harness and its content. Connect harness contents are deleted immediately. The service retains records of the connect harness itself for 90 days after deletion.
     * The `lifecycleState` parameter of the `ConnectHarness` object changes to `DELETING` and the connect harness becomes inaccessible for read or write operations.
     * To verify that a connect harness has been deleted, make a {@link #getConnectHarness(GetConnectHarnessRequest) getConnectHarness} request. If the call returns the connect harness's
     * lifecycle state as `DELETED`, then the connect harness has been deleted. If the call returns a \"404 Not Found\" error, that means all records of the
     * connect harness have been deleted.
     *
     * @param DeleteConnectHarnessRequest
     * @return DeleteConnectHarnessResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/DeleteConnectHarness.ts.html |here} to see how to use DeleteConnectHarness API.
     */
    deleteConnectHarness(deleteConnectHarnessRequest: requests.DeleteConnectHarnessRequest): Promise<responses.DeleteConnectHarnessResponse>;
    /**
     * Deletes a stream and its content. Stream contents are deleted immediately. The service retains records of the stream itself for 90 days after deletion.
     * The `lifecycleState` parameter of the `Stream` object changes to `DELETING` and the stream becomes inaccessible for read or write operations.
     * To verify that a stream has been deleted, make a {@link #getStream(GetStreamRequest) getStream} request. If the call returns the stream's
     * lifecycle state as `DELETED`, then the stream has been deleted. If the call returns a \"404 Not Found\" error, that means all records of the
     * stream have been deleted.
     *
     * @param DeleteStreamRequest
     * @return DeleteStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/DeleteStream.ts.html |here} to see how to use DeleteStream API.
     */
    deleteStream(deleteStreamRequest: requests.DeleteStreamRequest): Promise<responses.DeleteStreamResponse>;
    /**
     * Deletes a stream pool. All containing streams will also be deleted.
     * The default stream pool of a compartment cannot be deleted.
     *
     * @param DeleteStreamPoolRequest
     * @return DeleteStreamPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/DeleteStreamPool.ts.html |here} to see how to use DeleteStreamPool API.
     */
    deleteStreamPool(deleteStreamPoolRequest: requests.DeleteStreamPoolRequest): Promise<responses.DeleteStreamPoolResponse>;
    /**
     * Gets detailed information about a connect harness.
     * @param GetConnectHarnessRequest
     * @return GetConnectHarnessResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/GetConnectHarness.ts.html |here} to see how to use GetConnectHarness API.
     */
    getConnectHarness(getConnectHarnessRequest: requests.GetConnectHarnessRequest): Promise<responses.GetConnectHarnessResponse>;
    /**
     * Gets detailed information about a stream, including the number of partitions.
     * @param GetStreamRequest
     * @return GetStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/GetStream.ts.html |here} to see how to use GetStream API.
     */
    getStream(getStreamRequest: requests.GetStreamRequest): Promise<responses.GetStreamResponse>;
    /**
     * Gets detailed information about the stream pool, such as Kafka settings.
     * @param GetStreamPoolRequest
     * @return GetStreamPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/GetStreamPool.ts.html |here} to see how to use GetStreamPool API.
     */
    getStreamPool(getStreamPoolRequest: requests.GetStreamPoolRequest): Promise<responses.GetStreamPoolResponse>;
    /**
     * Lists the connectharness.
     * @param ListConnectHarnessesRequest
     * @return ListConnectHarnessesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ListConnectHarnesses.ts.html |here} to see how to use ListConnectHarnesses API.
     */
    listConnectHarnesses(listConnectHarnessesRequest: requests.ListConnectHarnessesRequest): Promise<responses.ListConnectHarnessesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.ConnectHarnessSummary objects
     * contained in responses from the listConnectHarnesses operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConnectHarnesses(request: requests.ListConnectHarnessesRequest): AsyncIterableIterator<models.ConnectHarnessSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listConnectHarnesses operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllConnectHarnessesResponses(request: requests.ListConnectHarnessesRequest): AsyncIterableIterator<responses.ListConnectHarnessesResponse>;
    /**
     * List the stream pools for a given compartment ID.
     * @param ListStreamPoolsRequest
     * @return ListStreamPoolsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ListStreamPools.ts.html |here} to see how to use ListStreamPools API.
     */
    listStreamPools(listStreamPoolsRequest: requests.ListStreamPoolsRequest): Promise<responses.ListStreamPoolsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.StreamPoolSummary objects
     * contained in responses from the listStreamPools operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStreamPools(request: requests.ListStreamPoolsRequest): AsyncIterableIterator<models.StreamPoolSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listStreamPools operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStreamPoolsResponses(request: requests.ListStreamPoolsRequest): AsyncIterableIterator<responses.ListStreamPoolsResponse>;
    /**
     * Lists the streams in the given compartment id.
     * If the compartment id is specified, it will list streams in the compartment, regardless of their stream pool.
     * If the stream pool id is specified, the action will be scoped to that stream pool.
     * The compartment id and stream pool id cannot be specified at the same time.
     *
     * @param ListStreamsRequest
     * @return ListStreamsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/ListStreams.ts.html |here} to see how to use ListStreams API.
     */
    listStreams(listStreamsRequest: requests.ListStreamsRequest): Promise<responses.ListStreamsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.StreamSummary objects
     * contained in responses from the listStreams operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStreams(request: requests.ListStreamsRequest): AsyncIterableIterator<models.StreamSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listStreams operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllStreamsResponses(request: requests.ListStreamsRequest): AsyncIterableIterator<responses.ListStreamsResponse>;
    /**
     * Updates the tags applied to the connect harness.
     *
     * @param UpdateConnectHarnessRequest
     * @return UpdateConnectHarnessResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/UpdateConnectHarness.ts.html |here} to see how to use UpdateConnectHarness API.
     */
    updateConnectHarness(updateConnectHarnessRequest: requests.UpdateConnectHarnessRequest): Promise<responses.UpdateConnectHarnessResponse>;
    /**
     * Updates the stream. Only specified values will be updated.
     *
     * @param UpdateStreamRequest
     * @return UpdateStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/UpdateStream.ts.html |here} to see how to use UpdateStream API.
     */
    updateStream(updateStreamRequest: requests.UpdateStreamRequest): Promise<responses.UpdateStreamResponse>;
    /**
     * Updates the specified stream pool.
     *
     * @param UpdateStreamPoolRequest
     * @return UpdateStreamPoolResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/streaming/UpdateStreamPool.ts.html |here} to see how to use UpdateStreamPool API.
     */
    updateStreamPool(updateStreamPoolRequest: requests.UpdateStreamPoolRequest): Promise<responses.UpdateStreamPoolResponse>;
}
