"use strict";
/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
 * OpenAPI spec version: 20190325
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataCatalogWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
class DataCatalogWaiter {
    constructor(client, config) {
        this.client = client;
        this.config = config;
    }
    /**
     * Waits forAttribute till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAttributeResponse | null (null in case of 404 response)
     */
    forAttribute(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAttribute(request), response => targetStates.includes(response.attribute.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forAttributeTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAttributeTagResponse | null (null in case of 404 response)
     */
    forAttributeTag(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getAttributeTag(request), response => targetStates.includes(response.attributeTag.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forCatalog till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCatalogResponse | null (null in case of 404 response)
     */
    forCatalog(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCatalog(request), response => targetStates.includes(response.catalog.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forCatalogPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCatalogPrivateEndpointResponse | null (null in case of 404 response)
     */
    forCatalogPrivateEndpoint(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCatalogPrivateEndpoint(request), response => targetStates.includes(response.catalogPrivateEndpoint.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConnectionResponse | null (null in case of 404 response)
     */
    forConnection(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getConnection(request), response => targetStates.includes(response.connection.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forCustomProperty till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCustomPropertyResponse | null (null in case of 404 response)
     */
    forCustomProperty(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getCustomProperty(request), response => targetStates.includes(response.customProperty.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDataAsset till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataAssetResponse | null (null in case of 404 response)
     */
    forDataAsset(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDataAsset(request), response => targetStates.includes(response.dataAsset.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forDataAssetTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataAssetTagResponse | null (null in case of 404 response)
     */
    forDataAssetTag(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getDataAssetTag(request), response => targetStates.includes(response.dataAssetTag.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forEntity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEntityResponse | null (null in case of 404 response)
     */
    forEntity(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getEntity(request), response => targetStates.includes(response.entity.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forEntityTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEntityTagResponse | null (null in case of 404 response)
     */
    forEntityTag(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getEntityTag(request), response => targetStates.includes(response.entityTag.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forFolder till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFolderResponse | null (null in case of 404 response)
     */
    forFolder(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getFolder(request), response => targetStates.includes(response.folder.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forFolderTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFolderTagResponse | null (null in case of 404 response)
     */
    forFolderTag(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getFolderTag(request), response => targetStates.includes(response.folderTag.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forGlossary till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetGlossaryResponse | null (null in case of 404 response)
     */
    forGlossary(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getGlossary(request), response => targetStates.includes(response.glossary.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse
     */
    forJob(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getJob(request), response => targetStates.includes(response.job.lifecycleState));
        });
    }
    /**
     * Waits forJobDefinition till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobDefinitionResponse | null (null in case of 404 response)
     */
    forJobDefinition(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getJobDefinition(request), response => targetStates.includes(response.jobDefinition.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forJobExecution till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobExecutionResponse
     */
    forJobExecution(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getJobExecution(request), response => targetStates.includes(response.jobExecution.lifecycleState));
        });
    }
    /**
     * Waits forNamespace till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNamespaceResponse | null (null in case of 404 response)
     */
    forNamespace(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getNamespace(request), response => targetStates.includes(response.namespace.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forPattern till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPatternResponse | null (null in case of 404 response)
     */
    forPattern(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getPattern(request), response => targetStates.includes(response.pattern.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forTerm till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermResponse | null (null in case of 404 response)
     */
    forTerm(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getTerm(request), response => targetStates.includes(response.term.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forTermRelationship till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermRelationshipResponse | null (null in case of 404 response)
     */
    forTermRelationship(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getTermRelationship(request), response => targetStates.includes(response.termRelationship.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTypeResponse | null (null in case of 404 response)
     */
    forType(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getType(request), response => targetStates.includes(response.type.lifecycleState), targetStates.includes(models.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getWorkRequest(request), response => (response.workRequest.timeFinished ? true : false));
        });
    }
}
exports.DataCatalogWaiter = DataCatalogWaiter;
//# sourceMappingURL=datacatalog-waiter.js.map