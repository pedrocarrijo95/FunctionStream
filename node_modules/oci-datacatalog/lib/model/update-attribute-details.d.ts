/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
 * OpenAPI spec version: 20190325
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Properties used in attribute update operations.
 */
export interface UpdateAttributeDetails {
    /**
     * A user-friendly display name. Does not have to be unique, and it's changeable.
     * Avoid entering confidential information.
     *
     */
    "displayName"?: string;
    /**
     * Optional user friendly business name of the attribute. If set, this supplements the harvested display name of the object.
     */
    "businessName"?: string;
    /**
     * Detailed description of the attribute.
     */
    "description"?: string;
    /**
     * Data type of the attribute as defined in the external system.
     */
    "externalDataType"?: string;
    /**
     * Property that identifies if this attribute can be used as a watermark to extract incremental data.
     */
    "isIncrementalData"?: boolean;
    /**
     * Property that identifies if this attribute can be assigned nullable values.
     */
    "isNullable"?: boolean;
    /**
     * Max allowed length of the attribute value. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "length"?: number;
    /**
     * Position of the attribute in the record definition. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "position"?: number;
    /**
     * Precision of the attribute value usually applies to float data type. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "precision"?: number;
    /**
     * Scale of the attribute value usually applies to float data type. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "scale"?: number;
    /**
     * Last modified timestamp of this object in the external system.
     */
    "timeExternal"?: Date;
    /**
     * The minimum count for the number of instances of a given type stored in this collection type attribute,applicable if this attribute is a complex type. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "minCollectionCount"?: number;
    /**
     * The maximum count for the number of instances of a given type stored in this collection type attribute,applicable if this attribute is a complex type.
     * For type specifications in systems that specify only \"capacity\" without upper or lower bound , this property can also be used to just mean \"capacity\".
     * Some examples are Varray size in Oracle , Occurs Clause in Cobol , capacity in XmlSchemaObjectCollection , maxOccurs in  Xml , maxItems in Json
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "maxCollectionCount"?: number;
    /**
     * External entity key that represents the datatype of this attribute , applicable if this attribute is a complex type.
     */
    "externalDatatypeEntityKey"?: string;
    /**
     * External attribute key that represents the parent attribute  of this attribute , applicable if the parent attribute is of complex type.
     */
    "externalParentAttributeKey"?: string;
    /**
     * The list of customized properties along with the values for this object
     */
    "customPropertyMembers"?: Array<model.CustomPropertySetUsage>;
    /**
     * A map of maps that contains the properties which are specific to the attribute type. Each attribute type
     * definition defines it's set of required and optional properties. The map keys are category names and the
     * values are maps of property name to property value. Every property is contained inside of a category. Most
     * attributes have required properties within the \"default\" category. To determine the set of required and
     * optional properties for an Attribute type, a query can be done on '/types?type=attribute' which returns a
     * collection of all attribute types. The appropriate attribute type, which will include definitions of all
     * of it's properties, can be identified from this collection.
     * Example: `{\"properties\": { \"default\": { \"key1\": \"value1\"}}}`
     *
     */
    "properties"?: {
        [key: string]: {
            [key: string]: string;
        };
    };
}
export declare namespace UpdateAttributeDetails {
    function getJsonObj(obj: UpdateAttributeDetails): object;
}
