/**
 * Data Catalog API
 * Use the Data Catalog APIs to collect, organize, find, access, understand, enrich, and activate technical, business, and operational metadata.
 * OpenAPI spec version: 20190325
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataCatalogClient } from "./client";
export declare class DataCatalogWaiter {
    private client;
    private readonly config?;
    constructor(client: DataCatalogClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forAttribute till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAttributeResponse | null (null in case of 404 response)
     */
    forAttribute(request: serviceRequests.GetAttributeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetAttributeResponse | null>;
    /**
     * Waits forAttributeTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetAttributeTagResponse | null (null in case of 404 response)
     */
    forAttributeTag(request: serviceRequests.GetAttributeTagRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetAttributeTagResponse | null>;
    /**
     * Waits forCatalog till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCatalogResponse | null (null in case of 404 response)
     */
    forCatalog(request: serviceRequests.GetCatalogRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetCatalogResponse | null>;
    /**
     * Waits forCatalogPrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCatalogPrivateEndpointResponse | null (null in case of 404 response)
     */
    forCatalogPrivateEndpoint(request: serviceRequests.GetCatalogPrivateEndpointRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetCatalogPrivateEndpointResponse | null>;
    /**
     * Waits forConnection till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetConnectionResponse | null (null in case of 404 response)
     */
    forConnection(request: serviceRequests.GetConnectionRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetConnectionResponse | null>;
    /**
     * Waits forCustomProperty till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetCustomPropertyResponse | null (null in case of 404 response)
     */
    forCustomProperty(request: serviceRequests.GetCustomPropertyRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetCustomPropertyResponse | null>;
    /**
     * Waits forDataAsset till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataAssetResponse | null (null in case of 404 response)
     */
    forDataAsset(request: serviceRequests.GetDataAssetRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataAssetResponse | null>;
    /**
     * Waits forDataAssetTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataAssetTagResponse | null (null in case of 404 response)
     */
    forDataAssetTag(request: serviceRequests.GetDataAssetTagRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataAssetTagResponse | null>;
    /**
     * Waits forEntity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEntityResponse | null (null in case of 404 response)
     */
    forEntity(request: serviceRequests.GetEntityRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetEntityResponse | null>;
    /**
     * Waits forEntityTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetEntityTagResponse | null (null in case of 404 response)
     */
    forEntityTag(request: serviceRequests.GetEntityTagRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetEntityTagResponse | null>;
    /**
     * Waits forFolder till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFolderResponse | null (null in case of 404 response)
     */
    forFolder(request: serviceRequests.GetFolderRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetFolderResponse | null>;
    /**
     * Waits forFolderTag till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetFolderTagResponse | null (null in case of 404 response)
     */
    forFolderTag(request: serviceRequests.GetFolderTagRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetFolderTagResponse | null>;
    /**
     * Waits forGlossary till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetGlossaryResponse | null (null in case of 404 response)
     */
    forGlossary(request: serviceRequests.GetGlossaryRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetGlossaryResponse | null>;
    /**
     * Waits forJob till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobResponse
     */
    forJob(request: serviceRequests.GetJobRequest, ...targetStates: models.JobLifecycleState[]): Promise<serviceResponses.GetJobResponse>;
    /**
     * Waits forJobDefinition till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobDefinitionResponse | null (null in case of 404 response)
     */
    forJobDefinition(request: serviceRequests.GetJobDefinitionRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetJobDefinitionResponse | null>;
    /**
     * Waits forJobExecution till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetJobExecutionResponse
     */
    forJobExecution(request: serviceRequests.GetJobExecutionRequest, ...targetStates: models.JobExecutionState[]): Promise<serviceResponses.GetJobExecutionResponse>;
    /**
     * Waits forNamespace till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetNamespaceResponse | null (null in case of 404 response)
     */
    forNamespace(request: serviceRequests.GetNamespaceRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetNamespaceResponse | null>;
    /**
     * Waits forPattern till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetPatternResponse | null (null in case of 404 response)
     */
    forPattern(request: serviceRequests.GetPatternRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetPatternResponse | null>;
    /**
     * Waits forTerm till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermResponse | null (null in case of 404 response)
     */
    forTerm(request: serviceRequests.GetTermRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTermResponse | null>;
    /**
     * Waits forTermRelationship till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTermRelationshipResponse | null (null in case of 404 response)
     */
    forTermRelationship(request: serviceRequests.GetTermRelationshipRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTermRelationshipResponse | null>;
    /**
     * Waits forType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTypeResponse | null (null in case of 404 response)
     */
    forType(request: serviceRequests.GetTypeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTypeResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
