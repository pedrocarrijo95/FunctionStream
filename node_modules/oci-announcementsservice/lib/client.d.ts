/**
 * Announcements Service API
 * Manage Oracle Cloud Infrastructure console announcements.
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
export declare enum AnnouncementApiKeys {
}
export declare class AnnouncementClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Gets the details of a specific announcement.
     *
     * @param GetAnnouncementRequest
     * @return GetAnnouncementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/GetAnnouncement.ts.html |here} to see how to use GetAnnouncement API.
     */
    getAnnouncement(getAnnouncementRequest: requests.GetAnnouncementRequest): Promise<responses.GetAnnouncementResponse>;
    /**
     * Gets information about whether a specific announcement was acknowledged by a user.
     *
     * @param GetAnnouncementUserStatusRequest
     * @return GetAnnouncementUserStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/GetAnnouncementUserStatus.ts.html |here} to see how to use GetAnnouncementUserStatus API.
     */
    getAnnouncementUserStatus(getAnnouncementUserStatusRequest: requests.GetAnnouncementUserStatusRequest): Promise<responses.GetAnnouncementUserStatusResponse>;
    /**
     * Gets a list of announcements for the current tenancy.
     *
     * @param ListAnnouncementsRequest
     * @return ListAnnouncementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/ListAnnouncements.ts.html |here} to see how to use ListAnnouncements API.
     */
    listAnnouncements(listAnnouncementsRequest: requests.ListAnnouncementsRequest): Promise<responses.ListAnnouncementsResponse>;
    /**
     * Updates the status of the specified announcement with regard to whether it has been marked as read.
     *
     * @param UpdateAnnouncementUserStatusRequest
     * @return UpdateAnnouncementUserStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/UpdateAnnouncementUserStatus.ts.html |here} to see how to use UpdateAnnouncementUserStatus API.
     */
    updateAnnouncementUserStatus(updateAnnouncementUserStatusRequest: requests.UpdateAnnouncementUserStatusRequest): Promise<responses.UpdateAnnouncementUserStatusResponse>;
}
export declare enum AnnouncementsPreferencesApiKeys {
}
export declare class AnnouncementsPreferencesClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a request that specifies preferences for the tenancy regarding receiving announcements by email.
     *
     * @param CreateAnnouncementsPreferenceRequest
     * @return CreateAnnouncementsPreferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/CreateAnnouncementsPreference.ts.html |here} to see how to use CreateAnnouncementsPreference API.
     */
    createAnnouncementsPreference(createAnnouncementsPreferenceRequest: requests.CreateAnnouncementsPreferenceRequest): Promise<responses.CreateAnnouncementsPreferenceResponse>;
    /**
     * Gets the current preferences of the tenancy regarding receiving announcements by email.
     *
     * @param GetAnnouncementsPreferenceRequest
     * @return GetAnnouncementsPreferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/GetAnnouncementsPreference.ts.html |here} to see how to use GetAnnouncementsPreference API.
     */
    getAnnouncementsPreference(getAnnouncementsPreferenceRequest: requests.GetAnnouncementsPreferenceRequest): Promise<responses.GetAnnouncementsPreferenceResponse>;
    /**
     * Gets the current preferences of the tenancy regarding receiving announcements by email.
     *
     * @param ListAnnouncementsPreferencesRequest
     * @return ListAnnouncementsPreferencesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/ListAnnouncementsPreferences.ts.html |here} to see how to use ListAnnouncementsPreferences API.
     */
    listAnnouncementsPreferences(listAnnouncementsPreferencesRequest: requests.ListAnnouncementsPreferencesRequest): Promise<responses.ListAnnouncementsPreferencesResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.AnnouncementsPreferencesSummary objects
     * contained in responses from the listAnnouncementsPreferences operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAnnouncementsPreferences(request: requests.ListAnnouncementsPreferencesRequest): AsyncIterableIterator<models.AnnouncementsPreferencesSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listAnnouncementsPreferences operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllAnnouncementsPreferencesResponses(request: requests.ListAnnouncementsPreferencesRequest): AsyncIterableIterator<responses.ListAnnouncementsPreferencesResponse>;
    /**
     * Updates the preferences of the tenancy regarding receiving announcements by email.
     *
     * @param UpdateAnnouncementsPreferenceRequest
     * @return UpdateAnnouncementsPreferenceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/announcementsservice/UpdateAnnouncementsPreference.ts.html |here} to see how to use UpdateAnnouncementsPreference API.
     */
    updateAnnouncementsPreference(updateAnnouncementsPreferenceRequest: requests.UpdateAnnouncementsPreferenceRequest): Promise<responses.UpdateAnnouncementsPreferenceResponse>;
}
