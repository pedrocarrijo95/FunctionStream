"use strict";
/**
 * Scanning API
 * Use the Vulnerability Scanning Service (VSS) APIs to manage scan recipes, targets, and reports.
 * OpenAPI spec version: 20210215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityScanningClient = exports.VulnerabilityScanningApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const vulnerabilityscanning_waiter_1 = require("./vulnerabilityscanning-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var VulnerabilityScanningApiKeys;
(function (VulnerabilityScanningApiKeys) {
})(VulnerabilityScanningApiKeys = exports.VulnerabilityScanningApiKeys || (exports.VulnerabilityScanningApiKeys = {}));
class VulnerabilityScanningClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20210215";
        if (this.logger)
            this.logger.info(`VulnerabilityScanningClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(VulnerabilityScanningClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(VulnerabilityScanningClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new VulnerabilityScanningWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new vulnerabilityscanning_waiter_1.VulnerabilityScanningWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves a ContainerScanRecipe into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeContainerScanRecipeCompartmentRequest
     * @return ChangeContainerScanRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeContainerScanRecipeCompartment.ts.html |here} to see how to use ChangeContainerScanRecipeCompartment API.
     */
    changeContainerScanRecipeCompartment(changeContainerScanRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanRecipeCompartment.");
            const pathParams = {
                "{containerScanRecipeId}": changeContainerScanRecipeCompartmentRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanRecipeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanRecipeCompartmentRequest.changeContainerScanRecipeCompartmentDetails, "ChangeContainerScanRecipeCompartmentDetails", models.ChangeContainerScanRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeContainerScanRecipeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a ContainerScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeContainerScanResultCompartmentRequest
     * @return ChangeContainerScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeContainerScanResultCompartment.ts.html |here} to see how to use ChangeContainerScanResultCompartment API.
     */
    changeContainerScanResultCompartment(changeContainerScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanResultCompartment.");
            const pathParams = {
                "{containerScanResultId}": changeContainerScanResultCompartmentRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanResultCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanResultCompartmentRequest.changeContainerScanResultCompartmentDetails, "ChangeContainerScanResultCompartmentDetails", models.ChangeContainerScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeContainerScanResultCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a ContainerScanTarget into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeContainerScanTargetCompartmentRequest
     * @return ChangeContainerScanTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeContainerScanTargetCompartment.ts.html |here} to see how to use ChangeContainerScanTargetCompartment API.
     */
    changeContainerScanTargetCompartment(changeContainerScanTargetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeContainerScanTargetCompartment.");
            const pathParams = {
                "{containerScanTargetId}": changeContainerScanTargetCompartmentRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeContainerScanTargetCompartmentRequest.ifMatch,
                "opc-request-id": changeContainerScanTargetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeContainerScanTargetCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeContainerScanTargetCompartmentRequest.changeContainerScanTargetCompartmentDetails, "ChangeContainerScanTargetCompartmentDetails", models.ChangeContainerScanTargetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeContainerScanTargetCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostAgentScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostAgentScanResultCompartmentRequest
     * @return ChangeHostAgentScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostAgentScanResultCompartment.ts.html |here} to see how to use ChangeHostAgentScanResultCompartment API.
     */
    changeHostAgentScanResultCompartment(changeHostAgentScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostAgentScanResultCompartment.");
            const pathParams = {
                "{hostAgentScanResultId}": changeHostAgentScanResultCompartmentRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostAgentScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostAgentScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostAgentScanResultCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostAgentScanResultCompartmentRequest.changeHostAgentScanResultCompartmentDetails, "ChangeHostAgentScanResultCompartmentDetails", models.ChangeHostAgentScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostAgentScanResultCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostCisBenchmarkScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostCisBenchmarkScanResultCompartmentRequest
     * @return ChangeHostCisBenchmarkScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostCisBenchmarkScanResultCompartment.ts.html |here} to see how to use ChangeHostCisBenchmarkScanResultCompartment API.
     */
    changeHostCisBenchmarkScanResultCompartment(changeHostCisBenchmarkScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostCisBenchmarkScanResultCompartment.");
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": changeHostCisBenchmarkScanResultCompartmentRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostCisBenchmarkScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostCisBenchmarkScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostCisBenchmarkScanResultCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostCisBenchmarkScanResultCompartmentRequest.changeHostCisBenchmarkScanResultCompartmentDetails, "ChangeHostCisBenchmarkScanResultCompartmentDetails", models.ChangeHostCisBenchmarkScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostCisBenchmarkScanResultCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostEndpointProtectionScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostEndpointProtectionScanResultCompartmentRequest
     * @return ChangeHostEndpointProtectionScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostEndpointProtectionScanResultCompartment.ts.html |here} to see how to use ChangeHostEndpointProtectionScanResultCompartment API.
     */
    changeHostEndpointProtectionScanResultCompartment(changeHostEndpointProtectionScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostEndpointProtectionScanResultCompartment.");
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": changeHostEndpointProtectionScanResultCompartmentRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostEndpointProtectionScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostEndpointProtectionScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostEndpointProtectionScanResultCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostEndpointProtectionScanResultCompartmentRequest.changeHostEndpointProtectionScanResultCompartmentDetails, "ChangeHostEndpointProtectionScanResultCompartmentDetails", models.ChangeHostEndpointProtectionScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostEndpointProtectionScanResultCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostPortScanResult into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostPortScanResultCompartmentRequest
     * @return ChangeHostPortScanResultCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostPortScanResultCompartment.ts.html |here} to see how to use ChangeHostPortScanResultCompartment API.
     */
    changeHostPortScanResultCompartment(changeHostPortScanResultCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostPortScanResultCompartment.");
            const pathParams = {
                "{hostPortScanResultId}": changeHostPortScanResultCompartmentRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostPortScanResultCompartmentRequest.ifMatch,
                "opc-request-id": changeHostPortScanResultCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostPortScanResultCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostPortScanResultCompartmentRequest.changeHostPortScanResultCompartmentDetails, "ChangeHostPortScanResultCompartmentDetails", models.ChangeHostPortScanResultCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostPortScanResultCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostScanRecipe into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostScanRecipeCompartmentRequest
     * @return ChangeHostScanRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostScanRecipeCompartment.ts.html |here} to see how to use ChangeHostScanRecipeCompartment API.
     */
    changeHostScanRecipeCompartment(changeHostScanRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostScanRecipeCompartment.");
            const pathParams = {
                "{hostScanRecipeId}": changeHostScanRecipeCompartmentRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostScanRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeHostScanRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostScanRecipeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostScanRecipeCompartmentRequest.changeHostScanRecipeCompartmentDetails, "ChangeHostScanRecipeCompartmentDetails", models.ChangeHostScanRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostScanRecipeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a HostScanTarget into a different compartment. When provided, If-Match is checked against ETag values of the resource.
     *
     * @param ChangeHostScanTargetCompartmentRequest
     * @return ChangeHostScanTargetCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ChangeHostScanTargetCompartment.ts.html |here} to see how to use ChangeHostScanTargetCompartment API.
     */
    changeHostScanTargetCompartment(changeHostScanTargetCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#changeHostScanTargetCompartment.");
            const pathParams = {
                "{hostScanTargetId}": changeHostScanTargetCompartmentRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHostScanTargetCompartmentRequest.ifMatch,
                "opc-request-id": changeHostScanTargetCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHostScanTargetCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHostScanTargetCompartmentRequest.changeHostScanTargetCompartmentDetails, "ChangeHostScanTargetCompartmentDetails", models.ChangeHostScanTargetCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHostScanTargetCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new ContainerScanRecipe
     *
     * @param CreateContainerScanRecipeRequest
     * @return CreateContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/CreateContainerScanRecipe.ts.html |here} to see how to use CreateContainerScanRecipe API.
     */
    createContainerScanRecipe(createContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createContainerScanRecipe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createContainerScanRecipeRequest.opcRetryToken,
                "opc-request-id": createContainerScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createContainerScanRecipeRequest.createContainerScanRecipeDetails, "CreateContainerScanRecipeDetails", models.CreateContainerScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createContainerScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipe",
                    bodyModel: "model.ContainerScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new ContainerScanTarget
     *
     * @param CreateContainerScanTargetRequest
     * @return CreateContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/CreateContainerScanTarget.ts.html |here} to see how to use CreateContainerScanTarget API.
     */
    createContainerScanTarget(createContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createContainerScanTarget.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createContainerScanTargetRequest.opcRetryToken,
                "opc-request-id": createContainerScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createContainerScanTargetRequest.createContainerScanTargetDetails, "CreateContainerScanTargetDetails", models.CreateContainerScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createContainerScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTarget",
                    bodyModel: "model.ContainerScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new HostScanRecipe. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * @param CreateHostScanRecipeRequest
     * @return CreateHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/CreateHostScanRecipe.ts.html |here} to see how to use CreateHostScanRecipe API.
     */
    createHostScanRecipe(createHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createHostScanRecipe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostScanRecipeRequest.opcRetryToken,
                "opc-request-id": createHostScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostScanRecipeRequest.createHostScanRecipeDetails, "CreateHostScanRecipeDetails", models.CreateHostScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createHostScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipe",
                    bodyModel: "model.HostScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new HostScanTarget. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * @param CreateHostScanTargetRequest
     * @return CreateHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/CreateHostScanTarget.ts.html |here} to see how to use CreateHostScanTarget API.
     */
    createHostScanTarget(createHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#createHostScanTarget.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createHostScanTargetRequest.opcRetryToken,
                "opc-request-id": createHostScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHostScanTargetRequest.createHostScanTargetDetails, "CreateHostScanTargetDetails", models.CreateHostScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createHostScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTarget",
                    bodyModel: "model.HostScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanRecipe identified by the id
     *
     * @param DeleteContainerScanRecipeRequest
     * @return DeleteContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteContainerScanRecipe.ts.html |here} to see how to use DeleteContainerScanRecipe API.
     */
    deleteContainerScanRecipe(deleteContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanRecipe.");
            const pathParams = {
                "{containerScanRecipeId}": deleteContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanRecipeRequest.ifMatch,
                "opc-request-id": deleteContainerScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteContainerScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanResult identified by the id
     *
     * @param DeleteContainerScanResultRequest
     * @return DeleteContainerScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteContainerScanResult.ts.html |here} to see how to use DeleteContainerScanResult API.
     */
    deleteContainerScanResult(deleteContainerScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanResult.");
            const pathParams = {
                "{containerScanResultId}": deleteContainerScanResultRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanResultRequest.ifMatch,
                "opc-request-id": deleteContainerScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteContainerScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ContainerScanTarget identified by the id
     *
     * @param DeleteContainerScanTargetRequest
     * @return DeleteContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteContainerScanTarget.ts.html |here} to see how to use DeleteContainerScanTarget API.
     */
    deleteContainerScanTarget(deleteContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteContainerScanTarget.");
            const pathParams = {
                "{containerScanTargetId}": deleteContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteContainerScanTargetRequest.ifMatch,
                "opc-request-id": deleteContainerScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteContainerScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the HostAgentScanResult identified by the host agent scan ID.
     *
     * @param DeleteHostAgentScanResultRequest
     * @return DeleteHostAgentScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostAgentScanResult.ts.html |here} to see how to use DeleteHostAgentScanResult API.
     */
    deleteHostAgentScanResult(deleteHostAgentScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostAgentScanResult.");
            const pathParams = {
                "{hostAgentScanResultId}": deleteHostAgentScanResultRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostAgentScanResultRequest.ifMatch,
                "opc-request-id": deleteHostAgentScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostAgentScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostCisBenchmarkScanResult identified by the id
     *
     * @param DeleteHostCisBenchmarkScanResultRequest
     * @return DeleteHostCisBenchmarkScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostCisBenchmarkScanResult.ts.html |here} to see how to use DeleteHostCisBenchmarkScanResult API.
     */
    deleteHostCisBenchmarkScanResult(deleteHostCisBenchmarkScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostCisBenchmarkScanResult.");
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": deleteHostCisBenchmarkScanResultRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostCisBenchmarkScanResultRequest.ifMatch,
                "opc-request-id": deleteHostCisBenchmarkScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostCisBenchmarkScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HostEndpointProtectionScanResult identified by the id
     *
     * @param DeleteHostEndpointProtectionScanResultRequest
     * @return DeleteHostEndpointProtectionScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostEndpointProtectionScanResult.ts.html |here} to see how to use DeleteHostEndpointProtectionScanResult API.
     */
    deleteHostEndpointProtectionScanResult(deleteHostEndpointProtectionScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostEndpointProtectionScanResult.");
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": deleteHostEndpointProtectionScanResultRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostEndpointProtectionScanResultRequest.ifMatch,
                "opc-request-id": deleteHostEndpointProtectionScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostEndpointProtectionScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the HostPortScanResult identified by the host port scan ID.
     *
     * @param DeleteHostPortScanResultRequest
     * @return DeleteHostPortScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostPortScanResult.ts.html |here} to see how to use DeleteHostPortScanResult API.
     */
    deleteHostPortScanResult(deleteHostPortScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostPortScanResult.");
            const pathParams = {
                "{hostPortScanResultId}": deleteHostPortScanResultRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostPortScanResultRequest.ifMatch,
                "opc-request-id": deleteHostPortScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostPortScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the HostScanRecipe identified by the recipe ID.
     *
     * @param DeleteHostScanRecipeRequest
     * @return DeleteHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostScanRecipe.ts.html |here} to see how to use DeleteHostScanRecipe API.
     */
    deleteHostScanRecipe(deleteHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostScanRecipe.");
            const pathParams = {
                "{hostScanRecipeId}": deleteHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostScanRecipeRequest.ifMatch,
                "opc-request-id": deleteHostScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes the HostScanTarget identified by the target ID.
     *
     * @param DeleteHostScanTargetRequest
     * @return DeleteHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/DeleteHostScanTarget.ts.html |here} to see how to use DeleteHostScanTarget API.
     */
    deleteHostScanTarget(deleteHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#deleteHostScanTarget.");
            const pathParams = {
                "{hostScanTargetId}": deleteHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteHostScanTargetRequest.ifMatch,
                "opc-request-id": deleteHostScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHostScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports a list of HostAgentScanResultSummary objects within a compartment and during a specified time range in CSV format. You can filter the results by problem severity.
     *
     * @param ExportHostAgentScanResultCsvRequest
     * @return ExportHostAgentScanResultCsvResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ExportHostAgentScanResultCsv.ts.html |here} to see how to use ExportHostAgentScanResultCsv API.
     */
    exportHostAgentScanResultCsv(exportHostAgentScanResultCsvRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#exportHostAgentScanResultCsv.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportHostAgentScanResultCsvRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/actions/exportCsv",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportHostAgentScanResultCsvRequest.exportHostAgentScanResultCsvDetails, "ExportHostAgentScanResultCsvDetails", models.ExportHostAgentScanResultCsvDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, exportHostAgentScanResultCsvRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports a list of HostVulnerabilitySummary objects in a compartment in CSV format.
     *
     * @param ExportHostVulnerabilityCsvRequest
     * @return ExportHostVulnerabilityCsvResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ExportHostVulnerabilityCsv.ts.html |here} to see how to use ExportHostVulnerabilityCsv API.
     */
    exportHostVulnerabilityCsv(exportHostVulnerabilityCsvRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#exportHostVulnerabilityCsv.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportHostVulnerabilityCsvRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/actions/exportCsv",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportHostVulnerabilityCsvRequest.exportHostVulnerabilityCsvDetails, "ExportHostVulnerabilityCsvDetails", models.ExportHostVulnerabilityCsvDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, exportHostVulnerabilityCsvRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a ContainerScanRecipe by identifier
     *
     * @param GetContainerScanRecipeRequest
     * @return GetContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetContainerScanRecipe.ts.html |here} to see how to use GetContainerScanRecipe API.
     */
    getContainerScanRecipe(getContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanRecipe.");
            const pathParams = {
                "{containerScanRecipeId}": getContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getContainerScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipe",
                    bodyModel: "model.ContainerScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a ContainerScanResult of the given container scan ID.
     *
     * @param GetContainerScanResultRequest
     * @return GetContainerScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetContainerScanResult.ts.html |here} to see how to use GetContainerScanResult API.
     */
    getContainerScanResult(getContainerScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanResult.");
            const pathParams = {
                "{containerScanResultId}": getContainerScanResultRequest.containerScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults/{containerScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getContainerScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanResult",
                    bodyModel: "model.ContainerScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a ContainerScanTarget by identifier
     *
     * @param GetContainerScanTargetRequest
     * @return GetContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetContainerScanTarget.ts.html |here} to see how to use GetContainerScanTarget API.
     */
    getContainerScanTarget(getContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getContainerScanTarget.");
            const pathParams = {
                "{containerScanTargetId}": getContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getContainerScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getContainerScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTarget",
                    bodyModel: "model.ContainerScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostAgentScanResult identified by the host agent scan ID. The result includes a list of problems detected in a specific compute instance.
     *
     * @param GetHostAgentScanResultRequest
     * @return GetHostAgentScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostAgentScanResult.ts.html |here} to see how to use GetHostAgentScanResult API.
     */
    getHostAgentScanResult(getHostAgentScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostAgentScanResult.");
            const pathParams = {
                "{hostAgentScanResultId}": getHostAgentScanResultRequest.hostAgentScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostAgentScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults/{hostAgentScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostAgentScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostAgentScanResult",
                    bodyModel: "model.HostAgentScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns HostCisBenchmarkScanResults for the given host CIS (Center for Internet Security) benchmark scan result ID.
     *
     * @param GetHostCisBenchmarkScanResultRequest
     * @return GetHostCisBenchmarkScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostCisBenchmarkScanResult.ts.html |here} to see how to use GetHostCisBenchmarkScanResult API.
     */
    getHostCisBenchmarkScanResult(getHostCisBenchmarkScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostCisBenchmarkScanResult.");
            const pathParams = {
                "{hostCisBenchmarkScanResultId}": getHostCisBenchmarkScanResultRequest.hostCisBenchmarkScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostCisBenchmarkScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults/{hostCisBenchmarkScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostCisBenchmarkScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostCisBenchmarkScanResult",
                    bodyModel: "model.HostCisBenchmarkScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns HostEndpointProtectionScanResults for the given host endpoint protection scan result ID.
     *
     * @param GetHostEndpointProtectionScanResultRequest
     * @return GetHostEndpointProtectionScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostEndpointProtectionScanResult.ts.html |here} to see how to use GetHostEndpointProtectionScanResult API.
     */
    getHostEndpointProtectionScanResult(getHostEndpointProtectionScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostEndpointProtectionScanResult.");
            const pathParams = {
                "{hostEndpointProtectionScanResultId}": getHostEndpointProtectionScanResultRequest.hostEndpointProtectionScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostEndpointProtectionScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults/{hostEndpointProtectionScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostEndpointProtectionScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostEndpointProtectionScanResult",
                    bodyModel: "model.HostEndpointProtectionScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostPortScanResult identified by the host port scan ID. The result includes a list of open ports that were detected in a specific compute instance.
     *
     * @param GetHostPortScanResultRequest
     * @return GetHostPortScanResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostPortScanResult.ts.html |here} to see how to use GetHostPortScanResult API.
     */
    getHostPortScanResult(getHostPortScanResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostPortScanResult.");
            const pathParams = {
                "{hostPortScanResultId}": getHostPortScanResultRequest.hostPortScanResultId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostPortScanResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults/{hostPortScanResultId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostPortScanResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostPortScanResult",
                    bodyModel: "model.HostPortScanResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * @param GetHostScanRecipeRequest
     * @return GetHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostScanRecipe.ts.html |here} to see how to use GetHostScanRecipe API.
     */
    getHostScanRecipe(getHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostScanRecipe.");
            const pathParams = {
                "{hostScanRecipeId}": getHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipe",
                    bodyModel: "model.HostScanRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostScanTarget identified by the target ID. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * @param GetHostScanTargetRequest
     * @return GetHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostScanTarget.ts.html |here} to see how to use GetHostScanTarget API.
     */
    getHostScanTarget(getHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostScanTarget.");
            const pathParams = {
                "{hostScanTargetId}": getHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTarget",
                    bodyModel: "model.HostScanTarget",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a HostVulnerability identified by the host vulnerability ID. A host vulnerability describes a security issue that was detected in scans of one or more compute instances. Common Vulnerabilities and Exposures (CVE) numbers identify security vulnerabilities for operating systems and other software, including Critical Patch Updates and Security Alert advisories.
     *
     * @param GetHostVulnerabilityRequest
     * @return GetHostVulnerabilityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetHostVulnerability.ts.html |here} to see how to use GetHostVulnerability API.
     */
    getHostVulnerability(getHostVulnerabilityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getHostVulnerability.");
            const pathParams = {
                "{hostVulnerabilityId}": getHostVulnerabilityRequest.hostVulnerabilityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHostVulnerabilityRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/{hostVulnerabilityId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHostVulnerabilityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerability",
                    bodyModel: "model.HostVulnerability",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     *
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#getWorkRequest.");
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of ContainerScanRecipeSummaries
     *
     * @param ListContainerScanRecipesRequest
     * @return ListContainerScanRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListContainerScanRecipes.ts.html |here} to see how to use ListContainerScanRecipes API.
     */
    listContainerScanRecipes(listContainerScanRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanRecipes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanRecipesRequest.compartmentId,
                "lifecycleState": listContainerScanRecipesRequest.lifecycleState,
                "displayName": listContainerScanRecipesRequest.displayName,
                "limit": listContainerScanRecipesRequest.limit,
                "page": listContainerScanRecipesRequest.page,
                "sortOrder": listContainerScanRecipesRequest.sortOrder,
                "sortBy": listContainerScanRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listContainerScanRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanRecipeSummaryCollection",
                    bodyModel: "model.ContainerScanRecipeSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a collection of ContainerScanResultSummary objects
     *
     * @param ListContainerScanResultsRequest
     * @return ListContainerScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListContainerScanResults.ts.html |here} to see how to use ListContainerScanResults API.
     */
    listContainerScanResults(listContainerScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanResults.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanResultsRequest.compartmentId,
                "repository": listContainerScanResultsRequest.repository,
                "image": listContainerScanResultsRequest.image,
                "areSubcompartmentsIncluded": listContainerScanResultsRequest.areSubcompartmentsIncluded,
                "highestProblemSeverity": listContainerScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listContainerScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listContainerScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listContainerScanResultsRequest.sortOrder,
                "sortBy": listContainerScanResultsRequest.sortBy,
                "limit": listContainerScanResultsRequest.limit,
                "page": listContainerScanResultsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanResultsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listContainerScanResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanResultSummaryCollection",
                    bodyModel: "model.ContainerScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of ContainerScanTargetSummaries
     *
     * @param ListContainerScanTargetsRequest
     * @return ListContainerScanTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListContainerScanTargets.ts.html |here} to see how to use ListContainerScanTargets API.
     */
    listContainerScanTargets(listContainerScanTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listContainerScanTargets.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listContainerScanTargetsRequest.compartmentId,
                "lifecycleState": listContainerScanTargetsRequest.lifecycleState,
                "displayName": listContainerScanTargetsRequest.displayName,
                "limit": listContainerScanTargetsRequest.limit,
                "page": listContainerScanTargetsRequest.page,
                "sortOrder": listContainerScanTargetsRequest.sortOrder,
                "sortBy": listContainerScanTargetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listContainerScanTargetsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listContainerScanTargetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "containerScanTargetSummaryCollection",
                    bodyModel: "model.ContainerScanTargetSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostAgentScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. An agent scan result includes a list of problems detected in a specific compute instance.
     *
     * @param ListHostAgentScanResultsRequest
     * @return ListHostAgentScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostAgentScanResults.ts.html |here} to see how to use ListHostAgentScanResults API.
     */
    listHostAgentScanResults(listHostAgentScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostAgentScanResults.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostAgentScanResultsRequest.compartmentId,
                "instanceId": listHostAgentScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostAgentScanResultsRequest.highestProblemSeverity,
                "operatingSystem": listHostAgentScanResultsRequest.operatingSystem,
                "timeStartedGreaterThanOrEqualTo": listHostAgentScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostAgentScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostAgentScanResultsRequest.sortOrder,
                "sortBy": listHostAgentScanResultsRequest.sortBy,
                "limit": listHostAgentScanResultsRequest.limit,
                "page": listHostAgentScanResultsRequest.page,
                "displayName": listHostAgentScanResultsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostAgentScanResultsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostAgentScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostAgentScanResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostAgentScanResultSummaryCollection",
                    bodyModel: "model.HostAgentScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a collection of HostCisBenchmarkScanResultSummary objects
     *
     * @param ListHostCisBenchmarkScanResultsRequest
     * @return ListHostCisBenchmarkScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostCisBenchmarkScanResults.ts.html |here} to see how to use ListHostCisBenchmarkScanResults API.
     */
    listHostCisBenchmarkScanResults(listHostCisBenchmarkScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostCisBenchmarkScanResults.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostCisBenchmarkScanResultsRequest.compartmentId,
                "instanceId": listHostCisBenchmarkScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostCisBenchmarkScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostCisBenchmarkScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostCisBenchmarkScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostCisBenchmarkScanResultsRequest.sortOrder,
                "sortBy": listHostCisBenchmarkScanResultsRequest.sortBy,
                "limit": listHostCisBenchmarkScanResultsRequest.limit,
                "page": listHostCisBenchmarkScanResultsRequest.page,
                "displayName": listHostCisBenchmarkScanResultsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostCisBenchmarkScanResultsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostCisBenchmarkScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostCisBenchmarkScanResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostCisBenchmarkScanResultSummaryCollection",
                    bodyModel: "model.HostCisBenchmarkScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a collection of HostEndpointProtectionScanResultSummary objects
     *
     * @param ListHostEndpointProtectionScanResultsRequest
     * @return ListHostEndpointProtectionScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostEndpointProtectionScanResults.ts.html |here} to see how to use ListHostEndpointProtectionScanResults API.
     */
    listHostEndpointProtectionScanResults(listHostEndpointProtectionScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostEndpointProtectionScanResults.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostEndpointProtectionScanResultsRequest.compartmentId,
                "instanceId": listHostEndpointProtectionScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostEndpointProtectionScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostEndpointProtectionScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostEndpointProtectionScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostEndpointProtectionScanResultsRequest.sortOrder,
                "sortBy": listHostEndpointProtectionScanResultsRequest.sortBy,
                "limit": listHostEndpointProtectionScanResultsRequest.limit,
                "page": listHostEndpointProtectionScanResultsRequest.page,
                "displayName": listHostEndpointProtectionScanResultsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostEndpointProtectionScanResultsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostEndpointProtectionScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostEndpointProtectionScanResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostEndpointProtectionScanResultSummaryCollection",
                    bodyModel: "model.HostEndpointProtectionScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostPortScanResultSummary objects in a compartment. You can filter and sort the results by problem severity and time. A port scan result includes a list of open ports that were detected in a specific compute instance.
     *
     * @param ListHostPortScanResultsRequest
     * @return ListHostPortScanResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostPortScanResults.ts.html |here} to see how to use ListHostPortScanResults API.
     */
    listHostPortScanResults(listHostPortScanResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostPortScanResults.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostPortScanResultsRequest.compartmentId,
                "instanceId": listHostPortScanResultsRequest.instanceId,
                "highestProblemSeverity": listHostPortScanResultsRequest.highestProblemSeverity,
                "timeStartedGreaterThanOrEqualTo": listHostPortScanResultsRequest.timeStartedGreaterThanOrEqualTo,
                "timeStartedLessThanOrEqualTo": listHostPortScanResultsRequest.timeStartedLessThanOrEqualTo,
                "sortOrder": listHostPortScanResultsRequest.sortOrder,
                "sortBy": listHostPortScanResultsRequest.sortBy,
                "limit": listHostPortScanResultsRequest.limit,
                "page": listHostPortScanResultsRequest.page,
                "displayName": listHostPortScanResultsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostPortScanResultsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostPortScanResults",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostPortScanResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostPortScanResultSummaryCollection",
                    bodyModel: "model.HostPortScanResultSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostScanRecipeSummary objects in a compartment. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * @param ListHostScanRecipesRequest
     * @return ListHostScanRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostScanRecipes.ts.html |here} to see how to use ListHostScanRecipes API.
     */
    listHostScanRecipes(listHostScanRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostScanRecipes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostScanRecipesRequest.compartmentId,
                "lifecycleState": listHostScanRecipesRequest.lifecycleState,
                "displayName": listHostScanRecipesRequest.displayName,
                "limit": listHostScanRecipesRequest.limit,
                "page": listHostScanRecipesRequest.page,
                "sortOrder": listHostScanRecipesRequest.sortOrder,
                "sortBy": listHostScanRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostScanRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostScanRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanRecipeSummaryCollection",
                    bodyModel: "model.HostScanRecipeSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostScanTargetSummary objects in a compartment. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * @param ListHostScanTargetsRequest
     * @return ListHostScanTargetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostScanTargets.ts.html |here} to see how to use ListHostScanTargets API.
     */
    listHostScanTargets(listHostScanTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostScanTargets.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostScanTargetsRequest.compartmentId,
                "lifecycleState": listHostScanTargetsRequest.lifecycleState,
                "displayName": listHostScanTargetsRequest.displayName,
                "limit": listHostScanTargetsRequest.limit,
                "page": listHostScanTargetsRequest.page,
                "sortOrder": listHostScanTargetsRequest.sortOrder,
                "sortBy": listHostScanTargetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostScanTargetsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostScanTargetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostScanTargetSummaryCollection",
                    bodyModel: "model.HostScanTargetSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostVulnerabilitySummary objects in a compartment. You can filter and sort the vulnerabilities by problem severity and time. A host vulnerability describes a security issue that was detected in scans of one or more compute instances.
     *
     * @param ListHostVulnerabilitiesRequest
     * @return ListHostVulnerabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostVulnerabilities.ts.html |here} to see how to use ListHostVulnerabilities API.
     */
    listHostVulnerabilities(listHostVulnerabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostVulnerabilities.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listHostVulnerabilitiesRequest.compartmentId,
                "limit": listHostVulnerabilitiesRequest.limit,
                "page": listHostVulnerabilitiesRequest.page,
                "severity": listHostVulnerabilitiesRequest.severity,
                "name": listHostVulnerabilitiesRequest.name,
                "cveReference": listHostVulnerabilitiesRequest.cveReference,
                "vulnerabilityType": listHostVulnerabilitiesRequest.vulnerabilityType,
                "sortOrder": listHostVulnerabilitiesRequest.sortOrder,
                "sortBy": listHostVulnerabilitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostVulnerabilitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostVulnerabilitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerabilitySummaryCollection",
                    bodyModel: "model.HostVulnerabilitySummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieves a list of HostVulnerabilityImpactedHostSummary objects for a specific host vulnerability ID. An impacted host summary identifies a compute instance on which the specified vulnerability was detected.
     *
     * @param ListHostVulnerabilityImpactedHostsRequest
     * @return ListHostVulnerabilityImpactedHostsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListHostVulnerabilityImpactedHosts.ts.html |here} to see how to use ListHostVulnerabilityImpactedHosts API.
     */
    listHostVulnerabilityImpactedHosts(listHostVulnerabilityImpactedHostsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listHostVulnerabilityImpactedHosts.");
            const pathParams = {
                "{hostVulnerabilityId}": listHostVulnerabilityImpactedHostsRequest.hostVulnerabilityId
            };
            const queryParams = {
                "sortOrder": listHostVulnerabilityImpactedHostsRequest.sortOrder,
                "sortBy": listHostVulnerabilityImpactedHostsRequest.sortBy,
                "limit": listHostVulnerabilityImpactedHostsRequest.limit,
                "page": listHostVulnerabilityImpactedHostsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHostVulnerabilityImpactedHostsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostVulnerabilities/{hostVulnerabilityId}/impactedHosts",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHostVulnerabilityImpactedHostsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "hostVulnerabilityImpactedHostSummaryCollection",
                    bodyModel: "model.HostVulnerabilityImpactedHostSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequestErrors.");
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequestLogs.");
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestLogsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#listWorkRequests.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the ContainerScanRecipe identified by the id
     *
     * @param UpdateContainerScanRecipeRequest
     * @return UpdateContainerScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/UpdateContainerScanRecipe.ts.html |here} to see how to use UpdateContainerScanRecipe API.
     */
    updateContainerScanRecipe(updateContainerScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateContainerScanRecipe.");
            const pathParams = {
                "{containerScanRecipeId}": updateContainerScanRecipeRequest.containerScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateContainerScanRecipeRequest.ifMatch,
                "opc-request-id": updateContainerScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanRecipes/{containerScanRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateContainerScanRecipeRequest.updateContainerScanRecipeDetails, "UpdateContainerScanRecipeDetails", models.UpdateContainerScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateContainerScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the ContainerScanTarget identified by the id
     *
     * @param UpdateContainerScanTargetRequest
     * @return UpdateContainerScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/UpdateContainerScanTarget.ts.html |here} to see how to use UpdateContainerScanTarget API.
     */
    updateContainerScanTarget(updateContainerScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateContainerScanTarget.");
            const pathParams = {
                "{containerScanTargetId}": updateContainerScanTargetRequest.containerScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateContainerScanTargetRequest.ifMatch,
                "opc-request-id": updateContainerScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/containerScanTargets/{containerScanTargetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateContainerScanTargetRequest.updateContainerScanTargetDetails, "UpdateContainerScanTargetDetails", models.UpdateContainerScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateContainerScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the HostScanRecipe identified by the recipe ID. A recipe determines the types of security issues that you want scanned, and how often to scan.
     *
     * @param UpdateHostScanRecipeRequest
     * @return UpdateHostScanRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/UpdateHostScanRecipe.ts.html |here} to see how to use UpdateHostScanRecipe API.
     */
    updateHostScanRecipe(updateHostScanRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateHostScanRecipe.");
            const pathParams = {
                "{hostScanRecipeId}": updateHostScanRecipeRequest.hostScanRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostScanRecipeRequest.ifMatch,
                "opc-request-id": updateHostScanRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanRecipes/{hostScanRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostScanRecipeRequest.updateHostScanRecipeDetails, "UpdateHostScanRecipeDetails", models.UpdateHostScanRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateHostScanRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the HostScanTarget identified by the target ID. A host scan target is a collection of compute instances that you want routinely scanned for security vulnerabilities.
     *
     * @param UpdateHostScanTargetRequest
     * @return UpdateHostScanTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/vulnerabilityscanning/UpdateHostScanTarget.ts.html |here} to see how to use UpdateHostScanTarget API.
     */
    updateHostScanTarget(updateHostScanTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation VulnerabilityScanningClient#updateHostScanTarget.");
            const pathParams = {
                "{hostScanTargetId}": updateHostScanTargetRequest.hostScanTargetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateHostScanTargetRequest.ifMatch,
                "opc-request-id": updateHostScanTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/hostScanTargets/{hostScanTargetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHostScanTargetRequest.updateHostScanTargetDetails, "UpdateHostScanTargetDetails", models.UpdateHostScanTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateHostScanTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.VulnerabilityScanningClient = VulnerabilityScanningClient;
VulnerabilityScanningClient.serviceEndpointTemplate = "https://vss-cp-api.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map