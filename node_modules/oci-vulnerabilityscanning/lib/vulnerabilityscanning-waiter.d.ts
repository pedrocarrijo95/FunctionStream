/**
 * Scanning API
 * Use the Vulnerability Scanning Service (VSS) APIs to manage scan recipes, targets, and reports.
 * OpenAPI spec version: 20210215
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { VulnerabilityScanningClient } from "./client";
export declare class VulnerabilityScanningWaiter {
    private client;
    private readonly config?;
    constructor(client: VulnerabilityScanningClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forContainerScanRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetContainerScanRecipeResponse | null (null in case of 404 response)
     */
    forContainerScanRecipe(request: serviceRequests.GetContainerScanRecipeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetContainerScanRecipeResponse | null>;
    /**
     * Waits forContainerScanTarget till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetContainerScanTargetResponse | null (null in case of 404 response)
     */
    forContainerScanTarget(request: serviceRequests.GetContainerScanTargetRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetContainerScanTargetResponse | null>;
    /**
     * Waits forHostAgentScanResult till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostAgentScanResultResponse | null (null in case of 404 response)
     */
    forHostAgentScanResult(request: serviceRequests.GetHostAgentScanResultRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostAgentScanResultResponse | null>;
    /**
     * Waits forHostCisBenchmarkScanResult till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostCisBenchmarkScanResultResponse | null (null in case of 404 response)
     */
    forHostCisBenchmarkScanResult(request: serviceRequests.GetHostCisBenchmarkScanResultRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostCisBenchmarkScanResultResponse | null>;
    /**
     * Waits forHostEndpointProtectionScanResult till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostEndpointProtectionScanResultResponse | null (null in case of 404 response)
     */
    forHostEndpointProtectionScanResult(request: serviceRequests.GetHostEndpointProtectionScanResultRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostEndpointProtectionScanResultResponse | null>;
    /**
     * Waits forHostPortScanResult till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostPortScanResultResponse | null (null in case of 404 response)
     */
    forHostPortScanResult(request: serviceRequests.GetHostPortScanResultRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostPortScanResultResponse | null>;
    /**
     * Waits forHostScanRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostScanRecipeResponse | null (null in case of 404 response)
     */
    forHostScanRecipe(request: serviceRequests.GetHostScanRecipeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostScanRecipeResponse | null>;
    /**
     * Waits forHostScanTarget till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostScanTargetResponse | null (null in case of 404 response)
     */
    forHostScanTarget(request: serviceRequests.GetHostScanTargetRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostScanTargetResponse | null>;
    /**
     * Waits forHostVulnerability till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetHostVulnerabilityResponse | null (null in case of 404 response)
     */
    forHostVulnerability(request: serviceRequests.GetHostVulnerabilityRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetHostVulnerabilityResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
