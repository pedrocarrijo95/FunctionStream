"use strict";
/**
 * Copyright (c) 2020, 2021 Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Region = void 0;
const realm_1 = require("./realm");
const config_file_reader_1 = require("./config-file-reader");
const fs_1 = require("fs");
const region_metadata_schema_1 = require("./region-metadata-schema");
const http_1 = require("./http");
class Region {
    constructor(regionId, realm, regionCode) {
        this._realm = realm;
        this._regionId = regionId;
        Region.KNOWN_REGIONS.set(regionId, this);
        if (regionCode)
            Region.REGIONS_SHORT_NAMES[regionCode] = regionId;
    }
    get realm() {
        return this._realm;
    }
    get regionId() {
        return this._regionId;
    }
    static fromRegionId(regionId) {
        /*
         * load provided region from already registered regions if it exists
         * else load provided region from region configuration file if it exists
         * else load provided region from region metadeta environment variable
         * else if instance metadeta service (IMDS) has been opted in, try loading region from IMDS
         */
        if (!regionId)
            throw Error("RegionId can not be empty or undefined");
        regionId = regionId.trim().toLocaleLowerCase("en-US");
        let foundRegion = Region.KNOWN_REGIONS.get(regionId);
        if (!foundRegion) {
            Region.addRegionsFromConfigFile();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        if (!foundRegion) {
            Region.addRegionFromEnvVar();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        if (!foundRegion && Region.hasCalledForImds) {
            Region.addRegionFromImds();
            foundRegion = Region.KNOWN_REGIONS.get(regionId);
        }
        return foundRegion;
    }
    // Adds regions from the config file
    static addRegionsFromConfigFile() {
        if (!Region.hasUsedConfigFile) {
            Region.hasUsedConfigFile = true;
            let expandedRegionConfigFilePath = config_file_reader_1.ConfigFileReader.expandUserHome(Region.REGIONS_CONFIG_FILE_PATH);
            if (config_file_reader_1.ConfigFileReader.fileExists(expandedRegionConfigFilePath)) {
                try {
                    const fileContent = fs_1.readFileSync(expandedRegionConfigFilePath, "utf8");
                    const regionMetadata = JSON.parse(fileContent);
                    if (regionMetadata && regionMetadata.length > 0 && Array.isArray(regionMetadata)) {
                        regionMetadata.map(metadata => {
                            if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(metadata)) {
                                Region.register(metadata.regionIdentifier, realm_1.Realm.register(metadata.realmKey, metadata.realmDomainComponent), metadata.regionKey);
                            }
                        });
                    }
                }
                catch (error) {
                    console.log("error reading or parsing region config file");
                }
            }
        }
    }
    // Adds region from the environment variable
    static addRegionFromEnvVar() {
        if (!Region.hasUsedEnvVar) {
            Region.hasUsedEnvVar = true;
            const envVarRegionMetadata = process.env[Region.OCI_REGION_METADATA_ENV_VAR];
            if (envVarRegionMetadata) {
                try {
                    const regionMetadata = JSON.parse(envVarRegionMetadata);
                    if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(regionMetadata)) {
                        Region.register(regionMetadata.regionIdentifier, realm_1.Realm.register(regionMetadata.realmKey, regionMetadata.realmDomainComponent), regionMetadata.regionKey);
                    }
                }
                catch (error) {
                    console.log("error reading or parsing region metadata env var config file");
                }
            }
        }
    }
    // Add region from the Instance Metadata Service
    static addRegionFromImds() {
        if (Region.imdsRegionMetadata) {
            Region.register(Region.imdsRegionMetadata.regionIdentifier, realm_1.Realm.register(Region.imdsRegionMetadata.realmKey, Region.imdsRegionMetadata.realmDomainComponent), Region.imdsRegionMetadata.regionKey);
            Region.imdsRegionMetadata = undefined;
        }
    }
    /*
     * Enable instance metadata lookup for region info
     */
    static enableInstanceMetadata() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Region.hasCalledForImds) {
                Region.hasCalledForImds = true;
                try {
                    const url = Region.IMDS_BASE_URL + "instance/regionInfo/";
                    let headers = new Headers();
                    headers.append(Region.CONTENT_TYPE_HEADER, Region.CONTENT_TYPE_HEADER_VALUE);
                    headers.append(Region.AUTHORIZATION, Region.METADATA_AUTH_HEADERS);
                    const httpClient = new http_1.FetchHttpClient(null);
                    const response = yield httpClient.send({
                        uri: url,
                        method: "GET",
                        headers: headers
                    });
                    const regionMetadata = (yield response.json());
                    if (region_metadata_schema_1.RegionMetadataSchema.isValidSchema(regionMetadata)) {
                        Region.imdsRegionMetadata = regionMetadata;
                    }
                }
                catch (error) {
                    console.log("Unable to retrieve region metadata from instance metadata service, reason :" + error);
                }
            }
        });
    }
    static register(regionId, realm, regionCode) {
        if (!regionId)
            throw Error("RegionId can not be empty or undefined");
        regionId = regionId.trim().toLocaleLowerCase("en-US");
        const region = Region.KNOWN_REGIONS.get(regionId);
        if (region) {
            if (region.realm.secondLevelDomain !== realm.secondLevelDomain) {
                throw Error(" Region " +
                    regionId +
                    " is already associated with another Realm " +
                    region.realm +
                    " It cannot be re-registered with a different realm.");
            }
            return region;
        }
        if (regionCode) {
            regionCode = regionCode.trim().toLocaleLowerCase("en-US");
        }
        return new Region(regionId, realm, regionCode);
    }
    /**
     * Function to get regionId based regionStr: regionStr can be a short code or regionId
     * if it is a shortCode then we want to return the corresponding regionId
     * @param regionStr
     * @return regionId
     */
    static getRegionIdFromShortCode(regionStr) {
        regionStr = regionStr.toLocaleLowerCase();
        // If region short code is not found in the SDK, add regions from the regions config file
        let foundRegionId = Region.REGIONS_SHORT_NAMES[regionStr];
        if (!foundRegionId) {
            Region.addRegionsFromConfigFile();
            foundRegionId = Region.REGIONS_SHORT_NAMES[regionStr];
        }
        // else add region from environment variable, and then check for short code
        if (!foundRegionId) {
            Region.addRegionFromEnvVar();
            foundRegionId = Region.REGIONS_SHORT_NAMES[regionStr];
        }
        // else add region from IMDS if it has been opted in, and then check for short code
        if (!foundRegionId && Region.hasCalledForImds) {
            Region.addRegionFromImds();
            foundRegionId = Region.REGIONS_SHORT_NAMES[regionStr];
        }
        return foundRegionId ? foundRegionId : regionStr;
    }
}
exports.Region = Region;
Region.REGIONS_SHORT_NAMES = {
    "phx": "us-phoenix-1",
    "iad": "us-ashburn-1",
    "fra": "eu-frankfurt-1",
    "lhr": "uk-london-1",
    "yyz": "ca-toronto-1",
    "gru": "sa-saopaulo-1",
    "ams": "eu-amsterdam-1",
    "jed": "me-jeddah-1",
    "kix": "ap-osaka-1",
    "cwl": "uk-cardiff-1",
    "ltn": "uk-gov-london-1",
    "nrt": "ap-tokyo-1",
    "icn": "ap-seoul-1",
    "hyd": "ap-hyderabad-1",
    "bom": "ap-mumbai-1",
    "yny": "ap-chuncheon-1",
    "syd": "ap-sydney-1",
    "mel": "ap-melbourne-1",
    "yul": "ca-montreal-1",
    "zrh": "eu-zurich-1",
    "scl": "sa-santiago-1",
    "lfi": "us-langley-1",
    "luf": "us-luke-1",
    "ric": "us-gov-ashburn-1",
    "pia": "us-gov-chicago-1",
    "tus": "us-gov-phoenix-1",
    "sjc": "us-sanjose-1",
    "brs": "uk-gov-cardiff-1",
    "nja": "ap-chiyoda-1",
    "dxb": "me-dubai-1"
};
Region.KNOWN_REGIONS = new Map();
Region.hasCalledForImds = false;
Region.hasUsedConfigFile = false;
Region.hasUsedEnvVar = false;
Region.REGIONS_CONFIG_FILE_PATH = "~/.oci/regions-config.json";
Region.OCI_REGION_METADATA_ENV_VAR = "OCI_REGION_METADATA";
Region.IMDS_BASE_URL = "http://169.254.169.254/opc/v2/";
Region.METADATA_AUTH_HEADERS = "Bearer Oracle";
Region.AUTHORIZATION = "Authorization";
Region.CONTENT_TYPE_HEADER = "Content-Type";
Region.CONTENT_TYPE_HEADER_VALUE = "application/json";
// OC1
Region.AP_CHUNCHEON_1 = Region.register("ap-chuncheon-1", realm_1.Realm.OC1);
Region.AP_MUMBAI_1 = Region.register("ap-mumbai-1", realm_1.Realm.OC1);
Region.AP_HYDERABAD_1 = Region.register("ap-hyderabad-1", realm_1.Realm.OC1);
Region.AP_SEOUL_1 = Region.register("ap-seoul-1", realm_1.Realm.OC1);
Region.AP_SYDNEY_1 = Region.register("ap-sydney-1", realm_1.Realm.OC1);
Region.AP_MELBOURNE_1 = Region.register("ap-melbourne-1", realm_1.Realm.OC1);
Region.AP_OSAKA_1 = Region.register("ap-osaka-1", realm_1.Realm.OC1);
Region.AP_TOKYO_1 = Region.register("ap-tokyo-1", realm_1.Realm.OC1);
Region.CA_MONTREAL_1 = Region.register("ca-montreal-1", realm_1.Realm.OC1);
Region.CA_TORONTO_1 = Region.register("ca-toronto-1", realm_1.Realm.OC1);
Region.EU_FRANKFURT_1 = Region.register("eu-frankfurt-1", realm_1.Realm.OC1);
Region.EU_ZURICH_1 = Region.register("eu-zurich-1", realm_1.Realm.OC1);
Region.SA_SAOPAULO_1 = Region.register("sa-saopaulo-1", realm_1.Realm.OC1);
Region.UK_CARDIFF_1 = Region.register("uk-cardiff-1", realm_1.Realm.OC1);
Region.UK_LONDON_1 = Region.register("uk-london-1", realm_1.Realm.OC1);
Region.US_ASHBURN_1 = Region.register("us-ashburn-1", realm_1.Realm.OC1);
Region.US_PHOENIX_1 = Region.register("us-phoenix-1", realm_1.Realm.OC1);
Region.EU_AMSTERDAM_1 = Region.register("eu-amsterdam-1", realm_1.Realm.OC1);
Region.ME_JEDDAH_1 = Region.register("me-jeddah-1", realm_1.Realm.OC1);
Region.US_SANJOSE_1 = Region.register("us-sanjose-1", realm_1.Realm.OC1);
Region.ME_DUBAI_1 = Region.register("me-dubai-1", realm_1.Realm.OC1);
Region.SA_SANTIAGO_1 = Region.register("sa-santiago-1", realm_1.Realm.OC1);
// OC2
Region.US_LANGLEY_1 = Region.register("us-langley-1", realm_1.Realm.OC2);
Region.US_LUKE_1 = Region.register("us-luke-1", realm_1.Realm.OC2);
// OC3
Region.US_GOV_ASHBURN_1 = Region.register("us-gov-ashburn-1", realm_1.Realm.OC3);
Region.US_GOV_CHICAGO_1 = Region.register("us-gov-chicago-1", realm_1.Realm.OC3);
Region.US_GOV_PHOENIX_1 = Region.register("us-gov-phoenix-1", realm_1.Realm.OC3);
// OC4
Region.UK_GOV_LONDON_1 = Region.register("uk-gov-london-1", realm_1.Realm.OC4);
Region.UK_GOV_CARDIFF_1 = Region.register("uk-gov-cardiff-1", realm_1.Realm.OC4);
// OC8
Region.AP_CHIYODA_1 = Region.register("ap-chiyoda-1", realm_1.Realm.OC8);
//# sourceMappingURL=region.js.map