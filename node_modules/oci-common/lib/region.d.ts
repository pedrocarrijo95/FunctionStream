/**
 * Copyright (c) 2020, 2021 Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import { Realm } from "./realm";
export declare class Region {
    /**
     * Region ID.
     */
    private readonly _regionId;
    /**
     * Realm this region belongs to.
     */
    private readonly _realm;
    get realm(): Realm;
    get regionId(): string;
    private static REGIONS_SHORT_NAMES;
    private static KNOWN_REGIONS;
    private static hasCalledForImds;
    private static hasUsedConfigFile;
    private static hasUsedEnvVar;
    private static imdsRegionMetadata;
    private static REGIONS_CONFIG_FILE_PATH;
    private static OCI_REGION_METADATA_ENV_VAR;
    private static IMDS_BASE_URL;
    private static METADATA_AUTH_HEADERS;
    private static AUTHORIZATION;
    private static CONTENT_TYPE_HEADER;
    private static CONTENT_TYPE_HEADER_VALUE;
    private constructor();
    static AP_CHUNCHEON_1: Region;
    static AP_MUMBAI_1: Region;
    static AP_HYDERABAD_1: Region;
    static AP_SEOUL_1: Region;
    static AP_SYDNEY_1: Region;
    static AP_MELBOURNE_1: Region;
    static AP_OSAKA_1: Region;
    static AP_TOKYO_1: Region;
    static CA_MONTREAL_1: Region;
    static CA_TORONTO_1: Region;
    static EU_FRANKFURT_1: Region;
    static EU_ZURICH_1: Region;
    static SA_SAOPAULO_1: Region;
    static UK_CARDIFF_1: Region;
    static UK_LONDON_1: Region;
    static US_ASHBURN_1: Region;
    static US_PHOENIX_1: Region;
    static EU_AMSTERDAM_1: Region;
    static ME_JEDDAH_1: Region;
    static US_SANJOSE_1: Region;
    static ME_DUBAI_1: Region;
    static SA_SANTIAGO_1: Region;
    static US_LANGLEY_1: Region;
    static US_LUKE_1: Region;
    static US_GOV_ASHBURN_1: Region;
    static US_GOV_CHICAGO_1: Region;
    static US_GOV_PHOENIX_1: Region;
    static UK_GOV_LONDON_1: Region;
    static UK_GOV_CARDIFF_1: Region;
    static AP_CHIYODA_1: Region;
    static fromRegionId(regionId: string): Region;
    private static addRegionsFromConfigFile;
    private static addRegionFromEnvVar;
    private static addRegionFromImds;
    static enableInstanceMetadata(): Promise<void>;
    static register(regionId: string, realm: Realm, regionCode?: string): Region;
    /**
     * Function to get regionId based regionStr: regionStr can be a short code or regionId
     * if it is a shortCode then we want to return the corresponding regionId
     * @param regionStr
     * @return regionId
     */
    static getRegionIdFromShortCode(regionStr: string): string;
}
