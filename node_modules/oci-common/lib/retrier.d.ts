/**
 * Copyright (c) 2020, 2021 Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import { WaiterConfigurationDetails } from "./waiter";
import { HttpClient } from "./http";
import { HttpRequest } from "./http-request";
import { OciError } from "..";
import { Logger } from "./log";
/**
 * This class implements the retrier
 * NOTE : Retries are not supported for requests that have binary or stream bodies
 * this also affects UploadManager operations
 * For all requests with binary/stream bodies, retry attempts will not be made
 */
export declare type RetryConfiguration = Partial<RetryConfigurationDetails>;
export interface RetryConfigurationDetails extends WaiterConfigurationDetails {
    retryCondition: (response: OciError) => boolean;
}
export declare class GenericRetrier {
    private retryConfiguration;
    private _logger;
    constructor(retryConfiguration: RetryConfiguration);
    set logger(logger: Logger);
    static createPreferredRetrier(clientRetryConfiguration?: RetryConfiguration, requestRetryConfiguration?: RetryConfiguration): GenericRetrier;
    makeServiceCall(httpClient: HttpClient, request: HttpRequest, excludeBody?: boolean): Promise<Response>;
    private static refreshRequest;
    private static isRequestRetryable;
    private static isReadableStream;
}
