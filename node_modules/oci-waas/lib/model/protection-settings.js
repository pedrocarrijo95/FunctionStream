"use strict";
/**
 * Web Application Acceleration and Security Services API
 * OCI Web Application Acceleration and Security Services
 * OpenAPI spec version: 20181116
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtectionSettings = void 0;
var ProtectionSettings;
(function (ProtectionSettings) {
    let BlockAction;
    (function (BlockAction) {
        BlockAction["ShowErrorPage"] = "SHOW_ERROR_PAGE";
        BlockAction["SetResponseCode"] = "SET_RESPONSE_CODE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        BlockAction["UnknownValue"] = "UNKNOWN_VALUE";
    })(BlockAction = ProtectionSettings.BlockAction || (ProtectionSettings.BlockAction = {}));
    let AllowedHttpMethods;
    (function (AllowedHttpMethods) {
        AllowedHttpMethods["Options"] = "OPTIONS";
        AllowedHttpMethods["Get"] = "GET";
        AllowedHttpMethods["Head"] = "HEAD";
        AllowedHttpMethods["Post"] = "POST";
        AllowedHttpMethods["Put"] = "PUT";
        AllowedHttpMethods["Delete"] = "DELETE";
        AllowedHttpMethods["Trace"] = "TRACE";
        AllowedHttpMethods["Connect"] = "CONNECT";
        AllowedHttpMethods["Patch"] = "PATCH";
        AllowedHttpMethods["Propfind"] = "PROPFIND";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        AllowedHttpMethods["UnknownValue"] = "UNKNOWN_VALUE";
    })(AllowedHttpMethods = ProtectionSettings.AllowedHttpMethods || (ProtectionSettings.AllowedHttpMethods = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    ProtectionSettings.getJsonObj = getJsonObj;
})(ProtectionSettings = exports.ProtectionSettings || (exports.ProtectionSettings = {}));
//# sourceMappingURL=protection-settings.js.map