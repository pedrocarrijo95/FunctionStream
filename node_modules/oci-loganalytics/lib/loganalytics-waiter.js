"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogAnalyticsWaiter = void 0;
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
class LogAnalyticsWaiter {
    constructor(client, config) {
        this.client = client;
        this.config = config;
    }
    /**
     * Waits forLogAnalyticsEmBridge till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEmBridgeResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEmBridge(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLogAnalyticsEmBridge(request), response => targetStates.includes(response.logAnalyticsEmBridge.lifecycleState), targetStates.includes(models.EmBridgeLifecycleStates.Deleted));
        });
    }
    /**
     * Waits forLogAnalyticsEntity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEntityResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEntity(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLogAnalyticsEntity(request), response => targetStates.includes(response.logAnalyticsEntity.lifecycleState), targetStates.includes(models.EntityLifecycleStates.Deleted));
        });
    }
    /**
     * Waits forLogAnalyticsEntityType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEntityTypeResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEntityType(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLogAnalyticsEntityType(request), response => targetStates.includes(response.logAnalyticsEntityType.lifecycleState), targetStates.includes(models.EntityLifecycleStates.Deleted));
        });
    }
    /**
     * Waits forLogAnalyticsObjectCollectionRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsObjectCollectionRuleResponse | null (null in case of 404 response)
     */
    forLogAnalyticsObjectCollectionRule(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getLogAnalyticsObjectCollectionRule(request), response => targetStates.includes(response.logAnalyticsObjectCollectionRule.lifecycleState), targetStates.includes(models.ObjectCollectionRuleLifecycleStates.Deleted));
        });
    }
    /**
     * Waits forQueryWorkRequest
     *
     * @param request the request to send
     * @return response returns GetQueryWorkRequestResponse
     */
    forQueryWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getQueryWorkRequest(request), response => (response.queryWorkRequest.timeFinished ? true : false));
        });
    }
    /**
     * Waits forScheduledTask till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetScheduledTaskResponse | null (null in case of 404 response)
     */
    forScheduledTask(request, ...targetStates) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericTerminalConditionWaiter(this.config, () => this.client.getScheduledTask(request), response => targetStates.includes(response.scheduledTask.lifecycleState), targetStates.includes(models.ScheduledTask.LifecycleState.Deleted));
        });
    }
    /**
     * Waits forStorageWorkRequest
     *
     * @param request the request to send
     * @return response returns GetStorageWorkRequestResponse
     */
    forStorageWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getStorageWorkRequest(request), response => (response.storageWorkRequest.timeFinished ? true : false));
        });
    }
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            return oci_common_1.genericWaiter(this.config, () => this.client.getWorkRequest(request), response => (response.workRequest.timeFinished ? true : false));
        });
    }
}
exports.LogAnalyticsWaiter = LogAnalyticsWaiter;
//# sourceMappingURL=loganalytics-waiter.js.map