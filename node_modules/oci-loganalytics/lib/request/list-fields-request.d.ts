/**
 *
 *
 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
/**
 * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListFields.ts.html |here} to see how to use ListFieldsRequest.
 */
export interface ListFieldsRequest extends common.BaseRequest {
    /**
     * The Logging Analytics namespace used for the request.
     *
     */
    "namespaceName": string;
    /**
     * A flag indicating how to handle filtering when multiple filter criteria are specified.
     * A value of true will always result in the most expansive list of items being returned.
     * For example, if two field lists are supplies as filter criteria, a value of true will
     * result in any item matching a field in either list being returned, while a value of
     * false will result in a list of items which only have fields contained in both input lists.
     *
     */
    "isMatchAll"?: boolean;
    /**
     * A list of source IDs used for filtering.  Only fields used by the specified
     * sources will be returned.
     *
     */
    "sourceIds"?: string;
    /**
     * A list of source names used for filtering.  Only fields used by the specified
     * sources will be returned.
     *
     */
    "sourceNames"?: string;
    /**
     * The parser type used for filtering.  Only items with, or associated with, parsers
     * of the specified type will be returned.
     *
     */
    "parserType"?: ListFieldsRequest.ParserType;
    /**
     * A list of parser names used for filtering.  Only fields used by the specified
     * parsers will be returned.
     *
     */
    "parserIds"?: string;
    /**
     * A list of parser names used for filtering.  Only fields used by the specified
     * parsers will be returned.
     *
     */
    "parserNames"?: string;
    /**
     * isIncludeParser
     */
    "isIncludeParser"?: boolean;
    /**
     * filter
     */
    "filter"?: string;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
     */
    "page"?: string;
    /**
     * The sort order to use, either ascending (`ASC`) or descending (`DESC`).
     *
     */
    "sortOrder"?: ListFieldsRequest.SortOrder;
    /**
     * The attribute used to sort the returned fields
     */
    "sortBy"?: ListFieldsRequest.SortBy;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
}
export declare namespace ListFieldsRequest {
    enum ParserType {
        All = "ALL",
        Regex = "REGEX",
        Xml = "XML",
        Json = "JSON",
        Odl = "ODL",
        Delimited = "DELIMITED"
    }
    enum SortOrder {
        Asc = "ASC",
        Desc = "DESC"
    }
    enum SortBy {
        Name = "name",
        DataType = "dataType"
    }
}
