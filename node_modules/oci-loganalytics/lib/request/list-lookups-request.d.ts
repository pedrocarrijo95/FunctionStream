/**
 *
 *
 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
/**
 * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLookups.ts.html |here} to see how to use ListLookupsRequest.
 */
export interface ListLookupsRequest extends common.BaseRequest {
    /**
     * The Logging Analytics namespace used for the request.
     *
     */
    "namespaceName": string;
    /**
     * The lookup type.  Valid values are Lookup or Dictionary.
     */
    "type": ListLookupsRequest.Type;
    /**
     * The lookup text used for filtering.  Only lookups with the specified name
     * or description will be returned.
     *
     */
    "lookupDisplayText"?: string;
    /**
     * The system value used for filtering.  Only items with the specified system value
     * will be returned.  Valid values are built in, custom (for user defined items), or
     * all (for all items, regardless of system value).
     *
     */
    "isSystem"?: ListLookupsRequest.IsSystem;
    /**
     * sort by field
     */
    "sortBy"?: ListLookupsRequest.SortBy;
    /**
     * The lookup status used for filtering when fetching a list of lookups.
     */
    "status"?: ListLookupsRequest.Status;
    /**
     * A flag indicating whether or not to return OMC annotated or hidden lookups.
     *
     */
    "isHideSpecial"?: boolean;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
     */
    "page"?: string;
    /**
     * The sort order to use, either ascending (`ASC`) or descending (`DESC`).
     *
     */
    "sortOrder"?: ListLookupsRequest.SortOrder;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
}
export declare namespace ListLookupsRequest {
    enum Type {
        Lookup = "Lookup",
        Dictionary = "Dictionary"
    }
    enum IsSystem {
        All = "ALL",
        Custom = "CUSTOM",
        BuiltIn = "BUILT_IN"
    }
    enum SortBy {
        DisplayName = "displayName",
        Status = "status",
        Type = "type",
        UpdatedTime = "updatedTime",
        CreationType = "creationType"
    }
    enum Status {
        All = "ALL",
        Successful = "SUCCESSFUL",
        Failed = "FAILED",
        Inprogress = "INPROGRESS"
    }
    enum SortOrder {
        Asc = "ASC",
        Desc = "DESC"
    }
}
