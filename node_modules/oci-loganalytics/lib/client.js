"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogAnalyticsClient = exports.LogAnalyticsApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const loganalytics_waiter_1 = require("./loganalytics-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var LogAnalyticsApiKeys;
(function (LogAnalyticsApiKeys) {
})(LogAnalyticsApiKeys = exports.LogAnalyticsApiKeys || (exports.LogAnalyticsApiKeys = {}));
class LogAnalyticsClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20200601";
        if (this.logger)
            this.logger.info(`LogAnalyticsClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(LogAnalyticsClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(LogAnalyticsClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new LogAnalyticsWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new loganalytics_waiter_1.LogAnalyticsWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Adds association between input source log analytics entity and one or more existing destination entities.
     * @param AddEntityAssociationRequest
     * @return AddEntityAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/AddEntityAssociation.ts.html |here} to see how to use AddEntityAssociation API.
     */
    addEntityAssociation(addEntityAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#addEntityAssociation.");
            const pathParams = {
                "{namespaceName}": addEntityAssociationRequest.namespaceName,
                "{logAnalyticsEntityId}": addEntityAssociationRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addEntityAssociationRequest.opcRequestId,
                "opc-retry-token": addEntityAssociationRequest.opcRetryToken,
                "if-match": addEntityAssociationRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/addEntityAssociations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addEntityAssociationRequest.addEntityAssociationDetails, "AddEntityAssociationDetails", models.AddEntityAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addEntityAssociationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add one or more event types to a source. An event type and version can be enabled only on one source.
     *
     * @param AddSourceEventTypesRequest
     * @return AddSourceEventTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/AddSourceEventTypes.ts.html |here} to see how to use AddSourceEventTypes API.
     */
    addSourceEventTypes(addSourceEventTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#addSourceEventTypes.");
            const pathParams = {
                "{namespaceName}": addSourceEventTypesRequest.namespaceName,
                "{sourceName}": addSourceEventTypesRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": addSourceEventTypesRequest.opcRetryToken,
                "opc-request-id": addSourceEventTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/addEventTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addSourceEventTypesRequest.addEventTypeDetails, "EventTypeDetails", models.EventTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addSourceEventTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Appends data to the lookup content. The csv file containing the content to be appended is passed in as binary data in the request.
     *
     * @param AppendLookupDataRequest
     * @return AppendLookupDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/AppendLookupData.ts.html |here} to see how to use AppendLookupData API.
     */
    appendLookupData(appendLookupDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#appendLookupData.");
            const pathParams = {
                "{namespaceName}": appendLookupDataRequest.namespaceName,
                "{lookupName}": appendLookupDataRequest.lookupName
            };
            const queryParams = {
                "isForce": appendLookupDataRequest.isForce,
                "charEncoding": appendLookupDataRequest.charEncoding
            };
            let headerParams = {
                "opc-retry-token": appendLookupDataRequest.opcRetryToken,
                "opc-request-id": appendLookupDataRequest.opcRequestId,
                "if-match": appendLookupDataRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/{lookupName}/actions/appendData",
                method: "POST",
                bodyContent: appendLookupDataRequest.appendLookupFileBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, appendLookupDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists basic information about a specified set of labels in batch.
     *
     * @param BatchGetBasicInfoRequest
     * @return BatchGetBasicInfoResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/BatchGetBasicInfo.ts.html |here} to see how to use BatchGetBasicInfo API.
     */
    batchGetBasicInfo(batchGetBasicInfoRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#batchGetBasicInfo.");
            const pathParams = {
                "{namespaceName}": batchGetBasicInfoRequest.namespaceName
            };
            const queryParams = {
                "isIncludeDeleted": batchGetBasicInfoRequest.isIncludeDeleted,
                "limit": batchGetBasicInfoRequest.limit,
                "page": batchGetBasicInfoRequest.page,
                "sortOrder": batchGetBasicInfoRequest.sortOrder,
                "basicLabelSortBy": batchGetBasicInfoRequest.basicLabelSortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": batchGetBasicInfoRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labels/actions/basicInfo",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(batchGetBasicInfoRequest.basicDetails, "LabelNames", models.LabelNames.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, batchGetBasicInfoRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLabelCollection",
                    bodyModel: "model.LogAnalyticsLabelCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Cancel/Remove query job work request.
     * @param CancelQueryWorkRequestRequest
     * @return CancelQueryWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CancelQueryWorkRequest.ts.html |here} to see how to use CancelQueryWorkRequest API.
     */
    cancelQueryWorkRequest(cancelQueryWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#cancelQueryWorkRequest.");
            const pathParams = {
                "{namespaceName}": cancelQueryWorkRequestRequest.namespaceName,
                "{workRequestId}": cancelQueryWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cancelQueryWorkRequestRequest.opcRequestId,
                "if-match": cancelQueryWorkRequestRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, cancelQueryWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the compartment of the log analytics enterprise manager bridge with the given id.
     * @param ChangeLogAnalyticsEmBridgeCompartmentRequest
     * @return ChangeLogAnalyticsEmBridgeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ChangeLogAnalyticsEmBridgeCompartment.ts.html |here} to see how to use ChangeLogAnalyticsEmBridgeCompartment API.
     */
    changeLogAnalyticsEmBridgeCompartment(changeLogAnalyticsEmBridgeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#changeLogAnalyticsEmBridgeCompartment.");
            const pathParams = {
                "{namespaceName}": changeLogAnalyticsEmBridgeCompartmentRequest.namespaceName,
                "{logAnalyticsEmBridgeId}": changeLogAnalyticsEmBridgeCompartmentRequest.logAnalyticsEmBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeLogAnalyticsEmBridgeCompartmentRequest.ifMatch,
                "opc-request-id": changeLogAnalyticsEmBridgeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeLogAnalyticsEmBridgeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLogAnalyticsEmBridgeCompartmentRequest.changeLogAnalyticsEmBridgeCompartmentDetails, "ChangeLogAnalyticsEmBridgeCompartmentDetails", models.ChangeLogAnalyticsEmBridgeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeLogAnalyticsEmBridgeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the compartment of the log analytics entity with the given id.
     * @param ChangeLogAnalyticsEntityCompartmentRequest
     * @return ChangeLogAnalyticsEntityCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ChangeLogAnalyticsEntityCompartment.ts.html |here} to see how to use ChangeLogAnalyticsEntityCompartment API.
     */
    changeLogAnalyticsEntityCompartment(changeLogAnalyticsEntityCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#changeLogAnalyticsEntityCompartment.");
            const pathParams = {
                "{namespaceName}": changeLogAnalyticsEntityCompartmentRequest.namespaceName,
                "{logAnalyticsEntityId}": changeLogAnalyticsEntityCompartmentRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeLogAnalyticsEntityCompartmentRequest.ifMatch,
                "opc-request-id": changeLogAnalyticsEntityCompartmentRequest.opcRequestId,
                "opc-retry-token": changeLogAnalyticsEntityCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLogAnalyticsEntityCompartmentRequest.changeLogAnalyticsEntityCompartmentDetails, "ChangeLogAnalyticsEntityCompartmentDetails", models.ChangeLogAnalyticsEntityCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeLogAnalyticsEntityCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the specified log group to a different compartment.
     *
     * @param ChangeLogAnalyticsLogGroupCompartmentRequest
     * @return ChangeLogAnalyticsLogGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ChangeLogAnalyticsLogGroupCompartment.ts.html |here} to see how to use ChangeLogAnalyticsLogGroupCompartment API.
     */
    changeLogAnalyticsLogGroupCompartment(changeLogAnalyticsLogGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#changeLogAnalyticsLogGroupCompartment.");
            const pathParams = {
                "{namespaceName}": changeLogAnalyticsLogGroupCompartmentRequest.namespaceName,
                "{logAnalyticsLogGroupId}": changeLogAnalyticsLogGroupCompartmentRequest.logAnalyticsLogGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeLogAnalyticsLogGroupCompartmentRequest.ifMatch,
                "opc-request-id": changeLogAnalyticsLogGroupCompartmentRequest.opcRequestId,
                "opc-retry-token": changeLogAnalyticsLogGroupCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLogAnalyticsLogGroupCompartmentRequest.changeLogAnalyticsLogGroupCompartmentDetails, "ChangeLogAnalyticsLogGroupCompartmentDetails", models.ChangeLogAnalyticsLogGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeLogAnalyticsLogGroupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Move the rule from it's current compartment to the given compartment.
     * @param ChangeLogAnalyticsObjectCollectionRuleCompartmentRequest
     * @return ChangeLogAnalyticsObjectCollectionRuleCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ChangeLogAnalyticsObjectCollectionRuleCompartment.ts.html |here} to see how to use ChangeLogAnalyticsObjectCollectionRuleCompartment API.
     */
    changeLogAnalyticsObjectCollectionRuleCompartment(changeLogAnalyticsObjectCollectionRuleCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#changeLogAnalyticsObjectCollectionRuleCompartment.");
            const pathParams = {
                "{namespaceName}": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.namespaceName,
                "{logAnalyticsObjectCollectionRuleId}": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.logAnalyticsObjectCollectionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.ifMatch,
                "opc-request-id": changeLogAnalyticsObjectCollectionRuleCompartmentRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeLogAnalyticsObjectCollectionRuleCompartmentRequest.changeLogAnalyticsObjectCollectionRuleCompartmentDetails, "ChangeLogAnalyticsObjectCollectionRuleCompartmentDetails", models.ChangeLogAnalyticsObjectCollectionRuleCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeLogAnalyticsObjectCollectionRuleCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Move the scheduled task into a different compartment within the same tenancy.
     *
     * @param ChangeScheduledTaskCompartmentRequest
     * @return ChangeScheduledTaskCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ChangeScheduledTaskCompartment.ts.html |here} to see how to use ChangeScheduledTaskCompartment API.
     */
    changeScheduledTaskCompartment(changeScheduledTaskCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#changeScheduledTaskCompartment.");
            const pathParams = {
                "{namespaceName}": changeScheduledTaskCompartmentRequest.namespaceName,
                "{scheduledTaskId}": changeScheduledTaskCompartmentRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeScheduledTaskCompartmentRequest.ifMatch,
                "opc-request-id": changeScheduledTaskCompartmentRequest.opcRequestId,
                "opc-retry-token": changeScheduledTaskCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeScheduledTaskCompartmentRequest.changeScheduledTaskCompartmentDetails, "ChangeScheduledTaskCompartmentDetails", models.ChangeScheduledTaskCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeScheduledTaskCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Clean accumulated acceleration data stored for the accelerated saved search.
     * The ScheduledTask taskType must be ACCELERATION.
     *
     * @param CleanRequest
     * @return CleanResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/Clean.ts.html |here} to see how to use Clean API.
     */
    clean(cleanRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#clean.");
            const pathParams = {
                "{namespaceName}": cleanRequest.namespaceName,
                "{scheduledTaskId}": cleanRequest.scheduledTaskId
            };
            const queryParams = {
                "timeStart": cleanRequest.timeStart,
                "timeEnd": cleanRequest.timeEnd
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": cleanRequest.opcRequestId,
                "opc-retry-token": cleanRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/clean",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, cleanRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add configuration for enterprise manager bridge. Enterprise manager bridge is used to automatically add selected entities from enterprise manager cloud control. A corresponding OCI bridge configuration is required in enterprise manager.
     * @param CreateLogAnalyticsEmBridgeRequest
     * @return CreateLogAnalyticsEmBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateLogAnalyticsEmBridge.ts.html |here} to see how to use CreateLogAnalyticsEmBridge API.
     */
    createLogAnalyticsEmBridge(createLogAnalyticsEmBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEmBridge.");
            const pathParams = {
                "{namespaceName}": createLogAnalyticsEmBridgeRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLogAnalyticsEmBridgeRequest.opcRetryToken,
                "opc-request-id": createLogAnalyticsEmBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLogAnalyticsEmBridgeRequest.createLogAnalyticsEmBridgeDetails, "CreateLogAnalyticsEmBridgeDetails", models.CreateLogAnalyticsEmBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLogAnalyticsEmBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEmBridge",
                    bodyModel: "model.LogAnalyticsEmBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a new log analytics entity.
     * @param CreateLogAnalyticsEntityRequest
     * @return CreateLogAnalyticsEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateLogAnalyticsEntity.ts.html |here} to see how to use CreateLogAnalyticsEntity API.
     */
    createLogAnalyticsEntity(createLogAnalyticsEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEntity.");
            const pathParams = {
                "{namespaceName}": createLogAnalyticsEntityRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLogAnalyticsEntityRequest.opcRetryToken,
                "opc-request-id": createLogAnalyticsEntityRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLogAnalyticsEntityRequest.createLogAnalyticsEntityDetails, "CreateLogAnalyticsEntityDetails", models.CreateLogAnalyticsEntityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLogAnalyticsEntityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntity",
                    bodyModel: "model.LogAnalyticsEntity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Add custom log analytics entity type.
     * @param CreateLogAnalyticsEntityTypeRequest
     * @return CreateLogAnalyticsEntityTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateLogAnalyticsEntityType.ts.html |here} to see how to use CreateLogAnalyticsEntityType API.
     */
    createLogAnalyticsEntityType(createLogAnalyticsEntityTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsEntityType.");
            const pathParams = {
                "{namespaceName}": createLogAnalyticsEntityTypeRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createLogAnalyticsEntityTypeRequest.opcRequestId,
                "opc-retry-token": createLogAnalyticsEntityTypeRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLogAnalyticsEntityTypeRequest.createLogAnalyticsEntityTypeDetails, "CreateLogAnalyticsEntityTypeDetails", models.CreateLogAnalyticsEntityTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLogAnalyticsEntityTypeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new log group in the specified compartment with the input display name. You may also specify optional information such as description, defined tags, and free-form tags.
     *
     * @param CreateLogAnalyticsLogGroupRequest
     * @return CreateLogAnalyticsLogGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateLogAnalyticsLogGroup.ts.html |here} to see how to use CreateLogAnalyticsLogGroup API.
     */
    createLogAnalyticsLogGroup(createLogAnalyticsLogGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsLogGroup.");
            const pathParams = {
                "{namespaceName}": createLogAnalyticsLogGroupRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLogAnalyticsLogGroupRequest.opcRetryToken,
                "opc-request-id": createLogAnalyticsLogGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLogAnalyticsLogGroupRequest.createLogAnalyticsLogGroupDetails, "CreateLogAnalyticsLogGroupDetails", models.CreateLogAnalyticsLogGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLogAnalyticsLogGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLogGroup",
                    bodyModel: "model.LogAnalyticsLogGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a rule to collect logs from an object storage bucket.
     * @param CreateLogAnalyticsObjectCollectionRuleRequest
     * @return CreateLogAnalyticsObjectCollectionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use CreateLogAnalyticsObjectCollectionRule API.
     */
    createLogAnalyticsObjectCollectionRule(createLogAnalyticsObjectCollectionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createLogAnalyticsObjectCollectionRule.");
            const pathParams = {
                "{namespaceName}": createLogAnalyticsObjectCollectionRuleRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createLogAnalyticsObjectCollectionRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLogAnalyticsObjectCollectionRuleRequest.createLogAnalyticsObjectCollectionRuleDetails, "CreateLogAnalyticsObjectCollectionRuleDetails", models.CreateLogAnalyticsObjectCollectionRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createLogAnalyticsObjectCollectionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsObjectCollectionRule",
                    bodyModel: "model.LogAnalyticsObjectCollectionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Schedule a task as specified and return task info.
     * @param CreateScheduledTaskRequest
     * @return CreateScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/CreateScheduledTask.ts.html |here} to see how to use CreateScheduledTask API.
     */
    createScheduledTask(createScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#createScheduledTask.");
            const pathParams = {
                "{namespaceName}": createScheduledTaskRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createScheduledTaskRequest.opcRequestId,
                "opc-retry-token": createScheduledTaskRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createScheduledTaskRequest.createScheduledTaskDetails, "CreateScheduledTaskDetails", models.CreateScheduledTaskDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTask",
                    bodyModel: "model.ScheduledTask",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the associations between the sources and entities specified.
     *
     * @param DeleteAssociationsRequest
     * @return DeleteAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteAssociations.ts.html |here} to see how to use DeleteAssociations API.
     */
    deleteAssociations(deleteAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteAssociations.");
            const pathParams = {
                "{namespaceName}": deleteAssociationsRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteAssociationsRequest.opcRetryToken,
                "opc-request-id": deleteAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/associations/actions/delete",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(deleteAssociationsRequest.deleteLogAnalyticsAssociationDetails, "DeleteLogAnalyticsAssociationDetails", models.DeleteLogAnalyticsAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes field with the specified name.
     *
     * @param DeleteFieldRequest
     * @return DeleteFieldResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteField.ts.html |here} to see how to use DeleteField API.
     */
    deleteField(deleteFieldRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteField.");
            const pathParams = {
                "{namespaceName}": deleteFieldRequest.namespaceName,
                "{fieldName}": deleteFieldRequest.fieldName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteFieldRequest.opcRetryToken,
                "opc-request-id": deleteFieldRequest.opcRequestId,
                "if-match": deleteFieldRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/fields/{fieldName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteFieldRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes label with the specified name.
     *
     * @param DeleteLabelRequest
     * @return DeleteLabelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLabel.ts.html |here} to see how to use DeleteLabel API.
     */
    deleteLabel(deleteLabelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLabel.");
            const pathParams = {
                "{namespaceName}": deleteLabelRequest.namespaceName,
                "{labelName}": deleteLabelRequest.labelName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteLabelRequest.opcRetryToken,
                "opc-request-id": deleteLabelRequest.opcRequestId,
                "if-match": deleteLabelRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labels/{labelName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLabelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete log analytics enterprise manager bridge with the given id.
     * @param DeleteLogAnalyticsEmBridgeRequest
     * @return DeleteLogAnalyticsEmBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLogAnalyticsEmBridge.ts.html |here} to see how to use DeleteLogAnalyticsEmBridge API.
     */
    deleteLogAnalyticsEmBridge(deleteLogAnalyticsEmBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEmBridge.");
            const pathParams = {
                "{namespaceName}": deleteLogAnalyticsEmBridgeRequest.namespaceName,
                "{logAnalyticsEmBridgeId}": deleteLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLogAnalyticsEmBridgeRequest.ifMatch,
                "opc-request-id": deleteLogAnalyticsEmBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLogAnalyticsEmBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete log analytics entity with the given id.
     * @param DeleteLogAnalyticsEntityRequest
     * @return DeleteLogAnalyticsEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLogAnalyticsEntity.ts.html |here} to see how to use DeleteLogAnalyticsEntity API.
     */
    deleteLogAnalyticsEntity(deleteLogAnalyticsEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEntity.");
            const pathParams = {
                "{namespaceName}": deleteLogAnalyticsEntityRequest.namespaceName,
                "{logAnalyticsEntityId}": deleteLogAnalyticsEntityRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLogAnalyticsEntityRequest.ifMatch,
                "opc-request-id": deleteLogAnalyticsEntityRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLogAnalyticsEntityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete log analytics entity type with the given name.
     * @param DeleteLogAnalyticsEntityTypeRequest
     * @return DeleteLogAnalyticsEntityTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLogAnalyticsEntityType.ts.html |here} to see how to use DeleteLogAnalyticsEntityType API.
     */
    deleteLogAnalyticsEntityType(deleteLogAnalyticsEntityTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsEntityType.");
            const pathParams = {
                "{namespaceName}": deleteLogAnalyticsEntityTypeRequest.namespaceName,
                "{entityTypeName}": deleteLogAnalyticsEntityTypeRequest.entityTypeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLogAnalyticsEntityTypeRequest.ifMatch,
                "opc-request-id": deleteLogAnalyticsEntityTypeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLogAnalyticsEntityTypeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified log group. The log group cannot be part of an active association or have an active upload.
     *
     * @param DeleteLogAnalyticsLogGroupRequest
     * @return DeleteLogAnalyticsLogGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLogAnalyticsLogGroup.ts.html |here} to see how to use DeleteLogAnalyticsLogGroup API.
     */
    deleteLogAnalyticsLogGroup(deleteLogAnalyticsLogGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsLogGroup.");
            const pathParams = {
                "{namespaceName}": deleteLogAnalyticsLogGroupRequest.namespaceName,
                "{logAnalyticsLogGroupId}": deleteLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLogAnalyticsLogGroupRequest.ifMatch,
                "opc-request-id": deleteLogAnalyticsLogGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLogAnalyticsLogGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the configured object storage bucket based collection rule and stop the log collection.
     * It will not delete the existing processed data associated with this bucket from logging analytics storage.
     *
     * @param DeleteLogAnalyticsObjectCollectionRuleRequest
     * @return DeleteLogAnalyticsObjectCollectionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use DeleteLogAnalyticsObjectCollectionRule API.
     */
    deleteLogAnalyticsObjectCollectionRule(deleteLogAnalyticsObjectCollectionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLogAnalyticsObjectCollectionRule.");
            const pathParams = {
                "{namespaceName}": deleteLogAnalyticsObjectCollectionRuleRequest.namespaceName,
                "{logAnalyticsObjectCollectionRuleId}": deleteLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteLogAnalyticsObjectCollectionRuleRequest.opcRequestId,
                "if-match": deleteLogAnalyticsObjectCollectionRuleRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLogAnalyticsObjectCollectionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes lookup with the specified name.
     *
     * @param DeleteLookupRequest
     * @return DeleteLookupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteLookup.ts.html |here} to see how to use DeleteLookup API.
     */
    deleteLookup(deleteLookupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteLookup.");
            const pathParams = {
                "{namespaceName}": deleteLookupRequest.namespaceName,
                "{lookupName}": deleteLookupRequest.lookupName
            };
            const queryParams = {
                "isForce": deleteLookupRequest.isForce
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteLookupRequest.opcRetryToken,
                "opc-request-id": deleteLookupRequest.opcRequestId,
                "if-match": deleteLookupRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/{lookupName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteLookupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes parser with the specified name.
     *
     * @param DeleteParserRequest
     * @return DeleteParserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteParser.ts.html |here} to see how to use DeleteParser API.
     */
    deleteParser(deleteParserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteParser.");
            const pathParams = {
                "{namespaceName}": deleteParserRequest.namespaceName,
                "{parserName}": deleteParserRequest.parserName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteParserRequest.opcRetryToken,
                "opc-request-id": deleteParserRequest.opcRequestId,
                "if-match": deleteParserRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/{parserName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteParserRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete the scheduled task.
     * @param DeleteScheduledTaskRequest
     * @return DeleteScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteScheduledTask.ts.html |here} to see how to use DeleteScheduledTask API.
     */
    deleteScheduledTask(deleteScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteScheduledTask.");
            const pathParams = {
                "{namespaceName}": deleteScheduledTaskRequest.namespaceName,
                "{scheduledTaskId}": deleteScheduledTaskRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteScheduledTaskRequest.opcRequestId,
                "if-match": deleteScheduledTaskRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes source with the specified name.
     *
     * @param DeleteSourceRequest
     * @return DeleteSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteSource.ts.html |here} to see how to use DeleteSource API.
     */
    deleteSource(deleteSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteSource.");
            const pathParams = {
                "{namespaceName}": deleteSourceRequest.namespaceName,
                "{sourceName}": deleteSourceRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": deleteSourceRequest.opcRetryToken,
                "opc-request-id": deleteSourceRequest.opcRequestId,
                "if-match": deleteSourceRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteSourceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes an Upload by its reference.
     * It deletes all the logs in storage asscoiated with the upload and the corresponding upload metadata.
     *
     * @param DeleteUploadRequest
     * @return DeleteUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteUpload.ts.html |here} to see how to use DeleteUpload API.
     */
    deleteUpload(deleteUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteUpload.");
            const pathParams = {
                "{namespaceName}": deleteUploadRequest.namespaceName,
                "{uploadReference}": deleteUploadRequest.uploadReference
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteUploadRequest.ifMatch,
                "opc-request-id": deleteUploadRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteUploadRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-deleted-log-count"),
                            key: "opcDeletedLogCount",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-deleted-logfile-count"),
                            key: "opcDeletedLogfileCount",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specific log file inside an upload by upload file reference.
     * It deletes all the logs from storage associated with the file and the corresponding metadata.
     *
     * @param DeleteUploadFileRequest
     * @return DeleteUploadFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteUploadFile.ts.html |here} to see how to use DeleteUploadFile API.
     */
    deleteUploadFile(deleteUploadFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteUploadFile.");
            const pathParams = {
                "{namespaceName}": deleteUploadFileRequest.namespaceName,
                "{uploadReference}": deleteUploadFileRequest.uploadReference,
                "{fileReference}": deleteUploadFileRequest.fileReference
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteUploadFileRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}/files/{fileReference}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteUploadFileRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-deleted-log-count"),
                            key: "opcDeletedLogCount",
                            dataType: "number"
                        },
                        {
                            value: response.headers.get("opc-deleted-logfile-count"),
                            key: "opcDeletedLogfileCount",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Suppresses a specific warning inside an upload.
     *
     * @param DeleteUploadWarningRequest
     * @return DeleteUploadWarningResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DeleteUploadWarning.ts.html |here} to see how to use DeleteUploadWarning API.
     */
    deleteUploadWarning(deleteUploadWarningRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#deleteUploadWarning.");
            const pathParams = {
                "{namespaceName}": deleteUploadWarningRequest.namespaceName,
                "{uploadReference}": deleteUploadWarningRequest.uploadReference,
                "{warningReference}": deleteUploadWarningRequest.warningReference
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteUploadWarningRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}/warnings/{warningReference}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteUploadWarningRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API disables archiving.
     *
     * @param DisableArchivingRequest
     * @return DisableArchivingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DisableArchiving.ts.html |here} to see how to use DisableArchiving API.
     */
    disableArchiving(disableArchivingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#disableArchiving.");
            const pathParams = {
                "{namespaceName}": disableArchivingRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disableArchivingRequest.opcRequestId,
                "if-match": disableArchivingRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/disableArchiving",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, disableArchivingRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "success",
                    bodyModel: "model.Success",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables auto association for a log source. In the future, this log source would not be automatically
     * associated with any entity that becomes eligible for association. In addition, you may also optionally
     * remove all existing associations for this log source.
     *
     * @param DisableAutoAssociationRequest
     * @return DisableAutoAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DisableAutoAssociation.ts.html |here} to see how to use DisableAutoAssociation API.
     */
    disableAutoAssociation(disableAutoAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#disableAutoAssociation.");
            const pathParams = {
                "{namespaceName}": disableAutoAssociationRequest.namespaceName,
                "{sourceName}": disableAutoAssociationRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": disableAutoAssociationRequest.opcRetryToken,
                "opc-request-id": disableAutoAssociationRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/disableAutoAssociation",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disableAutoAssociationRequest.disableAutoAssociationDetails, "DisableAutoAssociationDetails", models.DisableAutoAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, disableAutoAssociationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disable one or more event types in a source.
     *
     * @param DisableSourceEventTypesRequest
     * @return DisableSourceEventTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/DisableSourceEventTypes.ts.html |here} to see how to use DisableSourceEventTypes API.
     */
    disableSourceEventTypes(disableSourceEventTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#disableSourceEventTypes.");
            const pathParams = {
                "{namespaceName}": disableSourceEventTypesRequest.namespaceName,
                "{sourceName}": disableSourceEventTypesRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": disableSourceEventTypesRequest.opcRetryToken,
                "opc-request-id": disableSourceEventTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/disableEventTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disableSourceEventTypesRequest.disableEventTypeDetails, "EventTypeDetails", models.EventTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, disableSourceEventTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * THis API enables archiving.
     *
     * @param EnableArchivingRequest
     * @return EnableArchivingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EnableArchiving.ts.html |here} to see how to use EnableArchiving API.
     */
    enableArchiving(enableArchivingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#enableArchiving.");
            const pathParams = {
                "{namespaceName}": enableArchivingRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableArchivingRequest.opcRequestId,
                "if-match": enableArchivingRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/enableArchiving",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, enableArchivingRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "success",
                    bodyModel: "model.Success",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables auto association for a log source. This would initiate immediate association of the source
     * to any eligible entities it is not already associated with, and would also ensure the log source gets
     * associated with entities that are added or become eligible in the future.
     *
     * @param EnableAutoAssociationRequest
     * @return EnableAutoAssociationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EnableAutoAssociation.ts.html |here} to see how to use EnableAutoAssociation API.
     */
    enableAutoAssociation(enableAutoAssociationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#enableAutoAssociation.");
            const pathParams = {
                "{namespaceName}": enableAutoAssociationRequest.namespaceName,
                "{sourceName}": enableAutoAssociationRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": enableAutoAssociationRequest.opcRetryToken,
                "opc-request-id": enableAutoAssociationRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/enableAutoAssociation",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableAutoAssociationRequest.enableAutoAssociationDetails, "EnableAutoAssociationDetails", models.EnableAutoAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, enableAutoAssociationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enable one or more event types in a source. An event type and version can be enabled only in one source.
     *
     * @param EnableSourceEventTypesRequest
     * @return EnableSourceEventTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EnableSourceEventTypes.ts.html |here} to see how to use EnableSourceEventTypes API.
     */
    enableSourceEventTypes(enableSourceEventTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#enableSourceEventTypes.");
            const pathParams = {
                "{namespaceName}": enableSourceEventTypesRequest.namespaceName,
                "{sourceName}": enableSourceEventTypesRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": enableSourceEventTypesRequest.opcRetryToken,
                "opc-request-id": enableSourceEventTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/enableEventTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableSourceEventTypesRequest.enableEventTypeDetails, "EventTypeDetails", models.EventTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, enableSourceEventTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API estimates the size of data to be purged based based on time interval, purge query etc.
     *
     * @param EstimatePurgeDataSizeRequest
     * @return EstimatePurgeDataSizeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EstimatePurgeDataSize.ts.html |here} to see how to use EstimatePurgeDataSize API.
     */
    estimatePurgeDataSize(estimatePurgeDataSizeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#estimatePurgeDataSize.");
            const pathParams = {
                "{namespaceName}": estimatePurgeDataSizeRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": estimatePurgeDataSizeRequest.opcRequestId,
                "opc-retry-token": estimatePurgeDataSizeRequest.opcRetryToken,
                "if-match": estimatePurgeDataSizeRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/estimatePurgeDataSize",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(estimatePurgeDataSizeRequest.estimatePurgeDataSizeDetails, "EstimatePurgeDataSizeDetails", models.EstimatePurgeDataSizeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, estimatePurgeDataSizeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "estimatePurgeDataSizeResult",
                    bodyModel: "model.EstimatePurgeDataSizeResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API gives an active storage usage estimate for archived data to be recalled and the time range of such data.
     *
     * @param EstimateRecallDataSizeRequest
     * @return EstimateRecallDataSizeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EstimateRecallDataSize.ts.html |here} to see how to use EstimateRecallDataSize API.
     */
    estimateRecallDataSize(estimateRecallDataSizeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#estimateRecallDataSize.");
            const pathParams = {
                "{namespaceName}": estimateRecallDataSizeRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": estimateRecallDataSizeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/estimateRecallDataSize",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(estimateRecallDataSizeRequest.estimateRecallDataSizeDetails, "EstimateRecallDataSizeDetails", models.EstimateRecallDataSizeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, estimateRecallDataSizeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "estimateRecallDataSizeResult",
                    bodyModel: "model.EstimateRecallDataSizeResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API gives an active storage usage estimate for recalled data to be released and the time range of such data.
     *
     * @param EstimateReleaseDataSizeRequest
     * @return EstimateReleaseDataSizeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/EstimateReleaseDataSize.ts.html |here} to see how to use EstimateReleaseDataSize API.
     */
    estimateReleaseDataSize(estimateReleaseDataSizeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#estimateReleaseDataSize.");
            const pathParams = {
                "{namespaceName}": estimateReleaseDataSizeRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": estimateReleaseDataSizeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/estimateReleaseDataSize",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(estimateReleaseDataSizeRequest.estimateReleaseDataSizeDetails, "EstimateReleaseDataSizeDetails", models.EstimateReleaseDataSizeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, estimateReleaseDataSizeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "estimateReleaseDataSizeResult",
                    bodyModel: "model.EstimateReleaseDataSizeResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Exports all custom details of the specified sources, parsers, fields and labels, in zip format.
     *
     * @param ExportCustomContentRequest
     * @return ExportCustomContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ExportCustomContent.ts.html |here} to see how to use ExportCustomContent API.
     */
    exportCustomContent(exportCustomContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#exportCustomContent.");
            const pathParams = {
                "{namespaceName}": exportCustomContentRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": exportCustomContentRequest.opcRetryToken,
                "opc-request-id": exportCustomContentRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/contents/actions/exportCustomContent",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportCustomContentRequest.exportCustomContentDetails, "ExportContent", models.ExportContent.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, exportCustomContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Export data based on query. Endpoint returns a stream of data. Endpoint is synchronous. Queries must deliver first result within 60 seconds or calls are subject to timeout.
     * @param ExportQueryResultRequest
     * @return ExportQueryResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ExportQueryResult.ts.html |here} to see how to use ExportQueryResult API.
     */
    exportQueryResult(exportQueryResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#exportQueryResult.");
            const pathParams = {
                "{namespaceName}": exportQueryResultRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": exportQueryResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/export",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(exportQueryResultRequest.exportDetails, "ExportDetails", models.ExportDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, exportQueryResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Extracts the field paths from the example json or xml content.
     *
     * @param ExtractStructuredLogFieldPathsRequest
     * @return ExtractStructuredLogFieldPathsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ExtractStructuredLogFieldPaths.ts.html |here} to see how to use ExtractStructuredLogFieldPaths API.
     */
    extractStructuredLogFieldPaths(extractStructuredLogFieldPathsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#extractStructuredLogFieldPaths.");
            const pathParams = {
                "{namespaceName}": extractStructuredLogFieldPathsRequest.namespaceName
            };
            const queryParams = {
                "parserType": extractStructuredLogFieldPathsRequest.parserType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": extractStructuredLogFieldPathsRequest.opcRetryToken,
                "opc-request-id": extractStructuredLogFieldPathsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/actions/extractLogFieldPaths",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(extractStructuredLogFieldPathsRequest.loganParserDetails, "LogAnalyticsParser", models.LogAnalyticsParser.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, extractStructuredLogFieldPathsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "extractLogFieldResults",
                    bodyModel: "model.ExtractLogFieldResults",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Extracts the header paths from the example json or xml content.
     *
     * @param ExtractStructuredLogHeaderPathsRequest
     * @return ExtractStructuredLogHeaderPathsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ExtractStructuredLogHeaderPaths.ts.html |here} to see how to use ExtractStructuredLogHeaderPaths API.
     */
    extractStructuredLogHeaderPaths(extractStructuredLogHeaderPathsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#extractStructuredLogHeaderPaths.");
            const pathParams = {
                "{namespaceName}": extractStructuredLogHeaderPathsRequest.namespaceName
            };
            const queryParams = {
                "parserType": extractStructuredLogHeaderPathsRequest.parserType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": extractStructuredLogHeaderPathsRequest.opcRetryToken,
                "opc-request-id": extractStructuredLogHeaderPathsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/actions/extractLogHeaderPaths",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(extractStructuredLogHeaderPathsRequest.loganParserDetails, "LogAnalyticsParser", models.LogAnalyticsParser.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, extractStructuredLogHeaderPathsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "extractLogHeaderResults",
                    bodyModel: "model.ExtractLogHeaderResults",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Each filter specifies an operator, a field and one or more values to be inserted into the provided query as criteria.
     * @param FilterRequest
     * @return FilterResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/Filter.ts.html |here} to see how to use Filter API.
     */
    filter(filterRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#filter.");
            const pathParams = {
                "{namespaceName}": filterRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": filterRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/filter",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(filterRequest.filterDetails, "FilterDetails", models.FilterDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, filterRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "filterOutput",
                    bodyModel: "model.FilterOutput",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of source associations for entities in the specified compartment.
     *
     * @param GetAssociationSummaryRequest
     * @return GetAssociationSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetAssociationSummary.ts.html |here} to see how to use GetAssociationSummary API.
     */
    getAssociationSummary(getAssociationSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getAssociationSummary.");
            const pathParams = {
                "{namespaceName}": getAssociationSummaryRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": getAssociationSummaryRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getAssociationSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/associationSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getAssociationSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "associationSummaryReport",
                    bodyModel: "model.AssociationSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Extracts column names from the input SQL query.
     *
     * @param GetColumnNamesRequest
     * @return GetColumnNamesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetColumnNames.ts.html |here} to see how to use GetColumnNames API.
     */
    getColumnNames(getColumnNamesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getColumnNames.");
            const pathParams = {
                "{namespaceName}": getColumnNamesRequest.namespaceName
            };
            const queryParams = {
                "sqlQuery": getColumnNamesRequest.sqlQuery
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getColumnNamesRequest.opcRetryToken,
                "opc-request-id": getColumnNamesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/sqlColumnNames",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getColumnNamesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "columnNameCollection",
                    bodyModel: "model.ColumnNameCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns detailed information about the configuration work request with the specified id.
     *
     * @param GetConfigWorkRequestRequest
     * @return GetConfigWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetConfigWorkRequest.ts.html |here} to see how to use GetConfigWorkRequest API.
     */
    getConfigWorkRequest(getConfigWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getConfigWorkRequest.");
            const pathParams = {
                "{namespaceName}": getConfigWorkRequestRequest.namespaceName,
                "{workRequestId}": getConfigWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getConfigWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/configWorkRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConfigWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsConfigWorkRequest",
                    bodyModel: "model.LogAnalyticsConfigWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the field with the specified name.
     *
     * @param GetFieldRequest
     * @return GetFieldResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetField.ts.html |here} to see how to use GetField API.
     */
    getField(getFieldRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getField.");
            const pathParams = {
                "{namespaceName}": getFieldRequest.namespaceName,
                "{fieldName}": getFieldRequest.fieldName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getFieldRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/fields/{fieldName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getFieldRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsField",
                    bodyModel: "model.LogAnalyticsField",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of fields. You may optionally specify isShowDetail=true to view a summary of each field data type.
     *
     * @param GetFieldsSummaryRequest
     * @return GetFieldsSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetFieldsSummary.ts.html |here} to see how to use GetFieldsSummary API.
     */
    getFieldsSummary(getFieldsSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getFieldsSummary.");
            const pathParams = {
                "{namespaceName}": getFieldsSummaryRequest.namespaceName
            };
            const queryParams = {
                "isShowDetail": getFieldsSummaryRequest.isShowDetail
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getFieldsSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/fieldSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getFieldsSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fieldSummaryReport",
                    bodyModel: "model.FieldSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the label with the specified name.
     *
     * @param GetLabelRequest
     * @return GetLabelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLabel.ts.html |here} to see how to use GetLabel API.
     */
    getLabel(getLabelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLabel.");
            const pathParams = {
                "{namespaceName}": getLabelRequest.namespaceName,
                "{labelName}": getLabelRequest.labelName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLabelRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labels/{labelName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLabelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLabel",
                    bodyModel: "model.LogAnalyticsLabel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of labels.
     *
     * @param GetLabelSummaryRequest
     * @return GetLabelSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLabelSummary.ts.html |here} to see how to use GetLabelSummary API.
     */
    getLabelSummary(getLabelSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLabelSummary.");
            const pathParams = {
                "{namespaceName}": getLabelSummaryRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLabelSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labelSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLabelSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "labelSummaryReport",
                    bodyModel: "model.LabelSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve the log analytics enterprise manager bridge with the given id.
     * @param GetLogAnalyticsEmBridgeRequest
     * @return GetLogAnalyticsEmBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsEmBridge.ts.html |here} to see how to use GetLogAnalyticsEmBridge API.
     */
    getLogAnalyticsEmBridge(getLogAnalyticsEmBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEmBridge.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsEmBridgeRequest.namespaceName,
                "{logAnalyticsEmBridgeId}": getLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsEmBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsEmBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEmBridge",
                    bodyModel: "model.LogAnalyticsEmBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns log analytics enterprise manager bridges summary report.
     * @param GetLogAnalyticsEmBridgeSummaryRequest
     * @return GetLogAnalyticsEmBridgeSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsEmBridgeSummary.ts.html |here} to see how to use GetLogAnalyticsEmBridgeSummary API.
     */
    getLogAnalyticsEmBridgeSummary(getLogAnalyticsEmBridgeSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEmBridgeSummary.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsEmBridgeSummaryRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": getLogAnalyticsEmBridgeSummaryRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsEmBridgeSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/emBridgeSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsEmBridgeSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEmBridgeSummaryReport",
                    bodyModel: "model.LogAnalyticsEmBridgeSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns log analytics entities count summary report.
     * @param GetLogAnalyticsEntitiesSummaryRequest
     * @return GetLogAnalyticsEntitiesSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsEntitiesSummary.ts.html |here} to see how to use GetLogAnalyticsEntitiesSummary API.
     */
    getLogAnalyticsEntitiesSummary(getLogAnalyticsEntitiesSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntitiesSummary.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsEntitiesSummaryRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": getLogAnalyticsEntitiesSummaryRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsEntitiesSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/entitySummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsEntitiesSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntitySummaryReport",
                    bodyModel: "model.LogAnalyticsEntitySummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve the log analytics entity with the given id.
     * @param GetLogAnalyticsEntityRequest
     * @return GetLogAnalyticsEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsEntity.ts.html |here} to see how to use GetLogAnalyticsEntity API.
     */
    getLogAnalyticsEntity(getLogAnalyticsEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntity.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsEntityRequest.namespaceName,
                "{logAnalyticsEntityId}": getLogAnalyticsEntityRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsEntityRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsEntityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntity",
                    bodyModel: "model.LogAnalyticsEntity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve the log analytics entity type with the given name.
     * @param GetLogAnalyticsEntityTypeRequest
     * @return GetLogAnalyticsEntityTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsEntityType.ts.html |here} to see how to use GetLogAnalyticsEntityType API.
     */
    getLogAnalyticsEntityType(getLogAnalyticsEntityTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsEntityType.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsEntityTypeRequest.namespaceName,
                "{entityTypeName}": getLogAnalyticsEntityTypeRequest.entityTypeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsEntityTypeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsEntityTypeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntityType",
                    bodyModel: "model.LogAnalyticsEntityType",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the specified log group such as display name, description, defined tags, and free-form tags.
     *
     * @param GetLogAnalyticsLogGroupRequest
     * @return GetLogAnalyticsLogGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsLogGroup.ts.html |here} to see how to use GetLogAnalyticsLogGroup API.
     */
    getLogAnalyticsLogGroup(getLogAnalyticsLogGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsLogGroup.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsLogGroupRequest.namespaceName,
                "{logAnalyticsLogGroupId}": getLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsLogGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsLogGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLogGroup",
                    bodyModel: "model.LogAnalyticsLogGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of log groups in a compartment.
     *
     * @param GetLogAnalyticsLogGroupsSummaryRequest
     * @return GetLogAnalyticsLogGroupsSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsLogGroupsSummary.ts.html |here} to see how to use GetLogAnalyticsLogGroupsSummary API.
     */
    getLogAnalyticsLogGroupsSummary(getLogAnalyticsLogGroupsSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsLogGroupsSummary.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsLogGroupsSummaryRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": getLogAnalyticsLogGroupsSummaryRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsLogGroupsSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroupsSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsLogGroupsSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logGroupSummaryReport",
                    bodyModel: "model.LogGroupSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a configured object storage based collection rule by given id
     * @param GetLogAnalyticsObjectCollectionRuleRequest
     * @return GetLogAnalyticsObjectCollectionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use GetLogAnalyticsObjectCollectionRule API.
     */
    getLogAnalyticsObjectCollectionRule(getLogAnalyticsObjectCollectionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLogAnalyticsObjectCollectionRule.");
            const pathParams = {
                "{namespaceName}": getLogAnalyticsObjectCollectionRuleRequest.namespaceName,
                "{logAnalyticsObjectCollectionRuleId}": getLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLogAnalyticsObjectCollectionRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLogAnalyticsObjectCollectionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsObjectCollectionRule",
                    bodyModel: "model.LogAnalyticsObjectCollectionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the lookup with the specified name.
     *
     * @param GetLookupRequest
     * @return GetLookupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLookup.ts.html |here} to see how to use GetLookup API.
     */
    getLookup(getLookupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLookup.");
            const pathParams = {
                "{namespaceName}": getLookupRequest.namespaceName,
                "{lookupName}": getLookupRequest.lookupName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLookupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/{lookupName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLookupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLookup",
                    bodyModel: "model.LogAnalyticsLookup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of user created and oracle defined lookups.
     * @param GetLookupSummaryRequest
     * @return GetLookupSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetLookupSummary.ts.html |here} to see how to use GetLookupSummary API.
     */
    getLookupSummary(getLookupSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getLookupSummary.");
            const pathParams = {
                "{namespaceName}": getLookupSummaryRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLookupSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookupSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getLookupSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lookupSummaryReport",
                    bodyModel: "model.LookupSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API gets the namespace details of a tenancy already onboarded in Logging Analytics Application
     *
     * @param GetNamespaceRequest
     * @return GetNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetNamespace.ts.html |here} to see how to use GetNamespace API.
     */
    getNamespace(getNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getNamespace.");
            const pathParams = {
                "{namespaceName}": getNamespaceRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getNamespaceRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getNamespaceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespace",
                    bodyModel: "model.Namespace",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the parser with the specified name.
     *
     * @param GetParserRequest
     * @return GetParserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetParser.ts.html |here} to see how to use GetParser API.
     */
    getParser(getParserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getParser.");
            const pathParams = {
                "{namespaceName}": getParserRequest.namespaceName,
                "{parserName}": getParserRequest.parserName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getParserRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/{parserName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getParserRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsParser",
                    bodyModel: "model.LogAnalyticsParser",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of parsers.
     *
     * @param GetParserSummaryRequest
     * @return GetParserSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetParserSummary.ts.html |here} to see how to use GetParserSummary API.
     */
    getParserSummary(getParserSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getParserSummary.");
            const pathParams = {
                "{namespaceName}": getParserSummaryRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getParserSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsersSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getParserSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "parserSummaryReport",
                    bodyModel: "model.ParserSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the intermediate results for a query that was specified to run asynchronously if the query has not completed,
     * otherwise the final query results identified by a queryWorkRequestId returned when submitting the query execute asynchronously.
     *
     * @param GetQueryResultRequest
     * @return GetQueryResultResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetQueryResult.ts.html |here} to see how to use GetQueryResult API.
     */
    getQueryResult(getQueryResultRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getQueryResult.");
            const pathParams = {
                "{namespaceName}": getQueryResultRequest.namespaceName
            };
            const queryParams = {
                "workRequestId": getQueryResultRequest.workRequestId,
                "page": getQueryResultRequest.page,
                "limit": getQueryResultRequest.limit,
                "shouldIncludeColumns": getQueryResultRequest.shouldIncludeColumns,
                "shouldIncludeFields": getQueryResultRequest.shouldIncludeFields,
                "outputMode": getQueryResultRequest.outputMode
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getQueryResultRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/query",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getQueryResultRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryAggregation",
                    bodyModel: "model.QueryAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Retrieve work request details by workRequestId. This endpoint can be polled for status tracking of work request. Clients should poll using the interval returned in the retry-after header.
     * @param GetQueryWorkRequestRequest
     * @return GetQueryWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetQueryWorkRequest.ts.html |here} to see how to use GetQueryWorkRequest API.
     */
    getQueryWorkRequest(getQueryWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getQueryWorkRequest.");
            const pathParams = {
                "{namespaceName}": getQueryWorkRequestRequest.namespaceName,
                "{workRequestId}": getQueryWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getQueryWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getQueryWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryWorkRequest",
                    bodyModel: "model.QueryWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get the scheduled task for the specified task identifier.
     * @param GetScheduledTaskRequest
     * @return GetScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetScheduledTask.ts.html |here} to see how to use GetScheduledTask API.
     */
    getScheduledTask(getScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getScheduledTask.");
            const pathParams = {
                "{namespaceName}": getScheduledTaskRequest.namespaceName,
                "{scheduledTaskId}": getScheduledTaskRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getScheduledTaskRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTask",
                    bodyModel: "model.ScheduledTask",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets detailed information about the source with the specified name.
     *
     * @param GetSourceRequest
     * @return GetSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetSource.ts.html |here} to see how to use GetSource API.
     */
    getSource(getSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getSource.");
            const pathParams = {
                "{namespaceName}": getSourceRequest.namespaceName,
                "{sourceName}": getSourceRequest.sourceName
            };
            const queryParams = {
                "compartmentId": getSourceRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSourceRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSourceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsSource",
                    bodyModel: "model.LogAnalyticsSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the count of sources.
     *
     * @param GetSourceSummaryRequest
     * @return GetSourceSummaryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetSourceSummary.ts.html |here} to see how to use GetSourceSummary API.
     */
    getSourceSummary(getSourceSummaryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getSourceSummary.");
            const pathParams = {
                "{namespaceName}": getSourceSummaryRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSourceSummaryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sourceSummary",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getSourceSummaryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sourceSummaryReport",
                    bodyModel: "model.SourceSummaryReport",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API gets the storage configuration of a tenancy
     *
     * @param GetStorageRequest
     * @return GetStorageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetStorage.ts.html |here} to see how to use GetStorage API.
     */
    getStorage(getStorageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getStorage.");
            const pathParams = {
                "{namespaceName}": getStorageRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStorageRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getStorageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "storage",
                    bodyModel: "model.Storage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API gets storage usage information of a tenancy.  Storage usage information includes active, archived or recalled
     * data.  The unit of return data is in bytes.
     *
     * @param GetStorageUsageRequest
     * @return GetStorageUsageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetStorageUsage.ts.html |here} to see how to use GetStorageUsage API.
     */
    getStorageUsage(getStorageUsageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getStorageUsage.");
            const pathParams = {
                "{namespaceName}": getStorageUsageRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStorageUsageRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/usage",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getStorageUsageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "storageUsage",
                    bodyModel: "model.StorageUsage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API returns work request details specified by {workRequestId}. This API can be polled for status tracking of
     * work request.  Clients should poll using the interval returned in retry-after header.
     *
     * @param GetStorageWorkRequestRequest
     * @return GetStorageWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetStorageWorkRequest.ts.html |here} to see how to use GetStorageWorkRequest API.
     */
    getStorageWorkRequest(getStorageWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getStorageWorkRequest.");
            const pathParams = {
                "{workRequestId}": getStorageWorkRequestRequest.workRequestId,
                "{namespaceName}": getStorageWorkRequestRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getStorageWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storageWorkRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getStorageWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "storageWorkRequest",
                    bodyModel: "model.StorageWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets an On-Demand Upload info by reference.
     * @param GetUploadRequest
     * @return GetUploadResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetUpload.ts.html |here} to see how to use GetUpload API.
     */
    getUpload(getUploadRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getUpload.");
            const pathParams = {
                "{namespaceName}": getUploadRequest.namespaceName,
                "{uploadReference}": getUploadRequest.uploadReference
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getUploadRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getUploadRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "upload",
                    bodyModel: "model.Upload",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the status of the work request with the given ID.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#getWorkRequest.");
            const pathParams = {
                "{namespaceName}": getWorkRequestRequest.namespaceName,
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getWorkRequestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Imports the specified custom content from the input in zip format.
     *
     * @param ImportCustomContentRequest
     * @return ImportCustomContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ImportCustomContent.ts.html |here} to see how to use ImportCustomContent API.
     */
    importCustomContent(importCustomContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#importCustomContent.");
            const pathParams = {
                "{namespaceName}": importCustomContentRequest.namespaceName
            };
            const queryParams = {
                "isOverwrite": importCustomContentRequest.isOverwrite
            };
            let headerParams = {
                "opc-retry-token": importCustomContentRequest.opcRetryToken,
                "opc-request-id": importCustomContentRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/contents/actions/importCustomContent",
                method: "POST",
                bodyContent: importCustomContentRequest.importCustomContentFileBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, importCustomContentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsImportCustomContent",
                    bodyModel: "model.LogAnalyticsImportCustomContent",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the entities in the specified compartment which are (in)eligible for association with this source.
     *
     * @param ListAssociableEntitiesRequest
     * @return ListAssociableEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListAssociableEntities.ts.html |here} to see how to use ListAssociableEntities API.
     */
    listAssociableEntities(listAssociableEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listAssociableEntities.");
            const pathParams = {
                "{namespaceName}": listAssociableEntitiesRequest.namespaceName,
                "{sourceName}": listAssociableEntitiesRequest.sourceName
            };
            const queryParams = {
                "compartmentId": listAssociableEntitiesRequest.compartmentId,
                "type": listAssociableEntitiesRequest.type,
                "searchText": listAssociableEntitiesRequest.searchText,
                "limit": listAssociableEntitiesRequest.limit,
                "page": listAssociableEntitiesRequest.page,
                "sortBy": listAssociableEntitiesRequest.sortBy,
                "sortOrder": listAssociableEntitiesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssociableEntitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/associableEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAssociableEntitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "associableEntityCollection",
                    bodyModel: "model.AssociableEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the association details of entities in the specified compartment that are associated with at least one source.
     *
     * @param ListAssociatedEntitiesRequest
     * @return ListAssociatedEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListAssociatedEntities.ts.html |here} to see how to use ListAssociatedEntities API.
     */
    listAssociatedEntities(listAssociatedEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listAssociatedEntities.");
            const pathParams = {
                "{namespaceName}": listAssociatedEntitiesRequest.namespaceName
            };
            const queryParams = {
                "entityId": listAssociatedEntitiesRequest.entityId,
                "entityType": listAssociatedEntitiesRequest.entityType,
                "entityTypeDisplayName": listAssociatedEntitiesRequest.entityTypeDisplayName,
                "limit": listAssociatedEntitiesRequest.limit,
                "page": listAssociatedEntitiesRequest.page,
                "sortOrder": listAssociatedEntitiesRequest.sortOrder,
                "sortBy": listAssociatedEntitiesRequest.sortBy,
                "compartmentId": listAssociatedEntitiesRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAssociatedEntitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/associatedEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAssociatedEntitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsAssociatedEntityCollection",
                    bodyModel: "model.LogAnalyticsAssociatedEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information related to auto association for the source with the specified name.
     *
     * @param ListAutoAssociationsRequest
     * @return ListAutoAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListAutoAssociations.ts.html |here} to see how to use ListAutoAssociations API.
     */
    listAutoAssociations(listAutoAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listAutoAssociations.");
            const pathParams = {
                "{namespaceName}": listAutoAssociationsRequest.namespaceName,
                "{sourceName}": listAutoAssociationsRequest.sourceName
            };
            const queryParams = {
                "limit": listAutoAssociationsRequest.limit,
                "page": listAutoAssociationsRequest.page,
                "sortBy": listAutoAssociationsRequest.sortBy,
                "sortOrder": listAutoAssociationsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listAutoAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/autoAssociations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listAutoAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "autoAssociationCollection",
                    bodyModel: "model.AutoAssociationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of configuration work requests such as association or lookup operations, containing detailed information about them. You may paginate or limit the number of results.
     *
     * @param ListConfigWorkRequestsRequest
     * @return ListConfigWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListConfigWorkRequests.ts.html |here} to see how to use ListConfigWorkRequests API.
     */
    listConfigWorkRequests(listConfigWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listConfigWorkRequests.");
            const pathParams = {
                "{namespaceName}": listConfigWorkRequestsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listConfigWorkRequestsRequest.compartmentId,
                "sortOrder": listConfigWorkRequestsRequest.sortOrder,
                "sortBy": listConfigWorkRequestsRequest.sortBy,
                "limit": listConfigWorkRequestsRequest.limit,
                "page": listConfigWorkRequestsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/configWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listConfigWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsConfigWorkRequestCollection",
                    bodyModel: "model.LogAnalyticsConfigWorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a list of log analytics entities associated with input source log analytics entity.
     * @param ListEntityAssociationsRequest
     * @return ListEntityAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListEntityAssociations.ts.html |here} to see how to use ListEntityAssociations API.
     */
    listEntityAssociations(listEntityAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listEntityAssociations.");
            const pathParams = {
                "{namespaceName}": listEntityAssociationsRequest.namespaceName,
                "{logAnalyticsEntityId}": listEntityAssociationsRequest.logAnalyticsEntityId
            };
            const queryParams = {
                "directOrAllAssociations": listEntityAssociationsRequest.directOrAllAssociations,
                "limit": listEntityAssociationsRequest.limit,
                "page": listEntityAssociationsRequest.page,
                "sortOrder": listEntityAssociationsRequest.sortOrder,
                "sortBy": listEntityAssociationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEntityAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/entityAssociations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listEntityAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntityCollection",
                    bodyModel: "model.LogAnalyticsEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of source associations for the specified entity.
     *
     * @param ListEntitySourceAssociationsRequest
     * @return ListEntitySourceAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListEntitySourceAssociations.ts.html |here} to see how to use ListEntitySourceAssociations API.
     */
    listEntitySourceAssociations(listEntitySourceAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listEntitySourceAssociations.");
            const pathParams = {
                "{namespaceName}": listEntitySourceAssociationsRequest.namespaceName
            };
            const queryParams = {
                "entityId": listEntitySourceAssociationsRequest.entityId,
                "entityType": listEntitySourceAssociationsRequest.entityType,
                "entityTypeDisplayName": listEntitySourceAssociationsRequest.entityTypeDisplayName,
                "lifeCycleState": listEntitySourceAssociationsRequest.lifeCycleState,
                "isShowTotal": listEntitySourceAssociationsRequest.isShowTotal,
                "limit": listEntitySourceAssociationsRequest.limit,
                "page": listEntitySourceAssociationsRequest.page,
                "sortOrder": listEntitySourceAssociationsRequest.sortOrder,
                "sortBy": listEntitySourceAssociationsRequest.sortBy,
                "compartmentId": listEntitySourceAssociationsRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEntitySourceAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/entityAssociations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listEntitySourceAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsAssociationCollection",
                    bodyModel: "model.LogAnalyticsAssociationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of log fields, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by specifying various options including parser and source names.
     *
     * @param ListFieldsRequest
     * @return ListFieldsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListFields.ts.html |here} to see how to use ListFields API.
     */
    listFields(listFieldsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listFields.");
            const pathParams = {
                "{namespaceName}": listFieldsRequest.namespaceName
            };
            const queryParams = {
                "isMatchAll": listFieldsRequest.isMatchAll,
                "sourceIds": listFieldsRequest.sourceIds,
                "sourceNames": listFieldsRequest.sourceNames,
                "parserType": listFieldsRequest.parserType,
                "parserIds": listFieldsRequest.parserIds,
                "parserNames": listFieldsRequest.parserNames,
                "isIncludeParser": listFieldsRequest.isIncludeParser,
                "filter": listFieldsRequest.filter,
                "limit": listFieldsRequest.limit,
                "page": listFieldsRequest.page,
                "sortOrder": listFieldsRequest.sortOrder,
                "sortBy": listFieldsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listFieldsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/fields",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listFieldsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsFieldCollection",
                    bodyModel: "model.LogAnalyticsFieldCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the available problem priorities that could be associated with a label.
     *
     * @param ListLabelPrioritiesRequest
     * @return ListLabelPrioritiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLabelPriorities.ts.html |here} to see how to use ListLabelPriorities API.
     */
    listLabelPriorities(listLabelPrioritiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLabelPriorities.");
            const pathParams = {
                "{namespaceName}": listLabelPrioritiesRequest.namespaceName
            };
            const queryParams = {
                "limit": listLabelPrioritiesRequest.limit,
                "page": listLabelPrioritiesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLabelPrioritiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labelPriorities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLabelPrioritiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "labelPriorityCollection",
                    bodyModel: "model.LabelPriorityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists sources using the label, along with configuration details like base field, operator and condition.
     *
     * @param ListLabelSourceDetailsRequest
     * @return ListLabelSourceDetailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLabelSourceDetails.ts.html |here} to see how to use ListLabelSourceDetails API.
     */
    listLabelSourceDetails(listLabelSourceDetailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLabelSourceDetails.");
            const pathParams = {
                "{namespaceName}": listLabelSourceDetailsRequest.namespaceName
            };
            const queryParams = {
                "labelName": listLabelSourceDetailsRequest.labelName,
                "limit": listLabelSourceDetailsRequest.limit,
                "page": listLabelSourceDetailsRequest.page,
                "sortOrder": listLabelSourceDetailsRequest.sortOrder,
                "labelSourceSortBy": listLabelSourceDetailsRequest.labelSourceSortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLabelSourceDetailsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labelSourceDetails",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLabelSourceDetailsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "labelSourceCollection",
                    bodyModel: "model.LabelSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of labels, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as label name, display name, description and priority.
     *
     * @param ListLabelsRequest
     * @return ListLabelsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLabels.ts.html |here} to see how to use ListLabels API.
     */
    listLabels(listLabelsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLabels.");
            const pathParams = {
                "{namespaceName}": listLabelsRequest.namespaceName
            };
            const queryParams = {
                "labelName": listLabelsRequest.labelName,
                "labelDisplayText": listLabelsRequest.labelDisplayText,
                "isSystem": listLabelsRequest.isSystem,
                "labelPriority": listLabelsRequest.labelPriority,
                "isCountPop": listLabelsRequest.isCountPop,
                "isAliasPop": listLabelsRequest.isAliasPop,
                "limit": listLabelsRequest.limit,
                "page": listLabelsRequest.page,
                "sortOrder": listLabelsRequest.sortOrder,
                "labelSortBy": listLabelsRequest.labelSortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLabelsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labels",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLabelsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLabelCollection",
                    bodyModel: "model.LogAnalyticsLabelCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a list of log analytics enterprise manager bridges.
     * @param ListLogAnalyticsEmBridgesRequest
     * @return ListLogAnalyticsEmBridgesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogAnalyticsEmBridges.ts.html |here} to see how to use ListLogAnalyticsEmBridges API.
     */
    listLogAnalyticsEmBridges(listLogAnalyticsEmBridgesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEmBridges.");
            const pathParams = {
                "{namespaceName}": listLogAnalyticsEmBridgesRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listLogAnalyticsEmBridgesRequest.compartmentId,
                "displayName": listLogAnalyticsEmBridgesRequest.displayName,
                "lifecycleState": listLogAnalyticsEmBridgesRequest.lifecycleState,
                "lifecycleDetailsContains": listLogAnalyticsEmBridgesRequest.lifecycleDetailsContains,
                "importStatus": listLogAnalyticsEmBridgesRequest.importStatus,
                "limit": listLogAnalyticsEmBridgesRequest.limit,
                "page": listLogAnalyticsEmBridgesRequest.page,
                "sortOrder": listLogAnalyticsEmBridgesRequest.sortOrder,
                "sortBy": listLogAnalyticsEmBridgesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogAnalyticsEmBridgesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogAnalyticsEmBridgesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEmBridgeCollection",
                    bodyModel: "model.LogAnalyticsEmBridgeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a list of log analytics entities.
     * @param ListLogAnalyticsEntitiesRequest
     * @return ListLogAnalyticsEntitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogAnalyticsEntities.ts.html |here} to see how to use ListLogAnalyticsEntities API.
     */
    listLogAnalyticsEntities(listLogAnalyticsEntitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEntities.");
            const pathParams = {
                "{namespaceName}": listLogAnalyticsEntitiesRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listLogAnalyticsEntitiesRequest.compartmentId,
                "name": listLogAnalyticsEntitiesRequest.name,
                "nameContains": listLogAnalyticsEntitiesRequest.nameContains,
                "entityTypeName": listLogAnalyticsEntitiesRequest.entityTypeName,
                "cloudResourceId": listLogAnalyticsEntitiesRequest.cloudResourceId,
                "lifecycleState": listLogAnalyticsEntitiesRequest.lifecycleState,
                "lifecycleDetailsContains": listLogAnalyticsEntitiesRequest.lifecycleDetailsContains,
                "isManagementAgentIdNull": listLogAnalyticsEntitiesRequest.isManagementAgentIdNull,
                "hostname": listLogAnalyticsEntitiesRequest.hostname,
                "hostnameContains": listLogAnalyticsEntitiesRequest.hostnameContains,
                "sourceId": listLogAnalyticsEntitiesRequest.sourceId,
                "creationSourceType": listLogAnalyticsEntitiesRequest.creationSourceType,
                "creationSourceDetails": listLogAnalyticsEntitiesRequest.creationSourceDetails,
                "limit": listLogAnalyticsEntitiesRequest.limit,
                "page": listLogAnalyticsEntitiesRequest.page,
                "sortOrder": listLogAnalyticsEntitiesRequest.sortOrder,
                "sortBy": listLogAnalyticsEntitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogAnalyticsEntitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogAnalyticsEntitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntityCollection",
                    bodyModel: "model.LogAnalyticsEntityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a list of log analytics entity types.
     * @param ListLogAnalyticsEntityTypesRequest
     * @return ListLogAnalyticsEntityTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogAnalyticsEntityTypes.ts.html |here} to see how to use ListLogAnalyticsEntityTypes API.
     */
    listLogAnalyticsEntityTypes(listLogAnalyticsEntityTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsEntityTypes.");
            const pathParams = {
                "{namespaceName}": listLogAnalyticsEntityTypesRequest.namespaceName
            };
            const queryParams = {
                "name": listLogAnalyticsEntityTypesRequest.name,
                "nameContains": listLogAnalyticsEntityTypesRequest.nameContains,
                "cloudType": listLogAnalyticsEntityTypesRequest.cloudType,
                "lifecycleState": listLogAnalyticsEntityTypesRequest.lifecycleState,
                "limit": listLogAnalyticsEntityTypesRequest.limit,
                "page": listLogAnalyticsEntityTypesRequest.page,
                "sortOrder": listLogAnalyticsEntityTypesRequest.sortOrder,
                "sortBy": listLogAnalyticsEntityTypesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogAnalyticsEntityTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogAnalyticsEntityTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntityTypeCollection",
                    bodyModel: "model.LogAnalyticsEntityTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of log groups in a compartment. You may limit the number of log groups, provide sorting options, and filter the results by specifying a display name.
     *
     * @param ListLogAnalyticsLogGroupsRequest
     * @return ListLogAnalyticsLogGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogAnalyticsLogGroups.ts.html |here} to see how to use ListLogAnalyticsLogGroups API.
     */
    listLogAnalyticsLogGroups(listLogAnalyticsLogGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsLogGroups.");
            const pathParams = {
                "{namespaceName}": listLogAnalyticsLogGroupsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listLogAnalyticsLogGroupsRequest.compartmentId,
                "displayName": listLogAnalyticsLogGroupsRequest.displayName,
                "limit": listLogAnalyticsLogGroupsRequest.limit,
                "page": listLogAnalyticsLogGroupsRequest.page,
                "sortOrder": listLogAnalyticsLogGroupsRequest.sortOrder,
                "sortBy": listLogAnalyticsLogGroupsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogAnalyticsLogGroupsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogAnalyticsLogGroupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLogGroupSummaryCollection",
                    bodyModel: "model.LogAnalyticsLogGroupSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of collection rules.
     * @param ListLogAnalyticsObjectCollectionRulesRequest
     * @return ListLogAnalyticsObjectCollectionRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogAnalyticsObjectCollectionRules.ts.html |here} to see how to use ListLogAnalyticsObjectCollectionRules API.
     */
    listLogAnalyticsObjectCollectionRules(listLogAnalyticsObjectCollectionRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogAnalyticsObjectCollectionRules.");
            const pathParams = {
                "{namespaceName}": listLogAnalyticsObjectCollectionRulesRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listLogAnalyticsObjectCollectionRulesRequest.compartmentId,
                "name": listLogAnalyticsObjectCollectionRulesRequest.name,
                "lifecycleState": listLogAnalyticsObjectCollectionRulesRequest.lifecycleState,
                "limit": listLogAnalyticsObjectCollectionRulesRequest.limit,
                "page": listLogAnalyticsObjectCollectionRulesRequest.page,
                "sortOrder": listLogAnalyticsObjectCollectionRulesRequest.sortOrder,
                "sortBy": listLogAnalyticsObjectCollectionRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogAnalyticsObjectCollectionRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogAnalyticsObjectCollectionRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsObjectCollectionRuleCollection",
                    bodyModel: "model.LogAnalyticsObjectCollectionRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API returns a list of log sets.
     *
     * @param ListLogSetsRequest
     * @return ListLogSetsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLogSets.ts.html |here} to see how to use ListLogSets API.
     */
    listLogSets(listLogSetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLogSets.");
            const pathParams = {
                "{namespaceName}": listLogSetsRequest.namespaceName
            };
            const queryParams = {
                "limit": listLogSetsRequest.limit,
                "page": listLogSetsRequest.page,
                "sortOrder": listLogSetsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLogSetsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/logSets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLogSetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logSetCollection",
                    bodyModel: "model.LogSetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of lookups, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as lookup name, description and type.
     *
     * @param ListLookupsRequest
     * @return ListLookupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListLookups.ts.html |here} to see how to use ListLookups API.
     */
    listLookups(listLookupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listLookups.");
            const pathParams = {
                "{namespaceName}": listLookupsRequest.namespaceName
            };
            const queryParams = {
                "lookupDisplayText": listLookupsRequest.lookupDisplayText,
                "type": listLookupsRequest.type,
                "isSystem": listLookupsRequest.isSystem,
                "sortBy": listLookupsRequest.sortBy,
                "status": listLookupsRequest.status,
                "isHideSpecial": listLookupsRequest.isHideSpecial,
                "limit": listLookupsRequest.limit,
                "page": listLookupsRequest.page,
                "sortOrder": listLookupsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLookupsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listLookupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLookupCollection",
                    bodyModel: "model.LogAnalyticsLookupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the types of log sources supported.
     *
     * @param ListMetaSourceTypesRequest
     * @return ListMetaSourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListMetaSourceTypes.ts.html |here} to see how to use ListMetaSourceTypes API.
     */
    listMetaSourceTypes(listMetaSourceTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listMetaSourceTypes.");
            const pathParams = {
                "{namespaceName}": listMetaSourceTypesRequest.namespaceName
            };
            const queryParams = {
                "limit": listMetaSourceTypesRequest.limit,
                "page": listMetaSourceTypesRequest.page,
                "sortBy": listMetaSourceTypesRequest.sortBy,
                "sortOrder": listMetaSourceTypesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMetaSourceTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sourceMetaTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listMetaSourceTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsMetaSourceTypeCollection",
                    bodyModel: "model.LogAnalyticsMetaSourceTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Given a tenancy OCID, this API returns the namespace of the tenancy if it is valid and subscribed to the region.  The
     * result also indicates if the tenancy is onboarded with Logging Analytics.
     *
     * @param ListNamespacesRequest
     * @return ListNamespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListNamespaces.ts.html |here} to see how to use ListNamespaces API.
     */
    listNamespaces(listNamespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listNamespaces.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listNamespacesRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listNamespacesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listNamespacesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "namespaceCollection",
                    bodyModel: "model.NamespaceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the parser functions defined for the specified parser.
     *
     * @param ListParserFunctionsRequest
     * @return ListParserFunctionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListParserFunctions.ts.html |here} to see how to use ListParserFunctions API.
     */
    listParserFunctions(listParserFunctionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listParserFunctions.");
            const pathParams = {
                "{namespaceName}": listParserFunctionsRequest.namespaceName
            };
            const queryParams = {
                "parserName": listParserFunctionsRequest.parserName,
                "limit": listParserFunctionsRequest.limit,
                "page": listParserFunctionsRequest.page,
                "sortBy": listParserFunctionsRequest.sortBy,
                "sortOrder": listParserFunctionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listParserFunctionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parserFunctions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listParserFunctionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsParserFunctionCollection",
                    bodyModel: "model.LogAnalyticsParserFunctionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the parser meta plugins available for defining parser functions.
     *
     * @param ListParserMetaPluginsRequest
     * @return ListParserMetaPluginsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListParserMetaPlugins.ts.html |here} to see how to use ListParserMetaPlugins API.
     */
    listParserMetaPlugins(listParserMetaPluginsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listParserMetaPlugins.");
            const pathParams = {
                "{namespaceName}": listParserMetaPluginsRequest.namespaceName
            };
            const queryParams = {
                "limit": listParserMetaPluginsRequest.limit,
                "page": listParserMetaPluginsRequest.page,
                "sortBy": listParserMetaPluginsRequest.sortBy,
                "sortOrder": listParserMetaPluginsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listParserMetaPluginsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parserMetaPlugins",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listParserMetaPluginsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsParserMetaPluginCollection",
                    bodyModel: "model.LogAnalyticsParserMetaPluginCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of parsers, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as parser name, type, display name and description.
     *
     * @param ListParsersRequest
     * @return ListParsersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListParsers.ts.html |here} to see how to use ListParsers API.
     */
    listParsers(listParsersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listParsers.");
            const pathParams = {
                "{namespaceName}": listParsersRequest.namespaceName
            };
            const queryParams = {
                "isMatchAll": listParsersRequest.isMatchAll,
                "sourceType": listParsersRequest.sourceType,
                "parserName": listParsersRequest.parserName,
                "parserDisplayText": listParsersRequest.parserDisplayText,
                "parserType": listParsersRequest.parserType,
                "isSystem": listParsersRequest.isSystem,
                "limit": listParsersRequest.limit,
                "page": listParsersRequest.page,
                "sortOrder": listParsersRequest.sortOrder,
                "sortBy": listParsersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listParsersRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listParsersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsParserCollection",
                    bodyModel: "model.LogAnalyticsParserCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * List active asynchronous queries.
     * @param ListQueryWorkRequestsRequest
     * @return ListQueryWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListQueryWorkRequests.ts.html |here} to see how to use ListQueryWorkRequests API.
     */
    listQueryWorkRequests(listQueryWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listQueryWorkRequests.");
            const pathParams = {
                "{namespaceName}": listQueryWorkRequestsRequest.namespaceName
            };
            const queryParams = {
                "mode": listQueryWorkRequestsRequest.mode,
                "compartmentId": listQueryWorkRequestsRequest.compartmentId,
                "limit": listQueryWorkRequestsRequest.limit,
                "page": listQueryWorkRequestsRequest.page,
                "sortOrder": listQueryWorkRequestsRequest.sortOrder,
                "sortBy": listQueryWorkRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listQueryWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/queryWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listQueryWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryWorkRequestCollection",
                    bodyModel: "model.QueryWorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API returns the list of recalled data of a tenancy.
     *
     * @param ListRecalledDataRequest
     * @return ListRecalledDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListRecalledData.ts.html |here} to see how to use ListRecalledData API.
     */
    listRecalledData(listRecalledDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listRecalledData.");
            const pathParams = {
                "{namespaceName}": listRecalledDataRequest.namespaceName
            };
            const queryParams = {
                "limit": listRecalledDataRequest.limit,
                "page": listRecalledDataRequest.page,
                "sortBy": listRecalledDataRequest.sortBy,
                "sortOrder": listRecalledDataRequest.sortOrder,
                "timeDataStartedGreaterThanOrEqual": listRecalledDataRequest.timeDataStartedGreaterThanOrEqual,
                "timeDataEndedLessThan": listRecalledDataRequest.timeDataEndedLessThan
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRecalledDataRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/recalledData",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRecalledDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recalledDataCollection",
                    bodyModel: "model.RecalledDataCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists scheduled tasks.
     * @param ListScheduledTasksRequest
     * @return ListScheduledTasksResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListScheduledTasks.ts.html |here} to see how to use ListScheduledTasks API.
     */
    listScheduledTasks(listScheduledTasksRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listScheduledTasks.");
            const pathParams = {
                "{namespaceName}": listScheduledTasksRequest.namespaceName
            };
            const queryParams = {
                "taskType": listScheduledTasksRequest.taskType,
                "compartmentId": listScheduledTasksRequest.compartmentId,
                "limit": listScheduledTasksRequest.limit,
                "page": listScheduledTasksRequest.page,
                "displayName": listScheduledTasksRequest.displayName,
                "sortOrder": listScheduledTasksRequest.sortOrder,
                "sortBy": listScheduledTasksRequest.sortBy,
                "savedSearchId": listScheduledTasksRequest.savedSearchId,
                "displayNameContains": listScheduledTasksRequest.displayNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listScheduledTasksRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listScheduledTasksRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTaskCollection",
                    bodyModel: "model.ScheduledTaskCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of entity associations in the input compartment for the specified source.
     *
     * @param ListSourceAssociationsRequest
     * @return ListSourceAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourceAssociations.ts.html |here} to see how to use ListSourceAssociations API.
     */
    listSourceAssociations(listSourceAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourceAssociations.");
            const pathParams = {
                "{namespaceName}": listSourceAssociationsRequest.namespaceName
            };
            const queryParams = {
                "sourceName": listSourceAssociationsRequest.sourceName,
                "entityId": listSourceAssociationsRequest.entityId,
                "lifeCycleState": listSourceAssociationsRequest.lifeCycleState,
                "isShowTotal": listSourceAssociationsRequest.isShowTotal,
                "compartmentId": listSourceAssociationsRequest.compartmentId,
                "limit": listSourceAssociationsRequest.limit,
                "page": listSourceAssociationsRequest.page,
                "sortOrder": listSourceAssociationsRequest.sortOrder,
                "sortBy": listSourceAssociationsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourceAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sourceAssociations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourceAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsAssociationCollection",
                    bodyModel: "model.LogAnalyticsAssociationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the event types mapped to the source with the specified name. The event type string could be the fully qualified name or a prefix that matches the event type.
     *
     * @param ListSourceEventTypesRequest
     * @return ListSourceEventTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourceEventTypes.ts.html |here} to see how to use ListSourceEventTypes API.
     */
    listSourceEventTypes(listSourceEventTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourceEventTypes.");
            const pathParams = {
                "{namespaceName}": listSourceEventTypesRequest.namespaceName,
                "{sourceName}": listSourceEventTypesRequest.sourceName
            };
            const queryParams = {
                "displayText": listSourceEventTypesRequest.displayText,
                "isSystem": listSourceEventTypesRequest.isSystem,
                "isEnabled": listSourceEventTypesRequest.isEnabled,
                "limit": listSourceEventTypesRequest.limit,
                "page": listSourceEventTypesRequest.page,
                "sortBy": listSourceEventTypesRequest.sortBy,
                "sortOrder": listSourceEventTypesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourceEventTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/eventTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourceEventTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "eventTypeCollection",
                    bodyModel: "model.EventTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the extended field definitions for the source with the specified name.
     *
     * @param ListSourceExtendedFieldDefinitionsRequest
     * @return ListSourceExtendedFieldDefinitionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourceExtendedFieldDefinitions.ts.html |here} to see how to use ListSourceExtendedFieldDefinitions API.
     */
    listSourceExtendedFieldDefinitions(listSourceExtendedFieldDefinitionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourceExtendedFieldDefinitions.");
            const pathParams = {
                "{namespaceName}": listSourceExtendedFieldDefinitionsRequest.namespaceName,
                "{sourceName}": listSourceExtendedFieldDefinitionsRequest.sourceName
            };
            const queryParams = {
                "limit": listSourceExtendedFieldDefinitionsRequest.limit,
                "page": listSourceExtendedFieldDefinitionsRequest.page,
                "sortBy": listSourceExtendedFieldDefinitionsRequest.sortBy,
                "sortOrder": listSourceExtendedFieldDefinitionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourceExtendedFieldDefinitionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/extendedFieldDefinitions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourceExtendedFieldDefinitionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsSourceExtendedFieldDefinitionCollection",
                    bodyModel: "model.LogAnalyticsSourceExtendedFieldDefinitionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the supported conditional operators that could be used for matching log field values to generate a label. You may use patterns to specify a condition. If a log entry matches that condition, it is tagged with the corresponding label.
     *
     * @param ListSourceLabelOperatorsRequest
     * @return ListSourceLabelOperatorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourceLabelOperators.ts.html |here} to see how to use ListSourceLabelOperators API.
     */
    listSourceLabelOperators(listSourceLabelOperatorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourceLabelOperators.");
            const pathParams = {
                "{namespaceName}": listSourceLabelOperatorsRequest.namespaceName
            };
            const queryParams = {
                "limit": listSourceLabelOperatorsRequest.limit,
                "page": listSourceLabelOperatorsRequest.page,
                "sortBy": listSourceLabelOperatorsRequest.sortBy,
                "sortOrder": listSourceLabelOperatorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourceLabelOperatorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sourceLabelOperators",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourceLabelOperatorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLabelOperatorCollection",
                    bodyModel: "model.LogAnalyticsLabelOperatorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the functions that could be used to enrich log entries based on meaningful information extracted from the log fields.
     *
     * @param ListSourceMetaFunctionsRequest
     * @return ListSourceMetaFunctionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourceMetaFunctions.ts.html |here} to see how to use ListSourceMetaFunctions API.
     */
    listSourceMetaFunctions(listSourceMetaFunctionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourceMetaFunctions.");
            const pathParams = {
                "{namespaceName}": listSourceMetaFunctionsRequest.namespaceName
            };
            const queryParams = {
                "limit": listSourceMetaFunctionsRequest.limit,
                "page": listSourceMetaFunctionsRequest.page,
                "sortBy": listSourceMetaFunctionsRequest.sortBy,
                "sortOrder": listSourceMetaFunctionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourceMetaFunctionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sourceMetaFunctions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourceMetaFunctionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsMetaFunctionCollection",
                    bodyModel: "model.LogAnalyticsMetaFunctionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the source patterns for the source with the specified name.
     *
     * @param ListSourcePatternsRequest
     * @return ListSourcePatternsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSourcePatterns.ts.html |here} to see how to use ListSourcePatterns API.
     */
    listSourcePatterns(listSourcePatternsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSourcePatterns.");
            const pathParams = {
                "{namespaceName}": listSourcePatternsRequest.namespaceName,
                "{sourceName}": listSourcePatternsRequest.sourceName
            };
            const queryParams = {
                "isInclude": listSourcePatternsRequest.isInclude,
                "limit": listSourcePatternsRequest.limit,
                "page": listSourcePatternsRequest.page,
                "sortBy": listSourcePatternsRequest.sortBy,
                "sortOrder": listSourcePatternsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourcePatternsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/patterns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourcePatternsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsSourcePatternCollection",
                    bodyModel: "model.LogAnalyticsSourcePatternCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of sources, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as display name, description and entity type.
     *
     * @param ListSourcesRequest
     * @return ListSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSources.ts.html |here} to see how to use ListSources API.
     */
    listSources(listSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSources.");
            const pathParams = {
                "{namespaceName}": listSourcesRequest.namespaceName
            };
            const queryParams = {
                "entityType": listSourcesRequest.entityType,
                "sourceDisplayText": listSourcesRequest.sourceDisplayText,
                "isSystem": listSourcesRequest.isSystem,
                "isAutoAssociated": listSourcesRequest.isAutoAssociated,
                "sortOrder": listSourcesRequest.sortOrder,
                "sortBy": listSourcesRequest.sortBy,
                "limit": listSourcesRequest.limit,
                "page": listSourcesRequest.page,
                "name": listSourcesRequest.name,
                "isSimplified": listSourcesRequest.isSimplified,
                "compartmentId": listSourcesRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSourcesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSourcesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsSourceCollection",
                    bodyModel: "model.LogAnalyticsSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API returns the list of work request errors if any.
     * @param ListStorageWorkRequestErrorsRequest
     * @return ListStorageWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListStorageWorkRequestErrors.ts.html |here} to see how to use ListStorageWorkRequestErrors API.
     */
    listStorageWorkRequestErrors(listStorageWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listStorageWorkRequestErrors.");
            const pathParams = {
                "{workRequestId}": listStorageWorkRequestErrorsRequest.workRequestId,
                "{namespaceName}": listStorageWorkRequestErrorsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listStorageWorkRequestErrorsRequest.compartmentId,
                "limit": listStorageWorkRequestErrorsRequest.limit,
                "page": listStorageWorkRequestErrorsRequest.page,
                "sortOrder": listStorageWorkRequestErrorsRequest.sortOrder,
                "sortBy": listStorageWorkRequestErrorsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listStorageWorkRequestErrorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storageWorkRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listStorageWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API lists storage work requests.  Use query parameters to narrow down or sort the result list.
     *
     * @param ListStorageWorkRequestsRequest
     * @return ListStorageWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListStorageWorkRequests.ts.html |here} to see how to use ListStorageWorkRequests API.
     */
    listStorageWorkRequests(listStorageWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listStorageWorkRequests.");
            const pathParams = {
                "{namespaceName}": listStorageWorkRequestsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listStorageWorkRequestsRequest.compartmentId,
                "limit": listStorageWorkRequestsRequest.limit,
                "page": listStorageWorkRequestsRequest.page,
                "sortOrder": listStorageWorkRequestsRequest.sortOrder,
                "sortBy": listStorageWorkRequestsRequest.sortBy,
                "operationType": listStorageWorkRequestsRequest.operationType,
                "status": listStorageWorkRequestsRequest.status,
                "timeStarted": listStorageWorkRequestsRequest.timeStarted,
                "timeFinished": listStorageWorkRequestsRequest.timeFinished,
                "policyName": listStorageWorkRequestsRequest.policyName,
                "policyId": listStorageWorkRequestsRequest.policyId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listStorageWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storageWorkRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listStorageWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "storageWorkRequestCollection",
                    bodyModel: "model.StorageWorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of character encodings which are supported by on-demand upload.
     * @param ListSupportedCharEncodingsRequest
     * @return ListSupportedCharEncodingsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSupportedCharEncodings.ts.html |here} to see how to use ListSupportedCharEncodings API.
     */
    listSupportedCharEncodings(listSupportedCharEncodingsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSupportedCharEncodings.");
            const pathParams = {
                "{namespaceName}": listSupportedCharEncodingsRequest.namespaceName
            };
            const queryParams = {
                "limit": listSupportedCharEncodingsRequest.limit,
                "page": listSupportedCharEncodingsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSupportedCharEncodingsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/supportedCharEncodings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSupportedCharEncodingsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "charEncodingCollection",
                    bodyModel: "model.CharEncodingCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of timezones which are supported by on-demand upload.
     * @param ListSupportedTimezonesRequest
     * @return ListSupportedTimezonesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListSupportedTimezones.ts.html |here} to see how to use ListSupportedTimezones API.
     */
    listSupportedTimezones(listSupportedTimezonesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listSupportedTimezones.");
            const pathParams = {
                "{namespaceName}": listSupportedTimezonesRequest.namespaceName
            };
            const queryParams = {
                "limit": listSupportedTimezonesRequest.limit,
                "page": listSupportedTimezonesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSupportedTimezonesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/supportedTimezones",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listSupportedTimezonesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "timezoneCollection",
                    bodyModel: "model.TimezoneCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of files in an upload along with its processing state.
     * @param ListUploadFilesRequest
     * @return ListUploadFilesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListUploadFiles.ts.html |here} to see how to use ListUploadFiles API.
     */
    listUploadFiles(listUploadFilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listUploadFiles.");
            const pathParams = {
                "{namespaceName}": listUploadFilesRequest.namespaceName,
                "{uploadReference}": listUploadFilesRequest.uploadReference
            };
            const queryParams = {
                "limit": listUploadFilesRequest.limit,
                "page": listUploadFilesRequest.page,
                "sortOrder": listUploadFilesRequest.sortOrder,
                "sortBy": listUploadFilesRequest.sortBy,
                "searchStr": listUploadFilesRequest.searchStr,
                "status": listUploadFilesRequest.status
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUploadFilesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}/files",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listUploadFilesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "uploadFileCollection",
                    bodyModel: "model.UploadFileCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets list of warnings in an upload caused by incorrect configuration.
     * @param ListUploadWarningsRequest
     * @return ListUploadWarningsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListUploadWarnings.ts.html |here} to see how to use ListUploadWarnings API.
     */
    listUploadWarnings(listUploadWarningsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listUploadWarnings.");
            const pathParams = {
                "{namespaceName}": listUploadWarningsRequest.namespaceName,
                "{uploadReference}": listUploadWarningsRequest.uploadReference
            };
            const queryParams = {
                "limit": listUploadWarningsRequest.limit,
                "page": listUploadWarningsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUploadWarningsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/{uploadReference}/warnings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listUploadWarningsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "uploadWarningCollection",
                    bodyModel: "model.UploadWarningCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a list of all On-demand uploads.
     * To use this and other API operations, you must be authorized in an IAM policy.
     *
     * @param ListUploadsRequest
     * @return ListUploadsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListUploads.ts.html |here} to see how to use ListUploads API.
     */
    listUploads(listUploadsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listUploads.");
            const pathParams = {
                "{namespaceName}": listUploadsRequest.namespaceName
            };
            const queryParams = {
                "name": listUploadsRequest.name,
                "nameContains": listUploadsRequest.nameContains,
                "limit": listUploadsRequest.limit,
                "page": listUploadsRequest.page,
                "sortOrder": listUploadsRequest.sortOrder,
                "sortBy": listUploadsRequest.sortBy,
                "warningsFilter": listUploadsRequest.warningsFilter
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listUploadsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listUploadsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "uploadCollection",
                    bodyModel: "model.UploadCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-total-items"),
                            key: "opcTotalItems",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of collection warnings, containing detailed information about them. You may limit the number of results, provide sorting order, and filter by information such as start time, end time, warning type, warning state, source name, source pattern and entity name.
     *
     * @param ListWarningsRequest
     * @return ListWarningsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListWarnings.ts.html |here} to see how to use ListWarnings API.
     */
    listWarnings(listWarningsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listWarnings.");
            const pathParams = {
                "{namespaceName}": listWarningsRequest.namespaceName
            };
            const queryParams = {
                "warningState": listWarningsRequest.warningState,
                "sourceName": listWarningsRequest.sourceName,
                "sourcePattern": listWarningsRequest.sourcePattern,
                "warningMessage": listWarningsRequest.warningMessage,
                "entityName": listWarningsRequest.entityName,
                "entityType": listWarningsRequest.entityType,
                "warningType": listWarningsRequest.warningType,
                "isNoSource": listWarningsRequest.isNoSource,
                "startTime": listWarningsRequest.startTime,
                "endTime": listWarningsRequest.endTime,
                "compartmentId": listWarningsRequest.compartmentId,
                "limit": listWarningsRequest.limit,
                "page": listWarningsRequest.page,
                "sortOrder": listWarningsRequest.sortOrder,
                "sortBy": listWarningsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWarningsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/warnings",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWarningsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsWarningCollection",
                    bodyModel: "model.LogAnalyticsWarningCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-prev-page"),
                            key: "opcPrevPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of errors for a given work request.
     *
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequestErrors.");
            const pathParams = {
                "{namespaceName}": listWorkRequestErrorsRequest.namespaceName,
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestErrorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Return a (paginated) list of logs for a given work request.
     *
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequestLogs.");
            const pathParams = {
                "{namespaceName}": listWorkRequestLogsRequest.namespaceName,
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestLogsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogCollection",
                    bodyModel: "model.WorkRequestLogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the work requests in a compartment.
     *
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#listWorkRequests.");
            const pathParams = {
                "{namespaceName}": listWorkRequestsRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listWorkRequestsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestCollection",
                    bodyModel: "model.WorkRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Off-boards a tenant from Logging Analytics
     * @param OffboardNamespaceRequest
     * @return OffboardNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/OffboardNamespace.ts.html |here} to see how to use OffboardNamespace API.
     */
    offboardNamespace(offboardNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#offboardNamespace.");
            const pathParams = {
                "{namespaceName}": offboardNamespaceRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": offboardNamespaceRequest.opcRequestId,
                "opc-retry-token": offboardNamespaceRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/actions/offboard",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, offboardNamespaceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * On-boards a tenant to Logging Analytics.
     *
     * @param OnboardNamespaceRequest
     * @return OnboardNamespaceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/OnboardNamespace.ts.html |here} to see how to use OnboardNamespace API.
     */
    onboardNamespace(onboardNamespaceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#onboardNamespace.");
            const pathParams = {
                "{namespaceName}": onboardNamespaceRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": onboardNamespaceRequest.opcRetryToken,
                "opc-request-id": onboardNamespaceRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/actions/onboard",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, onboardNamespaceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Describe query
     * @param ParseQueryRequest
     * @return ParseQueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ParseQuery.ts.html |here} to see how to use ParseQuery API.
     */
    parseQuery(parseQueryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#parseQuery.");
            const pathParams = {
                "{namespaceName}": parseQueryRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": parseQueryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/parse",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(parseQueryRequest.parseQueryDetails, "ParseQueryDetails", models.ParseQueryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, parseQueryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "parseQueryOutput",
                    bodyModel: "model.ParseQueryOutput",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Pause the scheduled task specified by {scheduledTaskId}.
     *
     * @param PauseScheduledTaskRequest
     * @return PauseScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/PauseScheduledTask.ts.html |here} to see how to use PauseScheduledTask API.
     */
    pauseScheduledTask(pauseScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#pauseScheduledTask.");
            const pathParams = {
                "{namespaceName}": pauseScheduledTaskRequest.namespaceName,
                "{scheduledTaskId}": pauseScheduledTaskRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": pauseScheduledTaskRequest.ifMatch,
                "opc-request-id": pauseScheduledTaskRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/pause",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, pauseScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTask",
                    bodyModel: "model.ScheduledTask",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API submits a work request to purge data. Only data from log groups that the user has permission to delete
     * will be purged.  To purge all data, the user must have permission to all log groups.
     *
     * @param PurgeStorageDataRequest
     * @return PurgeStorageDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/PurgeStorageData.ts.html |here} to see how to use PurgeStorageData API.
     */
    purgeStorageData(purgeStorageDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#purgeStorageData.");
            const pathParams = {
                "{namespaceName}": purgeStorageDataRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": purgeStorageDataRequest.opcRequestId,
                "opc-retry-token": purgeStorageDataRequest.opcRetryToken,
                "if-match": purgeStorageDataRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/purgeData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(purgeStorageDataRequest.purgeStorageDataDetails, "PurgeStorageDataDetails", models.PurgeStorageDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, purgeStorageDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Put the work request specified by {workRequestId} into the background. Backgrounded queries will preserve query results on query completion for up to 7 days for recall. After 7 days the results and query expire.
     * @param PutQueryWorkRequestBackgroundRequest
     * @return PutQueryWorkRequestBackgroundResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/PutQueryWorkRequestBackground.ts.html |here} to see how to use PutQueryWorkRequestBackground API.
     */
    putQueryWorkRequestBackground(putQueryWorkRequestBackgroundRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#putQueryWorkRequestBackground.");
            const pathParams = {
                "{namespaceName}": putQueryWorkRequestBackgroundRequest.namespaceName,
                "{workRequestId}": putQueryWorkRequestBackgroundRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": putQueryWorkRequestBackgroundRequest.opcRequestId,
                "if-match": putQueryWorkRequestBackgroundRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/queryWorkRequests/{workRequestId}/actions/background",
                method: "PUT",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, putQueryWorkRequestBackgroundRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryWorkRequest",
                    bodyModel: "model.QueryWorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Performs a log analytics search, if shouldRunAsync is false returns the query results once they become available subject to 60 second timeout. If a query is subject to exceed that time then it should be run asynchronously. Asynchronous query submissions return the queryWorkRequestId to use for execution tracking, query submission lifecycle actions and to poll for query results.
     *
     * @param QueryRequest
     * @return QueryResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/Query.ts.html |here} to see how to use Query API.
     */
    query(queryRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#query.");
            const pathParams = {
                "{namespaceName}": queryRequest.namespaceName
            };
            const queryParams = {
                "page": queryRequest.page,
                "limit": queryRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": queryRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/query",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(queryRequest.queryDetails, "QueryDetails", models.QueryDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, queryRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "queryAggregation",
                    bodyModel: "model.QueryAggregation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page-id"),
                            key: "opcNextPageId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-prev-page-id"),
                            key: "opcPrevPageId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API submits a work request to recall archived data based on time interval and data type.
     *
     * @param RecallArchivedDataRequest
     * @return RecallArchivedDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/RecallArchivedData.ts.html |here} to see how to use RecallArchivedData API.
     */
    recallArchivedData(recallArchivedDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#recallArchivedData.");
            const pathParams = {
                "{namespaceName}": recallArchivedDataRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": recallArchivedDataRequest.opcRequestId,
                "opc-retry-token": recallArchivedDataRequest.opcRetryToken,
                "if-match": recallArchivedDataRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/recallArchivedData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(recallArchivedDataRequest.recallArchivedDataDetails, "RecallArchivedDataDetails", models.RecallArchivedDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, recallArchivedDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a lookup with the specified name, type and description. The csv file containing the lookup content is passed in as binary data in the request.
     *
     * @param RegisterLookupRequest
     * @return RegisterLookupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/RegisterLookup.ts.html |here} to see how to use RegisterLookup API.
     */
    registerLookup(registerLookupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#registerLookup.");
            const pathParams = {
                "{namespaceName}": registerLookupRequest.namespaceName
            };
            const queryParams = {
                "name": registerLookupRequest.name,
                "description": registerLookupRequest.description,
                "charEncoding": registerLookupRequest.charEncoding,
                "isHidden": registerLookupRequest.isHidden,
                "type": registerLookupRequest.type
            };
            let headerParams = {
                "opc-retry-token": registerLookupRequest.opcRetryToken,
                "opc-request-id": registerLookupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/actions/register",
                method: "POST",
                bodyContent: registerLookupRequest.registerLookupContentFileBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, registerLookupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLookup",
                    bodyModel: "model.LogAnalyticsLookup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API submits a work request to release recalled data based on time interval and data type.
     *
     * @param ReleaseRecalledDataRequest
     * @return ReleaseRecalledDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ReleaseRecalledData.ts.html |here} to see how to use ReleaseRecalledData API.
     */
    releaseRecalledData(releaseRecalledDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#releaseRecalledData.");
            const pathParams = {
                "{namespaceName}": releaseRecalledDataRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": releaseRecalledDataRequest.opcRequestId,
                "opc-retry-token": releaseRecalledDataRequest.opcRetryToken,
                "if-match": releaseRecalledDataRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage/actions/releaseRecalledData",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(releaseRecalledDataRequest.releaseRecalledDataDetails, "ReleaseRecalledDataDetails", models.ReleaseRecalledDataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, releaseRecalledDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete association between input source log analytics entity and destination entities.
     * @param RemoveEntityAssociationsRequest
     * @return RemoveEntityAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/RemoveEntityAssociations.ts.html |here} to see how to use RemoveEntityAssociations API.
     */
    removeEntityAssociations(removeEntityAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#removeEntityAssociations.");
            const pathParams = {
                "{namespaceName}": removeEntityAssociationsRequest.namespaceName,
                "{logAnalyticsEntityId}": removeEntityAssociationsRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeEntityAssociationsRequest.ifMatch,
                "opc-request-id": removeEntityAssociationsRequest.opcRequestId,
                "opc-retry-token": removeEntityAssociationsRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}/actions/removeEntityAssociations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeEntityAssociationsRequest.removeEntityAssociationsDetails, "RemoveEntityAssociationsDetails", models.RemoveEntityAssociationsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeEntityAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Remove one or more event types from a source.
     *
     * @param RemoveSourceEventTypesRequest
     * @return RemoveSourceEventTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/RemoveSourceEventTypes.ts.html |here} to see how to use RemoveSourceEventTypes API.
     */
    removeSourceEventTypes(removeSourceEventTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#removeSourceEventTypes.");
            const pathParams = {
                "{namespaceName}": removeSourceEventTypesRequest.namespaceName,
                "{sourceName}": removeSourceEventTypesRequest.sourceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": removeSourceEventTypesRequest.opcRetryToken,
                "opc-request-id": removeSourceEventTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/{sourceName}/actions/removeEventTypes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeSourceEventTypesRequest.removeEventTypeDetails, "EventTypeDetails", models.EventTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeSourceEventTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resume the scheduled task specified by {scheduledTaskId}.
     *
     * @param ResumeScheduledTaskRequest
     * @return ResumeScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ResumeScheduledTask.ts.html |here} to see how to use ResumeScheduledTask API.
     */
    resumeScheduledTask(resumeScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#resumeScheduledTask.");
            const pathParams = {
                "{namespaceName}": resumeScheduledTaskRequest.namespaceName,
                "{scheduledTaskId}": resumeScheduledTaskRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": resumeScheduledTaskRequest.ifMatch,
                "opc-request-id": resumeScheduledTaskRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/resume",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, resumeScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTask",
                    bodyModel: "model.ScheduledTask",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Execute the saved search acceleration task in the foreground.
     * The ScheduledTask taskType must be ACCELERATION.
     * Optionally specify time range (timeStart and timeEnd). The default is all time.
     *
     * @param RunRequest
     * @return RunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/Run.ts.html |here} to see how to use Run API.
     */
    run(runRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#run.");
            const pathParams = {
                "{namespaceName}": runRequest.namespaceName,
                "{scheduledTaskId}": runRequest.scheduledTaskId
            };
            const queryParams = {
                "timeStart": runRequest.timeStart,
                "timeEnd": runRequest.timeEnd
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": runRequest.opcRequestId,
                "opc-retry-token": runRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}/actions/run",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, runRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a context specific list of either commands, fields, or values to append to the end of the specified query string if applicable.
     * @param SuggestRequest
     * @return SuggestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/Suggest.ts.html |here} to see how to use Suggest API.
     */
    suggest(suggestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#suggest.");
            const pathParams = {
                "{namespaceName}": suggestRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": suggestRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/search/actions/suggest",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(suggestRequest.suggestDetails, "SuggestDetails", models.SuggestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, suggestRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "suggestOutput",
                    bodyModel: "model.SuggestOutput",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Supresses a list of warnings. Any unsuppressed warnings in the input list would be suppressed. Warnings in the input list which are already suppressed will not be modified.
     *
     * @param SuppressWarningRequest
     * @return SuppressWarningResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/SuppressWarning.ts.html |here} to see how to use SuppressWarning API.
     */
    suppressWarning(suppressWarningRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#suppressWarning.");
            const pathParams = {
                "{namespaceName}": suppressWarningRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": suppressWarningRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": suppressWarningRequest.opcRetryToken,
                "opc-request-id": suppressWarningRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/warnings/actions/suppress",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(suppressWarningRequest.warningReferenceDetails, "WarningReferenceDetails", models.WarningReferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, suppressWarningRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Tests the parser definition against the specified example content to ensure fields are successfully extracted.
     *
     * @param TestParserRequest
     * @return TestParserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/TestParser.ts.html |here} to see how to use TestParser API.
     */
    testParser(testParserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#testParser.");
            const pathParams = {
                "{namespaceName}": testParserRequest.namespaceName
            };
            const queryParams = {
                "scope": testParserRequest.scope,
                "reqOriginModule": testParserRequest.reqOriginModule
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": testParserRequest.opcRetryToken,
                "opc-request-id": testParserRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/actions/test",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(testParserRequest.testParserPayloadDetails, "TestParserPayloadDetails", models.TestParserPayloadDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, testParserRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "parserTestResult",
                    bodyModel: "model.ParserTestResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Unsupresses a list of warnings. Any suppressed warnings in the input list would be unsuppressed. Warnings in the input list which are already unsuppressed will not be modified.
     *
     * @param UnsuppressWarningRequest
     * @return UnsuppressWarningResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UnsuppressWarning.ts.html |here} to see how to use UnsuppressWarning API.
     */
    unsuppressWarning(unsuppressWarningRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#unsuppressWarning.");
            const pathParams = {
                "{namespaceName}": unsuppressWarningRequest.namespaceName
            };
            const queryParams = {
                "compartmentId": unsuppressWarningRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": unsuppressWarningRequest.opcRetryToken,
                "opc-request-id": unsuppressWarningRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/warnings/actions/unsuppress",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(unsuppressWarningRequest.warningReferenceDetails, "WarningReferenceDetails", models.WarningReferenceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, unsuppressWarningRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update log analytics enterprise manager bridge with the given id.
     * @param UpdateLogAnalyticsEmBridgeRequest
     * @return UpdateLogAnalyticsEmBridgeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLogAnalyticsEmBridge.ts.html |here} to see how to use UpdateLogAnalyticsEmBridge API.
     */
    updateLogAnalyticsEmBridge(updateLogAnalyticsEmBridgeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEmBridge.");
            const pathParams = {
                "{namespaceName}": updateLogAnalyticsEmBridgeRequest.namespaceName,
                "{logAnalyticsEmBridgeId}": updateLogAnalyticsEmBridgeRequest.logAnalyticsEmBridgeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLogAnalyticsEmBridgeRequest.ifMatch,
                "opc-request-id": updateLogAnalyticsEmBridgeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEmBridges/{logAnalyticsEmBridgeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLogAnalyticsEmBridgeRequest.updateLogAnalyticsEmBridgeDetails, "UpdateLogAnalyticsEmBridgeDetails", models.UpdateLogAnalyticsEmBridgeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLogAnalyticsEmBridgeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEmBridge",
                    bodyModel: "model.LogAnalyticsEmBridge",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the log analytics entity with the given id.
     * @param UpdateLogAnalyticsEntityRequest
     * @return UpdateLogAnalyticsEntityResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLogAnalyticsEntity.ts.html |here} to see how to use UpdateLogAnalyticsEntity API.
     */
    updateLogAnalyticsEntity(updateLogAnalyticsEntityRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEntity.");
            const pathParams = {
                "{namespaceName}": updateLogAnalyticsEntityRequest.namespaceName,
                "{logAnalyticsEntityId}": updateLogAnalyticsEntityRequest.logAnalyticsEntityId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLogAnalyticsEntityRequest.ifMatch,
                "opc-request-id": updateLogAnalyticsEntityRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntities/{logAnalyticsEntityId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLogAnalyticsEntityRequest.updateLogAnalyticsEntityDetails, "UpdateLogAnalyticsEntityDetails", models.UpdateLogAnalyticsEntityDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLogAnalyticsEntityRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsEntity",
                    bodyModel: "model.LogAnalyticsEntity",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update custom log analytics entity type. Out of box entity types cannot be udpated.
     * @param UpdateLogAnalyticsEntityTypeRequest
     * @return UpdateLogAnalyticsEntityTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLogAnalyticsEntityType.ts.html |here} to see how to use UpdateLogAnalyticsEntityType API.
     */
    updateLogAnalyticsEntityType(updateLogAnalyticsEntityTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsEntityType.");
            const pathParams = {
                "{namespaceName}": updateLogAnalyticsEntityTypeRequest.namespaceName,
                "{entityTypeName}": updateLogAnalyticsEntityTypeRequest.entityTypeName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateLogAnalyticsEntityTypeRequest.opcRequestId,
                "if-match": updateLogAnalyticsEntityTypeRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsEntityTypes/{entityTypeName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLogAnalyticsEntityTypeRequest.updateLogAnalyticsEntityTypeDetails, "UpdateLogAnalyticsEntityTypeDetails", models.UpdateLogAnalyticsEntityTypeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLogAnalyticsEntityTypeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified log group's display name, description, defined tags, and free-form tags.
     *
     * @param UpdateLogAnalyticsLogGroupRequest
     * @return UpdateLogAnalyticsLogGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLogAnalyticsLogGroup.ts.html |here} to see how to use UpdateLogAnalyticsLogGroup API.
     */
    updateLogAnalyticsLogGroup(updateLogAnalyticsLogGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsLogGroup.");
            const pathParams = {
                "{namespaceName}": updateLogAnalyticsLogGroupRequest.namespaceName,
                "{logAnalyticsLogGroupId}": updateLogAnalyticsLogGroupRequest.logAnalyticsLogGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLogAnalyticsLogGroupRequest.ifMatch,
                "opc-request-id": updateLogAnalyticsLogGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLogAnalyticsLogGroupRequest.updateLogAnalyticsLogGroupDetails, "UpdateLogAnalyticsLogGroupDetails", models.UpdateLogAnalyticsLogGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLogAnalyticsLogGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLogGroup",
                    bodyModel: "model.LogAnalyticsLogGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates configuration of the object collection rule for the given id.
     * @param UpdateLogAnalyticsObjectCollectionRuleRequest
     * @return UpdateLogAnalyticsObjectCollectionRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLogAnalyticsObjectCollectionRule.ts.html |here} to see how to use UpdateLogAnalyticsObjectCollectionRule API.
     */
    updateLogAnalyticsObjectCollectionRule(updateLogAnalyticsObjectCollectionRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLogAnalyticsObjectCollectionRule.");
            const pathParams = {
                "{namespaceName}": updateLogAnalyticsObjectCollectionRuleRequest.namespaceName,
                "{logAnalyticsObjectCollectionRuleId}": updateLogAnalyticsObjectCollectionRuleRequest.logAnalyticsObjectCollectionRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLogAnalyticsObjectCollectionRuleRequest.ifMatch,
                "opc-request-id": updateLogAnalyticsObjectCollectionRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/logAnalyticsObjectCollectionRules/{logAnalyticsObjectCollectionRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLogAnalyticsObjectCollectionRuleRequest.updateLogAnalyticsObjectCollectionRuleDetails, "UpdateLogAnalyticsObjectCollectionRuleDetails", models.UpdateLogAnalyticsObjectCollectionRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLogAnalyticsObjectCollectionRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsObjectCollectionRule",
                    bodyModel: "model.LogAnalyticsObjectCollectionRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the metadata of the specified lookup, such as the lookup description.
     *
     * @param UpdateLookupRequest
     * @return UpdateLookupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLookup.ts.html |here} to see how to use UpdateLookup API.
     */
    updateLookup(updateLookupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLookup.");
            const pathParams = {
                "{namespaceName}": updateLookupRequest.namespaceName,
                "{lookupName}": updateLookupRequest.lookupName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateLookupRequest.opcRetryToken,
                "opc-request-id": updateLookupRequest.opcRequestId,
                "if-match": updateLookupRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/{lookupName}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLookupRequest.updateLookupMetadataDetails, "UpdateLookupMetadataDetails", models.UpdateLookupMetadataDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLookupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLookup",
                    bodyModel: "model.LogAnalyticsLookup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the lookup content. The csv file containing the content to be updated is passed in as binary data in the request.
     *
     * @param UpdateLookupDataRequest
     * @return UpdateLookupDataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateLookupData.ts.html |here} to see how to use UpdateLookupData API.
     */
    updateLookupData(updateLookupDataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateLookupData.");
            const pathParams = {
                "{namespaceName}": updateLookupDataRequest.namespaceName,
                "{lookupName}": updateLookupDataRequest.lookupName
            };
            const queryParams = {
                "isForce": updateLookupDataRequest.isForce,
                "charEncoding": updateLookupDataRequest.charEncoding
            };
            let headerParams = {
                "opc-retry-token": updateLookupDataRequest.opcRetryToken,
                "opc-request-id": updateLookupDataRequest.opcRequestId,
                "if-match": updateLookupDataRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/lookups/{lookupName}/actions/updateData",
                method: "POST",
                bodyContent: updateLookupDataRequest.updateLookupFileBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateLookupDataRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the scheduled task. Schedules may be updated only for taskType SAVED_SEARCH and PURGE.
     * @param UpdateScheduledTaskRequest
     * @return UpdateScheduledTaskResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateScheduledTask.ts.html |here} to see how to use UpdateScheduledTask API.
     */
    updateScheduledTask(updateScheduledTaskRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateScheduledTask.");
            const pathParams = {
                "{namespaceName}": updateScheduledTaskRequest.namespaceName,
                "{scheduledTaskId}": updateScheduledTaskRequest.scheduledTaskId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateScheduledTaskRequest.opcRequestId,
                "if-match": updateScheduledTaskRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/scheduledTasks/{scheduledTaskId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateScheduledTaskRequest.updateScheduledTaskDetails, "UpdateScheduledTaskDetails", models.UpdateScheduledTaskDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateScheduledTaskRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledTask",
                    bodyModel: "model.ScheduledTask",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * This API updates the archiving configuration
     *
     * @param UpdateStorageRequest
     * @return UpdateStorageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpdateStorage.ts.html |here} to see how to use UpdateStorage API.
     */
    updateStorage(updateStorageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#updateStorage.");
            const pathParams = {
                "{namespaceName}": updateStorageRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateStorageRequest.opcRequestId,
                "if-match": updateStorageRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/storage",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateStorageRequest.updateStorageDetails, "UpdateStorageDetails", models.UpdateStorageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateStorageRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "storage",
                    bodyModel: "model.Storage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Accepts log events for processing by Logging Analytics.
     *
     * @param UploadLogEventsFileRequest
     * @return UploadLogEventsFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UploadLogEventsFile.ts.html |here} to see how to use UploadLogEventsFile API.
     */
    uploadLogEventsFile(uploadLogEventsFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#uploadLogEventsFile.");
            const pathParams = {
                "{namespaceName}": uploadLogEventsFileRequest.namespaceName
            };
            const queryParams = {
                "logGroupId": uploadLogEventsFileRequest.logGroupId,
                "logSet": uploadLogEventsFileRequest.logSet,
                "payloadType": uploadLogEventsFileRequest.payloadType
            };
            let headerParams = {
                "opc-request-id": uploadLogEventsFileRequest.opcRequestId,
                "content-type": uploadLogEventsFileRequest.contentType,
                "opc-retry-token": uploadLogEventsFileRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/actions/uploadLogEventsFile",
                method: "POST",
                bodyContent: uploadLogEventsFileRequest.uploadLogEventsFileDetails,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, uploadLogEventsFileRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, true);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-object-id"),
                            key: "opcObjectId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("timeCreated"),
                            key: "timeCreated",
                            dataType: "Date"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Accepts log data for processing by Logging Analytics.
     *
     * @param UploadLogFileRequest
     * @return UploadLogFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UploadLogFile.ts.html |here} to see how to use UploadLogFile API.
     */
    uploadLogFile(uploadLogFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#uploadLogFile.");
            const pathParams = {
                "{namespaceName}": uploadLogFileRequest.namespaceName
            };
            const queryParams = {
                "uploadName": uploadLogFileRequest.uploadName,
                "logSourceName": uploadLogFileRequest.logSourceName,
                "entityId": uploadLogFileRequest.entityId,
                "timezone": uploadLogFileRequest.timezone,
                "charEncoding": uploadLogFileRequest.charEncoding,
                "dateFormat": uploadLogFileRequest.dateFormat,
                "dateYear": uploadLogFileRequest.dateYear,
                "invalidateCache": uploadLogFileRequest.invalidateCache,
                "filename": uploadLogFileRequest.filename,
                "logSet": uploadLogFileRequest.logSet
            };
            let headerParams = {
                "opc-request-id": uploadLogFileRequest.opcRequestId,
                "content-md5": uploadLogFileRequest.contentMd5,
                "content-type": uploadLogFileRequest.contentType,
                "opc-meta-loggrpid": uploadLogFileRequest.opcMetaLoggrpid,
                "opc-retry-token": uploadLogFileRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/actions/uploadLogFile",
                method: "POST",
                bodyContent: uploadLogFileRequest.uploadLogFileBody,
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, uploadLogFileRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, true);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "upload",
                    bodyModel: "model.Upload",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-content-md5"),
                            key: "opcContentMd5",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-object-id"),
                            key: "opcObjectId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates associations between sources and entities. All entities should belong to the specified input compartment.
     *
     * @param UpsertAssociationsRequest
     * @return UpsertAssociationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpsertAssociations.ts.html |here} to see how to use UpsertAssociations API.
     */
    upsertAssociations(upsertAssociationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#upsertAssociations.");
            const pathParams = {
                "{namespaceName}": upsertAssociationsRequest.namespaceName
            };
            const queryParams = {
                "isFromRepublish": upsertAssociationsRequest.isFromRepublish
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": upsertAssociationsRequest.opcRetryToken,
                "opc-request-id": upsertAssociationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/associations/actions/upsert",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(upsertAssociationsRequest.upsertLogAnalyticsAssociationDetails, "UpsertLogAnalyticsAssociationDetails", models.UpsertLogAnalyticsAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upsertAssociationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates a field that could be used in parser expressions to extract and assign value. To create a field, specify its display name. A name would be generated for the field. For subsequent calls to update the field, include the name attribute.
     *
     * @param UpsertFieldRequest
     * @return UpsertFieldResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpsertField.ts.html |here} to see how to use UpsertField API.
     */
    upsertField(upsertFieldRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#upsertField.");
            const pathParams = {
                "{namespaceName}": upsertFieldRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": upsertFieldRequest.opcRetryToken,
                "opc-request-id": upsertFieldRequest.opcRequestId,
                "if-match": upsertFieldRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/fields/actions/upsert",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(upsertFieldRequest.upsertLogAnalyticsFieldDetails, "UpsertLogAnalyticsFieldDetails", models.UpsertLogAnalyticsFieldDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upsertFieldRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsField",
                    bodyModel: "model.LogAnalyticsField",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates a label that could be used to tag a log entry. You may optionally designate the label as a problem, and assign it a priority. You may also provide its related terms (aliases). To create a label, specify its display name. A name would be generated for the label. For subsequent calls to update the label, include the name attribute.
     *
     * @param UpsertLabelRequest
     * @return UpsertLabelResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpsertLabel.ts.html |here} to see how to use UpsertLabel API.
     */
    upsertLabel(upsertLabelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#upsertLabel.");
            const pathParams = {
                "{namespaceName}": upsertLabelRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": upsertLabelRequest.opcRetryToken,
                "opc-request-id": upsertLabelRequest.opcRequestId,
                "if-match": upsertLabelRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/labels/actions/upsert",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(upsertLabelRequest.upsertLogAnalyticsLabelDetails, "UpsertLogAnalyticsLabelDetails", models.UpsertLogAnalyticsLabelDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upsertLabelRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsLabel",
                    bodyModel: "model.LogAnalyticsLabel",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates a parser, which defines how fields are extracted from a log entry.
     *
     * @param UpsertParserRequest
     * @return UpsertParserResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpsertParser.ts.html |here} to see how to use UpsertParser API.
     */
    upsertParser(upsertParserRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#upsertParser.");
            const pathParams = {
                "{namespaceName}": upsertParserRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": upsertParserRequest.opcRetryToken,
                "opc-request-id": upsertParserRequest.opcRequestId,
                "if-match": upsertParserRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/parsers/actions/upsert",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(upsertParserRequest.upsertLogAnalyticsParserDetails, "UpsertLogAnalyticsParserDetails", models.UpsertLogAnalyticsParserDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upsertParserRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsParser",
                    bodyModel: "model.LogAnalyticsParser",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates or updates a log source. You may also specify parsers, labels, extended fields etc., for the source.
     *
     * @param UpsertSourceRequest
     * @return UpsertSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/UpsertSource.ts.html |here} to see how to use UpsertSource API.
     */
    upsertSource(upsertSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#upsertSource.");
            const pathParams = {
                "{namespaceName}": upsertSourceRequest.namespaceName
            };
            const queryParams = {
                "createLikeSourceId": upsertSourceRequest.createLikeSourceId,
                "isIncremental": upsertSourceRequest.isIncremental,
                "isIgnoreWarning": upsertSourceRequest.isIgnoreWarning
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": upsertSourceRequest.opcRetryToken,
                "opc-request-id": upsertSourceRequest.opcRequestId,
                "if-match": upsertSourceRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/actions/upsert",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(upsertSourceRequest.upsertLogAnalyticsSourceDetails, "UpsertLogAnalyticsSourceDetails", models.UpsertLogAnalyticsSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, upsertSourceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsSource",
                    bodyModel: "model.LogAnalyticsSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Checks if the passed in entities could be associated with the specified sources. The validation is performed to ensure that the entities have the relevant property values that are used in the corresponding source patterns.
     *
     * @param ValidateAssociationParametersRequest
     * @return ValidateAssociationParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ValidateAssociationParameters.ts.html |here} to see how to use ValidateAssociationParameters API.
     */
    validateAssociationParameters(validateAssociationParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#validateAssociationParameters.");
            const pathParams = {
                "{namespaceName}": validateAssociationParametersRequest.namespaceName
            };
            const queryParams = {
                "limit": validateAssociationParametersRequest.limit,
                "page": validateAssociationParametersRequest.page,
                "sortOrder": validateAssociationParametersRequest.sortOrder,
                "sortBy": validateAssociationParametersRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": validateAssociationParametersRequest.opcRetryToken,
                "opc-request-id": validateAssociationParametersRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/associations/actions/validateParameters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validateAssociationParametersRequest.upsertLogAnalyticsAssociationDetails, "UpsertLogAnalyticsAssociationDetails", models.UpsertLogAnalyticsAssociationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateAssociationParametersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "logAnalyticsAssociationParameterCollection",
                    bodyModel: "model.LogAnalyticsAssociationParameterCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validates a log file to check whether it is eligible to be uploaded or not.
     * @param ValidateFileRequest
     * @return ValidateFileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ValidateFile.ts.html |here} to see how to use ValidateFile API.
     */
    validateFile(validateFileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#validateFile.");
            const pathParams = {
                "{namespaceName}": validateFileRequest.namespaceName
            };
            const queryParams = {
                "objectLocation": validateFileRequest.objectLocation,
                "filename": validateFileRequest.filename
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": validateFileRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/actions/validateFile",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateFileRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "fileValidationResponse",
                    bodyModel: "model.FileValidationResponse",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Checks if the specified input is a valid log source definition.
     *
     * @param ValidateSourceRequest
     * @return ValidateSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ValidateSource.ts.html |here} to see how to use ValidateSource API.
     */
    validateSource(validateSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#validateSource.");
            const pathParams = {
                "{namespaceName}": validateSourceRequest.namespaceName
            };
            const queryParams = {
                "createLikeSourceId": validateSourceRequest.createLikeSourceId,
                "isIncremental": validateSourceRequest.isIncremental,
                "isIgnoreWarning": validateSourceRequest.isIgnoreWarning
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": validateSourceRequest.opcRetryToken,
                "opc-request-id": validateSourceRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/actions/validate",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validateSourceRequest.upsertLogAnalyticsSourceDetails, "UpsertLogAnalyticsSourceDetails", models.UpsertLogAnalyticsSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateSourceRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sourceValidateResults",
                    bodyModel: "model.SourceValidateResults",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Checks if the specified input contains valid extended field definitions against the provided example content.
     *
     * @param ValidateSourceExtendedFieldDetailsRequest
     * @return ValidateSourceExtendedFieldDetailsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ValidateSourceExtendedFieldDetails.ts.html |here} to see how to use ValidateSourceExtendedFieldDetails API.
     */
    validateSourceExtendedFieldDetails(validateSourceExtendedFieldDetailsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#validateSourceExtendedFieldDetails.");
            const pathParams = {
                "{namespaceName}": validateSourceExtendedFieldDetailsRequest.namespaceName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": validateSourceExtendedFieldDetailsRequest.opcRetryToken,
                "opc-request-id": validateSourceExtendedFieldDetailsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/sources/actions/validateExtendedFields",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(validateSourceExtendedFieldDetailsRequest.logAnalyticsSource, "LogAnalyticsSource", models.LogAnalyticsSource.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateSourceExtendedFieldDetailsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "extendedFieldsValidationResult",
                    bodyModel: "model.ExtendedFieldsValidationResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Validates the source mapping for a given file and provides match status and the parsed representation of log data.
     * @param ValidateSourceMappingRequest
     * @return ValidateSourceMappingResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/loganalytics/ValidateSourceMapping.ts.html |here} to see how to use ValidateSourceMapping API.
     */
    validateSourceMapping(validateSourceMappingRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LogAnalyticsClient#validateSourceMapping.");
            const pathParams = {
                "{namespaceName}": validateSourceMappingRequest.namespaceName
            };
            const queryParams = {
                "objectLocation": validateSourceMappingRequest.objectLocation,
                "filename": validateSourceMappingRequest.filename,
                "logSourceName": validateSourceMappingRequest.logSourceName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": validateSourceMappingRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/namespaces/{namespaceName}/uploads/actions/validateSourceMapping",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, validateSourceMappingRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "sourceMappingResponse",
                    bodyModel: "model.SourceMappingResponse",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.LogAnalyticsClient = LogAnalyticsClient;
LogAnalyticsClient.serviceEndpointTemplate = "https://loganalytics.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map