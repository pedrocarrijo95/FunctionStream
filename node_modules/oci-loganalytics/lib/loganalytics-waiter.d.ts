/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { LogAnalyticsClient } from "./client";
export declare class LogAnalyticsWaiter {
    private client;
    private readonly config?;
    constructor(client: LogAnalyticsClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forLogAnalyticsEmBridge till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEmBridgeResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEmBridge(request: serviceRequests.GetLogAnalyticsEmBridgeRequest, ...targetStates: models.EmBridgeLifecycleStates[]): Promise<serviceResponses.GetLogAnalyticsEmBridgeResponse | null>;
    /**
     * Waits forLogAnalyticsEntity till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEntityResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEntity(request: serviceRequests.GetLogAnalyticsEntityRequest, ...targetStates: models.EntityLifecycleStates[]): Promise<serviceResponses.GetLogAnalyticsEntityResponse | null>;
    /**
     * Waits forLogAnalyticsEntityType till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsEntityTypeResponse | null (null in case of 404 response)
     */
    forLogAnalyticsEntityType(request: serviceRequests.GetLogAnalyticsEntityTypeRequest, ...targetStates: models.EntityLifecycleStates[]): Promise<serviceResponses.GetLogAnalyticsEntityTypeResponse | null>;
    /**
     * Waits forLogAnalyticsObjectCollectionRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetLogAnalyticsObjectCollectionRuleResponse | null (null in case of 404 response)
     */
    forLogAnalyticsObjectCollectionRule(request: serviceRequests.GetLogAnalyticsObjectCollectionRuleRequest, ...targetStates: models.ObjectCollectionRuleLifecycleStates[]): Promise<serviceResponses.GetLogAnalyticsObjectCollectionRuleResponse | null>;
    /**
     * Waits forQueryWorkRequest
     *
     * @param request the request to send
     * @return response returns GetQueryWorkRequestResponse
     */
    forQueryWorkRequest(request: serviceRequests.GetQueryWorkRequestRequest): Promise<serviceResponses.GetQueryWorkRequestResponse>;
    /**
     * Waits forScheduledTask till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetScheduledTaskResponse | null (null in case of 404 response)
     */
    forScheduledTask(request: serviceRequests.GetScheduledTaskRequest, ...targetStates: models.ScheduledTask.LifecycleState[]): Promise<serviceResponses.GetScheduledTaskResponse | null>;
    /**
     * Waits forStorageWorkRequest
     *
     * @param request the request to send
     * @return response returns GetStorageWorkRequestResponse
     */
    forStorageWorkRequest(request: serviceRequests.GetStorageWorkRequestRequest): Promise<serviceResponses.GetStorageWorkRequestResponse>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
