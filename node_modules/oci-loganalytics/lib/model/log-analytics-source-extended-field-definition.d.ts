/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * LogAnalyticsSourceExtendedFieldDefinition
 */
export interface LogAnalyticsSourceExtendedFieldDefinition {
    "field"?: model.LogAnalyticsField;
    /**
     * The regular expression.
     */
    "displayRegularExpression"?: string;
    /**
     * An array of extended fields.
     */
    "extendedFields"?: Array<model.LogAnalyticsExtendedField>;
    /**
     * The base field internal name.
     */
    "baseFieldName"?: string;
    /**
     * The base field log text.
     */
    "baseFieldLogText"?: string;
    /**
     * The conditional data type.
     */
    "conditionDataType"?: string;
    /**
     * The onditional field.
     */
    "conditionField"?: string;
    /**
     * The conditional operator.
     */
    "conditionOperator"?: string;
    /**
     * The conditional value.
     */
    "conditionValue"?: string;
    /**
     * The converted regular expression.
     */
    "convertedRegularExpression"?: string;
    /**
     * A flag inidcating whether or not the extended definition is enabled.
     *
     */
    "isEnabled"?: boolean;
    /**
     * The extended field definition unique identifier. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "extendedFieldDefinitionId"?: number;
    /**
     * The system flag.  A value of false denotes a custom, or user
     * defined object.  A value of true denotes a built in object.
     *
     */
    "isSystem"?: boolean;
    /**
     * The regular expression.
     */
    "regularExpression"?: string;
    /**
     * The source unique identifier. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sourceId"?: number;
    /**
     * The last updated date.
     */
    "timeUpdated"?: Date;
}
export declare namespace LogAnalyticsSourceExtendedFieldDefinition {
    function getJsonObj(obj: LogAnalyticsSourceExtendedFieldDefinition): object;
}
