"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCommandDescriptor = void 0;
const model = __importStar(require("../model"));
var AbstractCommandDescriptor;
(function (AbstractCommandDescriptor) {
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "referencedFields": obj.referencedFields
                ? obj.referencedFields.map(item => {
                    return model.AbstractField.getJsonObj(item);
                })
                : undefined,
            "declaredFields": obj.declaredFields
                ? obj.declaredFields.map(item => {
                    return model.AbstractField.getJsonObj(item);
                })
                : undefined
        });
        if ("name" in obj && obj.name) {
            switch (obj.name) {
                case "TOP":
                    return model.TopCommandDescriptor.getJsonObj(jsonObj, true);
                case "HIGHLIGHT":
                    return model.HighlightCommandDescriptor.getJsonObj(jsonObj, true);
                case "MULTI_SEARCH":
                    return model.MultiSearchCommandDescriptor.getJsonObj(jsonObj, true);
                case "STATS":
                    return model.StatsCommandDescriptor.getJsonObj(jsonObj, true);
                case "TIME_COMPARE":
                    return model.TimeCompareCommandDescriptor.getJsonObj(jsonObj, true);
                case "TAIL":
                    return model.TailCommandDescriptor.getJsonObj(jsonObj, true);
                case "REGEX":
                    return model.RegexCommandDescriptor.getJsonObj(jsonObj, true);
                case "DELTA":
                    return model.DeltaCommandDescriptor.getJsonObj(jsonObj, true);
                case "LOOKUP":
                    return model.LookupCommandDescriptor.getJsonObj(jsonObj, true);
                case "DEMO_MODE":
                    return model.DemoModeCommandDescriptor.getJsonObj(jsonObj, true);
                case "FIELD_SUMMARY":
                    return model.FieldSummaryCommandDescriptor.getJsonObj(jsonObj, true);
                case "MAP":
                    return model.MapCommandDescriptor.getJsonObj(jsonObj, true);
                case "EVENT_STATS":
                    return model.EventStatsCommandDescriptor.getJsonObj(jsonObj, true);
                case "HIGHLIGHT_GROUPS":
                    return model.HighlightGroupsCommandDescriptor.getJsonObj(jsonObj, true);
                case "WHERE":
                    return model.WhereCommandDescriptor.getJsonObj(jsonObj, true);
                case "CLUSTER_SPLIT":
                    return model.ClusterSplitCommandDescriptor.getJsonObj(jsonObj, true);
                case "TIME_STATS":
                    return model.TimeStatsCommandDescriptor.getJsonObj(jsonObj, true);
                case "CLUSTER":
                    return model.ClusterCommandDescriptor.getJsonObj(jsonObj, true);
                case "CLUSTER_DETAILS":
                    return model.ClusterDetailsCommandDescriptor.getJsonObj(jsonObj, true);
                case "DELETE":
                    return model.DeleteCommandDescriptor.getJsonObj(jsonObj, true);
                case "CLUSTER_COMPARE":
                    return model.ClusterCompareCommandDescriptor.getJsonObj(jsonObj, true);
                case "SEARCH":
                    return model.SearchCommandDescriptor.getJsonObj(jsonObj, true);
                case "BUCKET":
                    return model.BucketCommandDescriptor.getJsonObj(jsonObj, true);
                case "COMMAND":
                    return model.CommandDescriptor.getJsonObj(jsonObj, true);
                case "DISTINCT":
                    return model.DistinctCommandDescriptor.getJsonObj(jsonObj, true);
                case "LINK":
                    return model.LinkCommandDescriptor.getJsonObj(jsonObj, true);
                case "SORT":
                    return model.SortCommandDescriptor.getJsonObj(jsonObj, true);
                case "EXTRACT":
                    return model.ExtractCommandDescriptor.getJsonObj(jsonObj, true);
                case "NLP":
                    return model.NlpCommandDescriptor.getJsonObj(jsonObj, true);
                case "BOTTOM":
                    return model.BottomCommandDescriptor.getJsonObj(jsonObj, true);
                case "FIELDS":
                    return model.FieldsCommandDescriptor.getJsonObj(jsonObj, true);
                case "HIGHLIGHT_ROWS":
                    return model.HighlightRowsCommandDescriptor.getJsonObj(jsonObj, true);
                case "MACRO":
                    return model.MacroCommandDescriptor.getJsonObj(jsonObj, true);
                case "CLASSIFY":
                    return model.ClassifyCommandDescriptor.getJsonObj(jsonObj, true);
                case "LINK_DETAILS":
                    return model.LinkDetailsCommandDescriptor.getJsonObj(jsonObj, true);
                case "SEARCH_LOOKUP":
                    return model.SearchLookupCommandDescriptor.getJsonObj(jsonObj, true);
                case "HEAD":
                    return model.HeadCommandDescriptor.getJsonObj(jsonObj, true);
                case "CREATE_VIEW":
                    return model.CreateViewCommandDescriptor.getJsonObj(jsonObj, true);
                case "ADD_FIELDS":
                    return model.AddFieldsCommandDescriptor.getJsonObj(jsonObj, true);
                case "EVAL":
                    return model.EvalCommandDescriptor.getJsonObj(jsonObj, true);
                case "RENAME":
                    return model.RenameCommandDescriptor.getJsonObj(jsonObj, true);
                default:
                    throw Error("Unknown value for: " + obj.name);
            }
        }
        return jsonObj;
    }
    AbstractCommandDescriptor.getJsonObj = getJsonObj;
})(AbstractCommandDescriptor = exports.AbstractCommandDescriptor || (exports.AbstractCommandDescriptor = {}));
//# sourceMappingURL=abstract-command-descriptor.js.map