/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Generic column defining all attributes common to all querylanguage columns.
 *
 */
export interface AbstractColumn {
    /**
     * Column display name - will be alias if column is renamed by queryStrng.
     *
     */
    "displayName"?: string;
    /**
     * Subsystem column belongs to.
     *
     */
    "subSystem"?: model.SubSystemName;
    /**
     * If the column is a 'List of Values' column, this array contains the field values that are applicable to query results or all if no filters applied.
     *
     */
    "values"?: Array<model.FieldValue>;
    /**
     * Identifies if all values in this column come from a pre-defined list of values.
     *
     */
    "isListOfValues"?: boolean;
    /**
     * Identifies if this column allows multiple values to exist in a single row.
     *
     */
    "isMultiValued"?: boolean;
    /**
     * Identifies if this column can be used as a grouping field in any grouping command.
     *
     */
    "isGroupable"?: boolean;
    /**
     * Identifies if this column can be used as an expression parameter in any command that accepts querylanguage expressions.
     *
     */
    "isEvaluable"?: boolean;
    /**
     * Field denoting column data type.
     *
     */
    "valueType"?: model.ValueType;
    /**
     * Same as displayName unless column renamed in which case this will hold the original display name for the column.
     *
     */
    "originalDisplayName"?: string;
    /**
     * Internal identifier for the column.
     *
     */
    "internalName"?: string;
    "type": string;
}
export declare namespace AbstractColumn {
    function getJsonObj(obj: AbstractColumn): object;
}
