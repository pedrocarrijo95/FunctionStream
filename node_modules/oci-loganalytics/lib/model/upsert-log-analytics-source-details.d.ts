/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * UpsertLogAnalyticsSourceDetails
 */
export interface UpsertLogAnalyticsSourceDetails {
    /**
     * An array of source label conditions.
     */
    "labelConditions"?: Array<model.LogAnalyticsSourceLabelCondition>;
    /**
     * An array of data filter definitions.
     */
    "dataFilterDefinitions"?: Array<model.LogAnalyticsSourceDataFilter>;
    /**
     * The database credential name.
     */
    "databaseCredential"?: string;
    /**
     * An array of extended field definitions.
     */
    "extendedFieldDefinitions"?: Array<model.LogAnalyticsSourceExtendedFieldDefinition>;
    /**
     * A flag indicating whether or not this is a cloud source.
     *
     */
    "isForCloud"?: boolean;
    /**
     * An array of labels.
     */
    "labels"?: Array<model.LogAnalyticsLabelView>;
    /**
     * An array of metric definitions.
     */
    "metricDefinitions"?: Array<model.LogAnalyticsMetric>;
    /**
     * An array of metrics.
     */
    "metrics"?: Array<model.LogAnalyticsSourceMetric>;
    /**
     * An array of built in source parsers.
     */
    "oobParsers"?: Array<model.LogAnalyticsParser>;
    /**
     * An array of parameters.
     */
    "parameters"?: Array<model.LogAnalyticsParameter>;
    /**
     * An array of patterns.
     */
    "patterns"?: Array<model.LogAnalyticsSourcePattern>;
    /**
     * The source description.
     */
    "description"?: string;
    /**
     * The source display name.
     */
    "displayName"?: string;
    /**
     * The source edit version. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "editVersion"?: number;
    /**
     * An array of source functions.
     */
    "functions"?: Array<model.LogAnalyticsSourceFunction>;
    /**
     * The source unique identifier. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "sourceId"?: number;
    /**
     * The source internal name.
     */
    "name"?: string;
    /**
     * A flag indicating whether or not the source content is secure.
     *
     */
    "isSecureContent"?: boolean;
    /**
     * The system flag.  A value of false denotes a custom, or user
     * defined object.  A value of true denotes a built in object.
     *
     */
    "isSystem"?: boolean;
    /**
     * An array of parser.
     */
    "parsers"?: Array<model.LogAnalyticsParser>;
    /**
     * The rule unique identifier. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "ruleId"?: number;
    /**
     * The source type internal name.
     */
    "typeName"?: string;
    /**
     * The source warning configuration. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "warningConfig"?: number;
    /**
     * An array of source metadata fields.
     */
    "metadataFields"?: Array<model.LogAnalyticsSourceMetadataField>;
    /**
     * An array of labels.
     */
    "labelDefinitions"?: Array<model.LogAnalyticsLabelDefinition>;
    /**
     * An array of entity types.
     */
    "entityTypes"?: Array<model.LogAnalyticsSourceEntityType>;
    /**
     * A flag indicating whether or not the source has a time zone override.
     *
     */
    "isTimezoneOverride"?: boolean;
    /**
     * An array of custom parsers.
     */
    "userParsers"?: Array<model.LogAnalyticsParser>;
}
export declare namespace UpsertLogAnalyticsSourceDetails {
    function getJsonObj(obj: UpsertLogAnalyticsSourceDetails): object;
}
