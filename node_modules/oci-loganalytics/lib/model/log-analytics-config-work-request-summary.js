"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogAnalyticsConfigWorkRequestSummary = void 0;
var LogAnalyticsConfigWorkRequestSummary;
(function (LogAnalyticsConfigWorkRequestSummary) {
    let OperationType;
    (function (OperationType) {
        OperationType["CreateAssociations"] = "CREATE_ASSOCIATIONS";
        OperationType["DeleteAssociations"] = "DELETE_ASSOCIATIONS";
        OperationType["AppendLookupData"] = "APPEND_LOOKUP_DATA";
        OperationType["UpdateLookupData"] = "UPDATE_LOOKUP_DATA";
        OperationType["DeleteLookup"] = "DELETE_LOOKUP";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        OperationType["UnknownValue"] = "UNKNOWN_VALUE";
    })(OperationType = LogAnalyticsConfigWorkRequestSummary.OperationType || (LogAnalyticsConfigWorkRequestSummary.OperationType = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Accepted"] = "ACCEPTED";
        LifecycleState["InProgress"] = "IN_PROGRESS";
        LifecycleState["Succeeded"] = "SUCCEEDED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = LogAnalyticsConfigWorkRequestSummary.LifecycleState || (LogAnalyticsConfigWorkRequestSummary.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {});
        return jsonObj;
    }
    LogAnalyticsConfigWorkRequestSummary.getJsonObj = getJsonObj;
})(LogAnalyticsConfigWorkRequestSummary = exports.LogAnalyticsConfigWorkRequestSummary || (exports.LogAnalyticsConfigWorkRequestSummary = {}));
//# sourceMappingURL=log-analytics-config-work-request-summary.js.map