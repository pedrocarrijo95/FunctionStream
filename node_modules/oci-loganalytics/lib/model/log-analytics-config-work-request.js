"use strict";
/**
 * LogAnalytics API
 * The LogAnalytics API for the LogAnalytics service.

 * OpenAPI spec version: 20200601
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogAnalyticsConfigWorkRequest = void 0;
const model = __importStar(require("../model"));
var LogAnalyticsConfigWorkRequest;
(function (LogAnalyticsConfigWorkRequest) {
    let OperationType;
    (function (OperationType) {
        OperationType["CreateAssociations"] = "CREATE_ASSOCIATIONS";
        OperationType["DeleteAssociations"] = "DELETE_ASSOCIATIONS";
        OperationType["AppendLookupData"] = "APPEND_LOOKUP_DATA";
        OperationType["UpdateLookupData"] = "UPDATE_LOOKUP_DATA";
        OperationType["DeleteLookup"] = "DELETE_LOOKUP";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        OperationType["UnknownValue"] = "UNKNOWN_VALUE";
    })(OperationType = LogAnalyticsConfigWorkRequest.OperationType || (LogAnalyticsConfigWorkRequest.OperationType = {}));
    let LifecycleState;
    (function (LifecycleState) {
        LifecycleState["Accepted"] = "ACCEPTED";
        LifecycleState["InProgress"] = "IN_PROGRESS";
        LifecycleState["Succeeded"] = "SUCCEEDED";
        LifecycleState["Failed"] = "FAILED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        LifecycleState["UnknownValue"] = "UNKNOWN_VALUE";
    })(LifecycleState = LogAnalyticsConfigWorkRequest.LifecycleState || (LogAnalyticsConfigWorkRequest.LifecycleState = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "payload": obj.payload
                ? obj.payload.map(item => {
                    return model.LogAnalyticsConfigWorkRequestPayload.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    LogAnalyticsConfigWorkRequest.getJsonObj = getJsonObj;
})(LogAnalyticsConfigWorkRequest = exports.LogAnalyticsConfigWorkRequest || (exports.LogAnalyticsConfigWorkRequest = {}));
//# sourceMappingURL=log-analytics-config-work-request.js.map