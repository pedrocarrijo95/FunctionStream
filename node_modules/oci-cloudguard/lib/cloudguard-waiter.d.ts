/**
 * Cloud Guard APIs
 * A description of the Cloud Guard APIs
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { CloudGuardClient } from "./client";
export declare class CloudGuardWaiter {
    private client;
    private readonly config?;
    constructor(client: CloudGuardClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forDataMaskRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataMaskRuleResponse | null (null in case of 404 response)
     */
    forDataMaskRule(request: serviceRequests.GetDataMaskRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataMaskRuleResponse | null>;
    /**
     * Waits forDetector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDetectorResponse | null (null in case of 404 response)
     */
    forDetector(request: serviceRequests.GetDetectorRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDetectorResponse | null>;
    /**
     * Waits forDetectorRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDetectorRecipeResponse | null (null in case of 404 response)
     */
    forDetectorRecipe(request: serviceRequests.GetDetectorRecipeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDetectorRecipeResponse | null>;
    /**
     * Waits forDetectorRecipeDetectorRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
     */
    forDetectorRecipeDetectorRule(request: serviceRequests.GetDetectorRecipeDetectorRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDetectorRecipeDetectorRuleResponse | null>;
    /**
     * Waits forDetectorRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDetectorRuleResponse | null (null in case of 404 response)
     */
    forDetectorRule(request: serviceRequests.GetDetectorRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDetectorRuleResponse | null>;
    /**
     * Waits forManagedList till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetManagedListResponse | null (null in case of 404 response)
     */
    forManagedList(request: serviceRequests.GetManagedListRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetManagedListResponse | null>;
    /**
     * Waits forProblem till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetProblemResponse
     */
    forProblem(request: serviceRequests.GetProblemRequest, ...targetStates: models.ProblemLifecycleState[]): Promise<serviceResponses.GetProblemResponse>;
    /**
     * Waits forResponderRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResponderRecipeResponse | null (null in case of 404 response)
     */
    forResponderRecipe(request: serviceRequests.GetResponderRecipeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetResponderRecipeResponse | null>;
    /**
     * Waits forResponderRecipeResponderRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
     */
    forResponderRecipeResponderRule(request: serviceRequests.GetResponderRecipeResponderRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetResponderRecipeResponderRuleResponse | null>;
    /**
     * Waits forResponderRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetResponderRuleResponse | null (null in case of 404 response)
     */
    forResponderRule(request: serviceRequests.GetResponderRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetResponderRuleResponse | null>;
    /**
     * Waits forTarget till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetResponse | null (null in case of 404 response)
     */
    forTarget(request: serviceRequests.GetTargetRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTargetResponse | null>;
    /**
     * Waits forTargetDetectorRecipe till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetDetectorRecipeResponse | null (null in case of 404 response)
     */
    forTargetDetectorRecipe(request: serviceRequests.GetTargetDetectorRecipeRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTargetDetectorRecipeResponse | null>;
    /**
     * Waits forTargetDetectorRecipeDetectorRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetDetectorRecipeDetectorRuleResponse | null (null in case of 404 response)
     */
    forTargetDetectorRecipeDetectorRule(request: serviceRequests.GetTargetDetectorRecipeDetectorRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTargetDetectorRecipeDetectorRuleResponse | null>;
    /**
     * Waits forTargetResponderRecipeResponderRule till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetTargetResponderRecipeResponderRuleResponse | null (null in case of 404 response)
     */
    forTargetResponderRecipeResponderRule(request: serviceRequests.GetTargetResponderRecipeResponderRuleRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetTargetResponderRecipeResponderRuleResponse | null>;
}
