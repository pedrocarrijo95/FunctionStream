/**
 * Cloud Guard APIs
 * A description of the Cloud Guard APIs
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as responses from "./response";
import { CloudGuardWaiter } from "./cloudguard-waiter";
export declare enum CloudGuardApiKeys {
}
export declare class CloudGuardClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_waiters": CloudGuardWaiter;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Creates a new CloudGuardWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config?: common.WaiterConfiguration): CloudGuardWaiter;
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters(): CloudGuardWaiter;
    /**
     * Moves the DetectorRecipe from current compartment to another.
     * @param ChangeDetectorRecipeCompartmentRequest
     * @return ChangeDetectorRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeDetectorRecipeCompartment.ts.html |here} to see how to use ChangeDetectorRecipeCompartment API.
     */
    changeDetectorRecipeCompartment(changeDetectorRecipeCompartmentRequest: requests.ChangeDetectorRecipeCompartmentRequest): Promise<responses.ChangeDetectorRecipeCompartmentResponse>;
    /**
     * Moves the ManagedList from current compartment to another.
     * @param ChangeManagedListCompartmentRequest
     * @return ChangeManagedListCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeManagedListCompartment.ts.html |here} to see how to use ChangeManagedListCompartment API.
     */
    changeManagedListCompartment(changeManagedListCompartmentRequest: requests.ChangeManagedListCompartmentRequest): Promise<responses.ChangeManagedListCompartmentResponse>;
    /**
     * Moves the ResponderRecipe from current compartment to another.
     * @param ChangeResponderRecipeCompartmentRequest
     * @return ChangeResponderRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeResponderRecipeCompartment.ts.html |here} to see how to use ChangeResponderRecipeCompartment API.
     */
    changeResponderRecipeCompartment(changeResponderRecipeCompartmentRequest: requests.ChangeResponderRecipeCompartmentRequest): Promise<responses.ChangeResponderRecipeCompartmentResponse>;
    /**
     * Creates a new Data Mask Rule Definition
     *
     * @param CreateDataMaskRuleRequest
     * @return CreateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateDataMaskRule.ts.html |here} to see how to use CreateDataMaskRule API.
     */
    createDataMaskRule(createDataMaskRuleRequest: requests.CreateDataMaskRuleRequest): Promise<responses.CreateDataMaskRuleResponse>;
    /**
     * Creates a DetectorRecipe
     *
     * @param CreateDetectorRecipeRequest
     * @return CreateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateDetectorRecipe.ts.html |here} to see how to use CreateDetectorRecipe API.
     */
    createDetectorRecipe(createDetectorRecipeRequest: requests.CreateDetectorRecipeRequest): Promise<responses.CreateDetectorRecipeResponse>;
    /**
     * Creates a new ManagedList.
     *
     * @param CreateManagedListRequest
     * @return CreateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateManagedList.ts.html |here} to see how to use CreateManagedList API.
     */
    createManagedList(createManagedListRequest: requests.CreateManagedListRequest): Promise<responses.CreateManagedListResponse>;
    /**
     * Create a ResponderRecipe.
     *
     * @param CreateResponderRecipeRequest
     * @return CreateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateResponderRecipe.ts.html |here} to see how to use CreateResponderRecipe API.
     */
    createResponderRecipe(createResponderRecipeRequest: requests.CreateResponderRecipeRequest): Promise<responses.CreateResponderRecipeResponse>;
    /**
     * Creates a new Target
     *
     * @param CreateTargetRequest
     * @return CreateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTarget.ts.html |here} to see how to use CreateTarget API.
     */
    createTarget(createTargetRequest: requests.CreateTargetRequest): Promise<responses.CreateTargetResponse>;
    /**
     * Attach a DetectorRecipe with the Target
     *
     * @param CreateTargetDetectorRecipeRequest
     * @return CreateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTargetDetectorRecipe.ts.html |here} to see how to use CreateTargetDetectorRecipe API.
     */
    createTargetDetectorRecipe(createTargetDetectorRecipeRequest: requests.CreateTargetDetectorRecipeRequest): Promise<responses.CreateTargetDetectorRecipeResponse>;
    /**
     * Attach a ResponderRecipe with the Target
     *
     * @param CreateTargetResponderRecipeRequest
     * @return CreateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTargetResponderRecipe.ts.html |here} to see how to use CreateTargetResponderRecipe API.
     */
    createTargetResponderRecipe(createTargetResponderRecipeRequest: requests.CreateTargetResponderRecipeRequest): Promise<responses.CreateTargetResponderRecipeResponse>;
    /**
     * Deletes a DataMaskRule identified by dataMaskRuleId
     * @param DeleteDataMaskRuleRequest
     * @return DeleteDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteDataMaskRule.ts.html |here} to see how to use DeleteDataMaskRule API.
     */
    deleteDataMaskRule(deleteDataMaskRuleRequest: requests.DeleteDataMaskRuleRequest): Promise<responses.DeleteDataMaskRuleResponse>;
    /**
     * Deletes a DetectorRecipe identified by detectorRecipeId
     * @param DeleteDetectorRecipeRequest
     * @return DeleteDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteDetectorRecipe.ts.html |here} to see how to use DeleteDetectorRecipe API.
     */
    deleteDetectorRecipe(deleteDetectorRecipeRequest: requests.DeleteDetectorRecipeRequest): Promise<responses.DeleteDetectorRecipeResponse>;
    /**
     * Deletes a managed list identified by managedListId
     * @param DeleteManagedListRequest
     * @return DeleteManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteManagedList.ts.html |here} to see how to use DeleteManagedList API.
     */
    deleteManagedList(deleteManagedListRequest: requests.DeleteManagedListRequest): Promise<responses.DeleteManagedListResponse>;
    /**
     * Delete the ResponderRecipe resource by identifier
     * @param DeleteResponderRecipeRequest
     * @return DeleteResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteResponderRecipe.ts.html |here} to see how to use DeleteResponderRecipe API.
     */
    deleteResponderRecipe(deleteResponderRecipeRequest: requests.DeleteResponderRecipeRequest): Promise<responses.DeleteResponderRecipeResponse>;
    /**
     * Deletes a Target identified by targetId
     * @param DeleteTargetRequest
     * @return DeleteTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTarget.ts.html |here} to see how to use DeleteTarget API.
     */
    deleteTarget(deleteTargetRequest: requests.DeleteTargetRequest): Promise<responses.DeleteTargetResponse>;
    /**
     * Delete the TargetDetectorRecipe resource by identifier
     * @param DeleteTargetDetectorRecipeRequest
     * @return DeleteTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTargetDetectorRecipe.ts.html |here} to see how to use DeleteTargetDetectorRecipe API.
     */
    deleteTargetDetectorRecipe(deleteTargetDetectorRecipeRequest: requests.DeleteTargetDetectorRecipeRequest): Promise<responses.DeleteTargetDetectorRecipeResponse>;
    /**
     * Delete the TargetResponderRecipe resource by identifier
     * @param DeleteTargetResponderRecipeRequest
     * @return DeleteTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTargetResponderRecipe.ts.html |here} to see how to use DeleteTargetResponderRecipe API.
     */
    deleteTargetResponderRecipe(deleteTargetResponderRecipeRequest: requests.DeleteTargetResponderRecipeRequest): Promise<responses.DeleteTargetResponderRecipeResponse>;
    /**
     * Executes the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * @param ExecuteResponderExecutionRequest
     * @return ExecuteResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ExecuteResponderExecution.ts.html |here} to see how to use ExecuteResponderExecution API.
     */
    executeResponderExecution(executeResponderExecutionRequest: requests.ExecuteResponderExecutionRequest): Promise<responses.ExecuteResponderExecutionResponse>;
    /**
     * Returns ConditionType with its details.
     *
     * @param GetConditionMetadataTypeRequest
     * @return GetConditionMetadataTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetConditionMetadataType.ts.html |here} to see how to use GetConditionMetadataType API.
     */
    getConditionMetadataType(getConditionMetadataTypeRequest: requests.GetConditionMetadataTypeRequest): Promise<responses.GetConditionMetadataTypeResponse>;
    /**
     * GET Cloud Guard Configuration Details for a Tenancy.
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest: requests.GetConfigurationRequest): Promise<responses.GetConfigurationResponse>;
    /**
     * Returns a DataMaskRule identified by DataMaskRuleId
     * @param GetDataMaskRuleRequest
     * @return GetDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDataMaskRule.ts.html |here} to see how to use GetDataMaskRule API.
     */
    getDataMaskRule(getDataMaskRuleRequest: requests.GetDataMaskRuleRequest): Promise<responses.GetDataMaskRuleResponse>;
    /**
     * Returns a Detector identified by detectorId.
     *
     * @param GetDetectorRequest
     * @return GetDetectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetector.ts.html |here} to see how to use GetDetector API.
     */
    getDetector(getDetectorRequest: requests.GetDetectorRequest): Promise<responses.GetDetectorResponse>;
    /**
     * Returns a DetectorRecipe identified by detectorRecipeId
     * @param GetDetectorRecipeRequest
     * @return GetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRecipe.ts.html |here} to see how to use GetDetectorRecipe API.
     */
    getDetectorRecipe(getDetectorRecipeRequest: requests.GetDetectorRecipeRequest): Promise<responses.GetDetectorRecipeResponse>;
    /**
     * Get DetectorRule by identifier
     * @param GetDetectorRecipeDetectorRuleRequest
     * @return GetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetDetectorRecipeDetectorRule API.
     */
    getDetectorRecipeDetectorRule(getDetectorRecipeDetectorRuleRequest: requests.GetDetectorRecipeDetectorRuleRequest): Promise<responses.GetDetectorRecipeDetectorRuleResponse>;
    /**
     * Returns a Detector Rule identified by detectorRuleId
     *
     * @param GetDetectorRuleRequest
     * @return GetDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRule.ts.html |here} to see how to use GetDetectorRule API.
     */
    getDetectorRule(getDetectorRuleRequest: requests.GetDetectorRuleRequest): Promise<responses.GetDetectorRuleResponse>;
    /**
     * Returns a managed list identified by managedListId
     * @param GetManagedListRequest
     * @return GetManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetManagedList.ts.html |here} to see how to use GetManagedList API.
     */
    getManagedList(getManagedListRequest: requests.GetManagedListRequest): Promise<responses.GetManagedListResponse>;
    /**
     * Returns a Problems response
     * @param GetProblemRequest
     * @return GetProblemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetProblem.ts.html |here} to see how to use GetProblem API.
     */
    getProblem(getProblemRequest: requests.GetProblemRequest): Promise<responses.GetProblemResponse>;
    /**
     * Returns a Responder Execution identified by responderExecutionId
     *
     * @param GetResponderExecutionRequest
     * @return GetResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderExecution.ts.html |here} to see how to use GetResponderExecution API.
     */
    getResponderExecution(getResponderExecutionRequest: requests.GetResponderExecutionRequest): Promise<responses.GetResponderExecutionResponse>;
    /**
     * Get a ResponderRecipe by identifier
     * @param GetResponderRecipeRequest
     * @return GetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRecipe.ts.html |here} to see how to use GetResponderRecipe API.
     */
    getResponderRecipe(getResponderRecipeRequest: requests.GetResponderRecipeRequest): Promise<responses.GetResponderRecipeResponse>;
    /**
     * Get ResponderRule by identifier
     * @param GetResponderRecipeResponderRuleRequest
     * @return GetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRecipeResponderRule.ts.html |here} to see how to use GetResponderRecipeResponderRule API.
     */
    getResponderRecipeResponderRule(getResponderRecipeResponderRuleRequest: requests.GetResponderRecipeResponderRuleRequest): Promise<responses.GetResponderRecipeResponderRuleResponse>;
    /**
     * Get a ResponderRule by identifier
     * @param GetResponderRuleRequest
     * @return GetResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRule.ts.html |here} to see how to use GetResponderRule API.
     */
    getResponderRule(getResponderRuleRequest: requests.GetResponderRuleRequest): Promise<responses.GetResponderRuleResponse>;
    /**
     * Returns a Target identified by targetId
     * @param GetTargetRequest
     * @return GetTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTarget.ts.html |here} to see how to use GetTarget API.
     */
    getTarget(getTargetRequest: requests.GetTargetRequest): Promise<responses.GetTargetResponse>;
    /**
     * Get a TargetDetectorRecipe by identifier
     * @param GetTargetDetectorRecipeRequest
     * @return GetTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetDetectorRecipe.ts.html |here} to see how to use GetTargetDetectorRecipe API.
     */
    getTargetDetectorRecipe(getTargetDetectorRecipeRequest: requests.GetTargetDetectorRecipeRequest): Promise<responses.GetTargetDetectorRecipeResponse>;
    /**
     * Get DetectorRule by identifier
     * @param GetTargetDetectorRecipeDetectorRuleRequest
     * @return GetTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetTargetDetectorRecipeDetectorRule API.
     */
    getTargetDetectorRecipeDetectorRule(getTargetDetectorRecipeDetectorRuleRequest: requests.GetTargetDetectorRecipeDetectorRuleRequest): Promise<responses.GetTargetDetectorRecipeDetectorRuleResponse>;
    /**
     * Get a TargetResponderRecipe by identifier
     * @param GetTargetResponderRecipeRequest
     * @return GetTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetResponderRecipe.ts.html |here} to see how to use GetTargetResponderRecipe API.
     */
    getTargetResponderRecipe(getTargetResponderRecipeRequest: requests.GetTargetResponderRecipeRequest): Promise<responses.GetTargetResponderRecipeResponse>;
    /**
     * Get ResponderRule by identifier
     * @param GetTargetResponderRecipeResponderRuleRequest
     * @return GetTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetResponderRecipeResponderRule.ts.html |here} to see how to use GetTargetResponderRecipeResponderRule API.
     */
    getTargetResponderRecipeResponderRule(getTargetResponderRecipeResponderRuleRequest: requests.GetTargetResponderRecipeResponderRuleRequest): Promise<responses.GetTargetResponderRecipeResponderRuleResponse>;
    /**
     * Returns a list of condition types.
     *
     * @param ListConditionMetadataTypesRequest
     * @return ListConditionMetadataTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListConditionMetadataTypes.ts.html |here} to see how to use ListConditionMetadataTypes API.
     */
    listConditionMetadataTypes(listConditionMetadataTypesRequest: requests.ListConditionMetadataTypesRequest): Promise<responses.ListConditionMetadataTypesResponse>;
    /**
     * Returns a list of all Data Mask Rules in the root 'compartmentId' passed.
     *
     * @param ListDataMaskRulesRequest
     * @return ListDataMaskRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDataMaskRules.ts.html |here} to see how to use ListDataMaskRules API.
     */
    listDataMaskRules(listDataMaskRulesRequest: requests.ListDataMaskRulesRequest): Promise<responses.ListDataMaskRulesResponse>;
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe.
     *
     * @param ListDetectorRecipeDetectorRulesRequest
     * @return ListDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRecipeDetectorRules.ts.html |here} to see how to use ListDetectorRecipeDetectorRules API.
     */
    listDetectorRecipeDetectorRules(listDetectorRecipeDetectorRulesRequest: requests.ListDetectorRecipeDetectorRulesRequest): Promise<responses.ListDetectorRecipeDetectorRulesResponse>;
    /**
       * Returns a list of all Detector Recipes in a compartment
  * <p>
  The ListDetectorRecipes operation returns only the detector recipes in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListDetectorRecipes on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListDetectorRecipesRequest
       * @return ListDetectorRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRecipes.ts.html |here} to see how to use ListDetectorRecipes API.
       */
    listDetectorRecipes(listDetectorRecipesRequest: requests.ListDetectorRecipesRequest): Promise<responses.ListDetectorRecipesResponse>;
    /**
     * Returns a list of detector rules for the detectorId passed.
     *
     * @param ListDetectorRulesRequest
     * @return ListDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRules.ts.html |here} to see how to use ListDetectorRules API.
     */
    listDetectorRules(listDetectorRulesRequest: requests.ListDetectorRulesRequest): Promise<responses.ListDetectorRulesResponse>;
    /**
     * Returns detector catalog - list of detectors supported by Cloud Guard
     *
     * @param ListDetectorsRequest
     * @return ListDetectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectors.ts.html |here} to see how to use ListDetectors API.
     */
    listDetectors(listDetectorsRequest: requests.ListDetectorsRequest): Promise<responses.ListDetectorsResponse>;
    /**
     * Returns a list of Impacted Resources for a CloudGuard Problem
     *
     * @param ListImpactedResourcesRequest
     * @return ListImpactedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListImpactedResources.ts.html |here} to see how to use ListImpactedResources API.
     */
    listImpactedResources(listImpactedResourcesRequest: requests.ListImpactedResourcesRequest): Promise<responses.ListImpactedResourcesResponse>;
    /**
     * Returns all ManagedList types supported by Cloud Guard
     * @param ListManagedListTypesRequest
     * @return ListManagedListTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListManagedListTypes.ts.html |here} to see how to use ListManagedListTypes API.
     */
    listManagedListTypes(listManagedListTypesRequest: requests.ListManagedListTypesRequest): Promise<responses.ListManagedListTypesResponse>;
    /**
       * Returns a list of ListManagedLists.
  * The ListManagedLists operation returns only the managed lists in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return ManagedLists in only
  * those compartments for which the requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListManagedLists on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListManagedListsRequest
       * @return ListManagedListsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListManagedLists.ts.html |here} to see how to use ListManagedLists API.
       */
    listManagedLists(listManagedListsRequest: requests.ListManagedListsRequest): Promise<responses.ListManagedListsResponse>;
    /**
     * Returns the list of global policy statements needed by Cloud Guard when enabling
     *
     * @param ListPoliciesRequest
     * @return ListPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListPolicies.ts.html |here} to see how to use ListPolicies API.
     */
    listPolicies(listPoliciesRequest: requests.ListPoliciesRequest): Promise<responses.ListPoliciesResponse>;
    /**
     * Returns a list of Actions done on CloudGuard Problem
     *
     * @param ListProblemHistoriesRequest
     * @return ListProblemHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListProblemHistories.ts.html |here} to see how to use ListProblemHistories API.
     */
    listProblemHistories(listProblemHistoriesRequest: requests.ListProblemHistoriesRequest): Promise<responses.ListProblemHistoriesResponse>;
    /**
       * Returns a list of all Problems identified by the Cloud Guard
  * <p>
  The ListProblems operation returns only the problems in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListProblems on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListProblemsRequest
       * @return ListProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListProblems.ts.html |here} to see how to use ListProblems API.
       */
    listProblems(listProblemsRequest: requests.ListProblemsRequest): Promise<responses.ListProblemsResponse>;
    /**
     * Returns a list of all Recommendations.
     *
     * @param ListRecommendationsRequest
     * @return ListRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
     */
    listRecommendations(listRecommendationsRequest: requests.ListRecommendationsRequest): Promise<responses.ListRecommendationsResponse>;
    /**
     * Returns a list of resource types.
     *
     * @param ListResourceTypesRequest
     * @return ListResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResourceTypes.ts.html |here} to see how to use ListResourceTypes API.
     */
    listResourceTypes(listResourceTypesRequest: requests.ListResourceTypesRequest): Promise<responses.ListResourceTypesResponse>;
    /**
     * Returns a list of Responder activities done on CloudGuard Problem
     *
     * @param ListResponderActivitiesRequest
     * @return ListResponderActivitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderActivities.ts.html |here} to see how to use ListResponderActivities API.
     */
    listResponderActivities(listResponderActivitiesRequest: requests.ListResponderActivitiesRequest): Promise<responses.ListResponderActivitiesResponse>;
    /**
     * Returns a list of Responder Executions. A Responder Execution is an entity that tracks the collective execution of multiple Responder Rule Executions for a given Problem.
     *
     * @param ListResponderExecutionsRequest
     * @return ListResponderExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderExecutions.ts.html |here} to see how to use ListResponderExecutions API.
     */
    listResponderExecutions(listResponderExecutionsRequest: requests.ListResponderExecutionsRequest): Promise<responses.ListResponderExecutionsResponse>;
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe.
     *
     * @param ListResponderRecipeResponderRulesRequest
     * @return ListResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRecipeResponderRules.ts.html |here} to see how to use ListResponderRecipeResponderRules API.
     */
    listResponderRecipeResponderRules(listResponderRecipeResponderRulesRequest: requests.ListResponderRecipeResponderRulesRequest): Promise<responses.ListResponderRecipeResponderRulesResponse>;
    /**
       * Returns a list of all ResponderRecipes in a compartment
  * The ListResponderRecipe operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListResponderRecipe on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListResponderRecipesRequest
       * @return ListResponderRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRecipes.ts.html |here} to see how to use ListResponderRecipes API.
       */
    listResponderRecipes(listResponderRecipesRequest: requests.ListResponderRecipesRequest): Promise<responses.ListResponderRecipesResponse>;
    /**
     * Returns a list of ResponderRule.
     *
     * @param ListResponderRulesRequest
     * @return ListResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRules.ts.html |here} to see how to use ListResponderRules API.
     */
    listResponderRules(listResponderRulesRequest: requests.ListResponderRulesRequest): Promise<responses.ListResponderRulesResponse>;
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe within a Target.
     *
     * @param ListTargetDetectorRecipeDetectorRulesRequest
     * @return ListTargetDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetDetectorRecipeDetectorRules.ts.html |here} to see how to use ListTargetDetectorRecipeDetectorRules API.
     */
    listTargetDetectorRecipeDetectorRules(listTargetDetectorRecipeDetectorRulesRequest: requests.ListTargetDetectorRecipeDetectorRulesRequest): Promise<responses.ListTargetDetectorRecipeDetectorRulesResponse>;
    /**
     * Returns a list of all detector recipes associated with the target identified by targetId
     * @param ListTargetDetectorRecipesRequest
     * @return ListTargetDetectorRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetDetectorRecipes.ts.html |here} to see how to use ListTargetDetectorRecipes API.
     */
    listTargetDetectorRecipes(listTargetDetectorRecipesRequest: requests.ListTargetDetectorRecipesRequest): Promise<responses.ListTargetDetectorRecipesResponse>;
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe within a Target.
     *
     * @param ListTargetResponderRecipeResponderRulesRequest
     * @return ListTargetResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetResponderRecipeResponderRules.ts.html |here} to see how to use ListTargetResponderRecipeResponderRules API.
     */
    listTargetResponderRecipeResponderRules(listTargetResponderRecipeResponderRulesRequest: requests.ListTargetResponderRecipeResponderRulesRequest): Promise<responses.ListTargetResponderRecipeResponderRulesResponse>;
    /**
     * Returns a list of all responder recipes associated with the target identified by targetId
     * @param ListTargetResponderRecipesRequest
     * @return ListTargetResponderRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetResponderRecipes.ts.html |here} to see how to use ListTargetResponderRecipes API.
     */
    listTargetResponderRecipes(listTargetResponderRecipesRequest: requests.ListTargetResponderRecipesRequest): Promise<responses.ListTargetResponderRecipesResponse>;
    /**
       * Returns a list of all Targets in a compartment
  * The ListTargets operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListTargets on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListTargetsRequest
       * @return ListTargetsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargets.ts.html |here} to see how to use ListTargets API.
       */
    listTargets(listTargetsRequest: requests.ListTargetsRequest): Promise<responses.ListTargetsResponse>;
    /**
     * Examines the number of problems related to the resource and the relative severity of those problems.
     *
     * @param RequestRiskScoresRequest
     * @return RequestRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestRiskScores.ts.html |here} to see how to use RequestRiskScores API.
     */
    requestRiskScores(requestRiskScoresRequest: requests.RequestRiskScoresRequest): Promise<responses.RequestRiskScoresResponse>;
    /**
     * Measures the number of resources examined across all regions and compares it with the
     * number of problems detected, for a given time period.
     *
     * @param RequestSecurityScoreSummarizedTrendRequest
     * @return RequestSecurityScoreSummarizedTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSecurityScoreSummarizedTrend.ts.html |here} to see how to use RequestSecurityScoreSummarizedTrend API.
     */
    requestSecurityScoreSummarizedTrend(requestSecurityScoreSummarizedTrendRequest: requests.RequestSecurityScoreSummarizedTrendRequest): Promise<responses.RequestSecurityScoreSummarizedTrendResponse>;
    /**
     * Measures the number of resources examined across all regions and compares it with the number of problems detected.
     *
     * @param RequestSecurityScoresRequest
     * @return RequestSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSecurityScores.ts.html |here} to see how to use RequestSecurityScores API.
     */
    requestSecurityScores(requestSecurityScoresRequest: requests.RequestSecurityScoresRequest): Promise<responses.RequestSecurityScoresResponse>;
    /**
       * Returns the summary of Activity type problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  * <p>
  The compartmentId to be passed with `accessLevel` and `compartmentIdInSubtree` params has to be the root
  * compartment id (tenant-id) only.
  *
       * @param RequestSummarizedActivityProblemsRequest
       * @return RequestSummarizedActivityProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedActivityProblems.ts.html |here} to see how to use RequestSummarizedActivityProblems API.
       */
    requestSummarizedActivityProblems(requestSummarizedActivityProblemsRequest: requests.RequestSummarizedActivityProblemsRequest): Promise<responses.RequestSummarizedActivityProblemsResponse>;
    /**
       * Returns the number of problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedProblemsRequest
       * @return RequestSummarizedProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedProblems.ts.html |here} to see how to use RequestSummarizedProblems API.
       */
    requestSummarizedProblems(requestSummarizedProblemsRequest: requests.RequestSummarizedProblemsRequest): Promise<responses.RequestSummarizedProblemsResponse>;
    /**
       * Returns the number of Responder Executions, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedResponderExecutionsRequest
       * @return RequestSummarizedResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedResponderExecutions.ts.html |here} to see how to use RequestSummarizedResponderExecutions API.
       */
    requestSummarizedResponderExecutions(requestSummarizedResponderExecutionsRequest: requests.RequestSummarizedResponderExecutionsRequest): Promise<responses.RequestSummarizedResponderExecutionsResponse>;
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedRiskScoresRequest
     * @return RequestSummarizedRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedRiskScores.ts.html |here} to see how to use RequestSummarizedRiskScores API.
     */
    requestSummarizedRiskScores(requestSummarizedRiskScoresRequest: requests.RequestSummarizedRiskScoresRequest): Promise<responses.RequestSummarizedRiskScoresResponse>;
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedSecurityScoresRequest
     * @return RequestSummarizedSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedSecurityScores.ts.html |here} to see how to use RequestSummarizedSecurityScores API.
     */
    requestSummarizedSecurityScores(requestSummarizedSecurityScoresRequest: requests.RequestSummarizedSecurityScoresRequest): Promise<responses.RequestSummarizedSecurityScoresResponse>;
    /**
       * Returns the number of problems identified by cloud guard, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedTrendProblemsRequest
       * @return RequestSummarizedTrendProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendProblems.ts.html |here} to see how to use RequestSummarizedTrendProblems API.
       */
    requestSummarizedTrendProblems(requestSummarizedTrendProblemsRequest: requests.RequestSummarizedTrendProblemsRequest): Promise<responses.RequestSummarizedTrendProblemsResponse>;
    /**
       * Returns the number of remediations performed by Responders, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedTrendResponderExecutionsRequest
       * @return RequestSummarizedTrendResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendResponderExecutions.ts.html |here} to see how to use RequestSummarizedTrendResponderExecutions API.
       */
    requestSummarizedTrendResponderExecutions(requestSummarizedTrendResponderExecutionsRequest: requests.RequestSummarizedTrendResponderExecutionsRequest): Promise<responses.RequestSummarizedTrendResponderExecutionsResponse>;
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedTrendSecurityScoresRequest
     * @return RequestSummarizedTrendSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendSecurityScores.ts.html |here} to see how to use RequestSummarizedTrendSecurityScores API.
     */
    requestSummarizedTrendSecurityScores(requestSummarizedTrendSecurityScoresRequest: requests.RequestSummarizedTrendSecurityScoresRequest): Promise<responses.RequestSummarizedTrendSecurityScoresResponse>;
    /**
     * Skips the execution for a bulk of responder executions
     * The operation is atomic in nature
     *
     * @param SkipBulkResponderExecutionRequest
     * @return SkipBulkResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/SkipBulkResponderExecution.ts.html |here} to see how to use SkipBulkResponderExecution API.
     */
    skipBulkResponderExecution(skipBulkResponderExecutionRequest: requests.SkipBulkResponderExecutionRequest): Promise<responses.SkipBulkResponderExecutionResponse>;
    /**
     * Skips the execution of the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * @param SkipResponderExecutionRequest
     * @return SkipResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/SkipResponderExecution.ts.html |here} to see how to use SkipResponderExecution API.
     */
    skipResponderExecution(skipResponderExecutionRequest: requests.SkipResponderExecutionRequest): Promise<responses.SkipResponderExecutionResponse>;
    /**
     * push the problem to responder
     *
     * @param TriggerResponderRequest
     * @return TriggerResponderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/TriggerResponder.ts.html |here} to see how to use TriggerResponder API.
     */
    triggerResponder(triggerResponderRequest: requests.TriggerResponderRequest): Promise<responses.TriggerResponderResponse>;
    /**
     * Updates the statuses in bulk for a list of problems
     * The operation is atomic in nature
     *
     * @param UpdateBulkProblemStatusRequest
     * @return UpdateBulkProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateBulkProblemStatus.ts.html |here} to see how to use UpdateBulkProblemStatus API.
     */
    updateBulkProblemStatus(updateBulkProblemStatusRequest: requests.UpdateBulkProblemStatusRequest): Promise<responses.UpdateBulkProblemStatusResponse>;
    /**
     * Enable/Disable Cloud Guard. The reporting region cannot be updated once created.
     *
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest: requests.UpdateConfigurationRequest): Promise<responses.UpdateConfigurationResponse>;
    /**
     * Updates a DataMaskRule identified by dataMaskRuleId
     * @param UpdateDataMaskRuleRequest
     * @return UpdateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDataMaskRule.ts.html |here} to see how to use UpdateDataMaskRule API.
     */
    updateDataMaskRule(updateDataMaskRuleRequest: requests.UpdateDataMaskRuleRequest): Promise<responses.UpdateDataMaskRuleResponse>;
    /**
     * Updates a detector recipe identified by detectorRecipeId
     * @param UpdateDetectorRecipeRequest
     * @return UpdateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDetectorRecipe.ts.html |here} to see how to use UpdateDetectorRecipe API.
     */
    updateDetectorRecipe(updateDetectorRecipeRequest: requests.UpdateDetectorRecipeRequest): Promise<responses.UpdateDetectorRecipeResponse>;
    /**
     * Update the DetectorRule by identifier
     * @param UpdateDetectorRecipeDetectorRuleRequest
     * @return UpdateDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateDetectorRecipeDetectorRule API.
     */
    updateDetectorRecipeDetectorRule(updateDetectorRecipeDetectorRuleRequest: requests.UpdateDetectorRecipeDetectorRuleRequest): Promise<responses.UpdateDetectorRecipeDetectorRuleResponse>;
    /**
     * Updates a managed list identified by managedListId
     * @param UpdateManagedListRequest
     * @return UpdateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateManagedList.ts.html |here} to see how to use UpdateManagedList API.
     */
    updateManagedList(updateManagedListRequest: requests.UpdateManagedListRequest): Promise<responses.UpdateManagedListResponse>;
    /**
     * updates the problem details
     *
     * @param UpdateProblemStatusRequest
     * @return UpdateProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateProblemStatus.ts.html |here} to see how to use UpdateProblemStatus API.
     */
    updateProblemStatus(updateProblemStatusRequest: requests.UpdateProblemStatusRequest): Promise<responses.UpdateProblemStatusResponse>;
    /**
     * Update the ResponderRecipe resource by identifier
     * @param UpdateResponderRecipeRequest
     * @return UpdateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateResponderRecipe.ts.html |here} to see how to use UpdateResponderRecipe API.
     */
    updateResponderRecipe(updateResponderRecipeRequest: requests.UpdateResponderRecipeRequest): Promise<responses.UpdateResponderRecipeResponse>;
    /**
     * Update the ResponderRule by identifier
     * @param UpdateResponderRecipeResponderRuleRequest
     * @return UpdateResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateResponderRecipeResponderRule.ts.html |here} to see how to use UpdateResponderRecipeResponderRule API.
     */
    updateResponderRecipeResponderRule(updateResponderRecipeResponderRuleRequest: requests.UpdateResponderRecipeResponderRuleRequest): Promise<responses.UpdateResponderRecipeResponderRuleResponse>;
    /**
     * Updates a Target identified by targetId
     * @param UpdateTargetRequest
     * @return UpdateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTarget.ts.html |here} to see how to use UpdateTarget API.
     */
    updateTarget(updateTargetRequest: requests.UpdateTargetRequest): Promise<responses.UpdateTargetResponse>;
    /**
     * Update the TargetDetectorRecipe resource by identifier
     * @param UpdateTargetDetectorRecipeRequest
     * @return UpdateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetDetectorRecipe.ts.html |here} to see how to use UpdateTargetDetectorRecipe API.
     */
    updateTargetDetectorRecipe(updateTargetDetectorRecipeRequest: requests.UpdateTargetDetectorRecipeRequest): Promise<responses.UpdateTargetDetectorRecipeResponse>;
    /**
     * Update the DetectorRule by identifier
     * @param UpdateTargetDetectorRecipeDetectorRuleRequest
     * @return UpdateTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateTargetDetectorRecipeDetectorRule API.
     */
    updateTargetDetectorRecipeDetectorRule(updateTargetDetectorRecipeDetectorRuleRequest: requests.UpdateTargetDetectorRecipeDetectorRuleRequest): Promise<responses.UpdateTargetDetectorRecipeDetectorRuleResponse>;
    /**
     * Update the TargetResponderRecipe resource by identifier
     * @param UpdateTargetResponderRecipeRequest
     * @return UpdateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetResponderRecipe.ts.html |here} to see how to use UpdateTargetResponderRecipe API.
     */
    updateTargetResponderRecipe(updateTargetResponderRecipeRequest: requests.UpdateTargetResponderRecipeRequest): Promise<responses.UpdateTargetResponderRecipeResponse>;
    /**
     * Update the ResponderRule by identifier
     * @param UpdateTargetResponderRecipeResponderRuleRequest
     * @return UpdateTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetResponderRecipeResponderRule.ts.html |here} to see how to use UpdateTargetResponderRecipeResponderRule API.
     */
    updateTargetResponderRecipeResponderRule(updateTargetResponderRecipeResponderRuleRequest: requests.UpdateTargetResponderRecipeResponderRuleRequest): Promise<responses.UpdateTargetResponderRecipeResponderRuleResponse>;
}
