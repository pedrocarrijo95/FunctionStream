/**
 *
 *
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
import common = require("oci-common");
/**
 * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListProblems.ts.html |here} to see how to use ListProblemsRequest.
 */
export interface ListProblemsRequest extends common.BaseRequest {
    /**
     * The ID of the compartment in which to list resources.
     */
    "compartmentId": string;
    /**
     * Start time for a filter. If start time is not specified, start time will be set to current time - 30 days.
     */
    "timeLastDetectedGreaterThanOrEqualTo"?: Date;
    /**
     * End time for a filter. If end time is not specified, end time will be set to current time.
     */
    "timeLastDetectedLessThanOrEqualTo"?: Date;
    /**
     * Start time for a filter. If start time is not specified, start time will be set to current time - 30 days.
     */
    "timeFirstDetectedGreaterThanOrEqualTo"?: Date;
    /**
     * End time for a filter. If end time is not specified, end time will be set to current time.
     */
    "timeFirstDetectedLessThanOrEqualTo"?: Date;
    /**
     * The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     */
    "lifecycleDetail"?: model.ProblemLifecycleDetail;
    /**
     * The field life cycle state. Only one state can be provided. Default value for state is active. If no value is specified state is active.
     */
    "lifecycleState"?: model.ProblemLifecycleState;
    /**
     * OCI Monitoring region.
     */
    "region"?: string;
    /**
     * Risk level of the Problem.
     */
    "riskLevel"?: string;
    /**
     * Resource Type associated with the resource.
     */
    "resourceType"?: string;
    /**
     * City of the problem.
     */
    "city"?: string;
    /**
     * State of the problem.
     */
    "state"?: string;
    /**
     * Country of the problem.
     */
    "country"?: string;
    /**
     * Label associated with the Problem.
     */
    "label"?: string;
    /**
     * Comma seperated list of detector rule ids to be passed in to match against Problems.
     */
    "detectorRuleIdList"?: Array<string>;
    /**
     * The field to list the Problems by Detector Type. Valid values are IAAS_ACTIVITY_DETECTOR and IAAS_CONFIGURATION_DETECTOR
     *
     */
    "detectorType"?: model.DetectorEnum;
    /**
     * The ID of the target in which to list resources.
     */
    "targetId"?: string;
    /**
     * Default is false.
     * When set to true, the hierarchy of compartments is traversed
     * and all compartments and subcompartments in the tenancy are
     * returned depending on the the setting of `accessLevel`.
     *
     */
    "compartmentIdInSubtree"?: boolean;
    /**
     * Valid values are `RESTRICTED` and `ACCESSIBLE`. Default is `RESTRICTED`.
     * Setting this to `ACCESSIBLE` returns only those compartments for which the
     * user has INSPECT permissions directly or indirectly (permissions can be on a
     * resource in a subcompartment).
     * When set to `RESTRICTED` permissions are checked and no partial results are displayed.
     *
     */
    "accessLevel"?: ListProblemsRequest.AccessLevel;
    /**
     * The ID of the resource associated with the problem.
     */
    "resourceId"?: string;
    /**
     * The maximum number of items to return.
     */
    "limit"?: number;
    /**
     * The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
     */
    "page"?: string;
    /**
     * The sort order to use, either 'asc' or 'desc'.
     */
    "sortOrder"?: model.SortOrders;
    /**
     * The field to sort by. Only one sort order may be provided. Default order for riskLevel, timeLastDetected and resourceName is descending. Default order for riskLevel and resourceName is ascending. If no value is specified timeLastDetected is default.
     *
     */
    "sortBy"?: ListProblemsRequest.SortBy;
    /**
     * The client request ID for tracing.
     */
    "opcRequestId"?: string;
}
export declare namespace ListProblemsRequest {
    enum AccessLevel {
        Restricted = "RESTRICTED",
        Accessible = "ACCESSIBLE"
    }
    enum SortBy {
        RiskLevel = "riskLevel",
        TimeLastDetected = "timeLastDetected",
        ResourceName = "resourceName"
    }
}
