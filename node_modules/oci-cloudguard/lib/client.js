"use strict";
/**
 * Cloud Guard APIs
 * A description of the Cloud Guard APIs
 * OpenAPI spec version: 20200131
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudGuardClient = exports.CloudGuardApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const cloudguard_waiter_1 = require("./cloudguard-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var CloudGuardApiKeys;
(function (CloudGuardApiKeys) {
})(CloudGuardApiKeys = exports.CloudGuardApiKeys || (exports.CloudGuardApiKeys = {}));
class CloudGuardClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20200131";
        if (this.logger)
            this.logger.info(`CloudGuardClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CloudGuardClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CloudGuardClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new CloudGuardWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new cloudguard_waiter_1.CloudGuardWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Moves the DetectorRecipe from current compartment to another.
     * @param ChangeDetectorRecipeCompartmentRequest
     * @return ChangeDetectorRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeDetectorRecipeCompartment.ts.html |here} to see how to use ChangeDetectorRecipeCompartment API.
     */
    changeDetectorRecipeCompartment(changeDetectorRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#changeDetectorRecipeCompartment.");
            const pathParams = {
                "{detectorRecipeId}": changeDetectorRecipeCompartmentRequest.detectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeDetectorRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeDetectorRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeDetectorRecipeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDetectorRecipeCompartmentRequest.changeDetectorRecipeCompartmentDetails, "ChangeDetectorRecipeCompartmentDetails", models.ChangeDetectorRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDetectorRecipeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the ManagedList from current compartment to another.
     * @param ChangeManagedListCompartmentRequest
     * @return ChangeManagedListCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeManagedListCompartment.ts.html |here} to see how to use ChangeManagedListCompartment API.
     */
    changeManagedListCompartment(changeManagedListCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#changeManagedListCompartment.");
            const pathParams = {
                "{managedListId}": changeManagedListCompartmentRequest.managedListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeManagedListCompartmentRequest.ifMatch,
                "opc-request-id": changeManagedListCompartmentRequest.opcRequestId,
                "opc-retry-token": changeManagedListCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists/{managedListId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeManagedListCompartmentRequest.changeManagedListCompartmentDetails, "ChangeManagedListCompartmentDetails", models.ChangeManagedListCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeManagedListCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves the ResponderRecipe from current compartment to another.
     * @param ChangeResponderRecipeCompartmentRequest
     * @return ChangeResponderRecipeCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ChangeResponderRecipeCompartment.ts.html |here} to see how to use ChangeResponderRecipeCompartment API.
     */
    changeResponderRecipeCompartment(changeResponderRecipeCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#changeResponderRecipeCompartment.");
            const pathParams = {
                "{responderRecipeId}": changeResponderRecipeCompartmentRequest.responderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeResponderRecipeCompartmentRequest.ifMatch,
                "opc-request-id": changeResponderRecipeCompartmentRequest.opcRequestId,
                "opc-retry-token": changeResponderRecipeCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeResponderRecipeCompartmentRequest.changeResponderRecipeCompartmentDetails, "ChangeResponderRecipeCompartmentDetails", models.ChangeResponderRecipeCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeResponderRecipeCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Data Mask Rule Definition
     *
     * @param CreateDataMaskRuleRequest
     * @return CreateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateDataMaskRule.ts.html |here} to see how to use CreateDataMaskRule API.
     */
    createDataMaskRule(createDataMaskRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createDataMaskRule.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDataMaskRuleRequest.opcRetryToken,
                "opc-request-id": createDataMaskRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataMaskRules",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDataMaskRuleRequest.createDataMaskRuleDetails, "CreateDataMaskRuleDetails", models.CreateDataMaskRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDataMaskRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataMaskRule",
                    bodyModel: "model.DataMaskRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a DetectorRecipe
     *
     * @param CreateDetectorRecipeRequest
     * @return CreateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateDetectorRecipe.ts.html |here} to see how to use CreateDetectorRecipe API.
     */
    createDetectorRecipe(createDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createDetectorRecipe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createDetectorRecipeRequest.opcRetryToken,
                "opc-request-id": createDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createDetectorRecipeRequest.createDetectorRecipeDetails, "CreateDetectorRecipeDetails", models.CreateDetectorRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipe",
                    bodyModel: "model.DetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new ManagedList.
     *
     * @param CreateManagedListRequest
     * @return CreateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateManagedList.ts.html |here} to see how to use CreateManagedList API.
     */
    createManagedList(createManagedListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createManagedList.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createManagedListRequest.opcRetryToken,
                "opc-request-id": createManagedListRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagedListRequest.createManagedListDetails, "CreateManagedListDetails", models.CreateManagedListDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createManagedListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedList",
                    bodyModel: "model.ManagedList",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create a ResponderRecipe.
     *
     * @param CreateResponderRecipeRequest
     * @return CreateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateResponderRecipe.ts.html |here} to see how to use CreateResponderRecipe API.
     */
    createResponderRecipe(createResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createResponderRecipe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createResponderRecipeRequest.opcRetryToken,
                "opc-request-id": createResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createResponderRecipeRequest.createResponderRecipeDetails, "CreateResponderRecipeDetails", models.CreateResponderRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipe",
                    bodyModel: "model.ResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new Target
     *
     * @param CreateTargetRequest
     * @return CreateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTarget.ts.html |here} to see how to use CreateTarget API.
     */
    createTarget(createTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createTarget.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTargetRequest.opcRetryToken,
                "opc-request-id": createTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTargetRequest.createTargetDetails, "CreateTargetDetails", models.CreateTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "target",
                    bodyModel: "model.Target",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attach a DetectorRecipe with the Target
     *
     * @param CreateTargetDetectorRecipeRequest
     * @return CreateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTargetDetectorRecipe.ts.html |here} to see how to use CreateTargetDetectorRecipe API.
     */
    createTargetDetectorRecipe(createTargetDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createTargetDetectorRecipe.");
            const pathParams = {
                "{targetId}": createTargetDetectorRecipeRequest.targetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTargetDetectorRecipeRequest.opcRetryToken,
                "opc-request-id": createTargetDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTargetDetectorRecipeRequest.attachTargetDetectorRecipeDetails, "AttachTargetDetectorRecipeDetails", models.AttachTargetDetectorRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTargetDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipe",
                    bodyModel: "model.TargetDetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attach a ResponderRecipe with the Target
     *
     * @param CreateTargetResponderRecipeRequest
     * @return CreateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/CreateTargetResponderRecipe.ts.html |here} to see how to use CreateTargetResponderRecipe API.
     */
    createTargetResponderRecipe(createTargetResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#createTargetResponderRecipe.");
            const pathParams = {
                "{targetId}": createTargetResponderRecipeRequest.targetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createTargetResponderRecipeRequest.opcRetryToken,
                "opc-request-id": createTargetResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createTargetResponderRecipeRequest.attachTargetResponderRecipeDetails, "AttachTargetResponderRecipeDetails", models.AttachTargetResponderRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createTargetResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipe",
                    bodyModel: "model.TargetResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a DataMaskRule identified by dataMaskRuleId
     * @param DeleteDataMaskRuleRequest
     * @return DeleteDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteDataMaskRule.ts.html |here} to see how to use DeleteDataMaskRule API.
     */
    deleteDataMaskRule(deleteDataMaskRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteDataMaskRule.");
            const pathParams = {
                "{dataMaskRuleId}": deleteDataMaskRuleRequest.dataMaskRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDataMaskRuleRequest.ifMatch,
                "opc-request-id": deleteDataMaskRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataMaskRules/{dataMaskRuleId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDataMaskRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a DetectorRecipe identified by detectorRecipeId
     * @param DeleteDetectorRecipeRequest
     * @return DeleteDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteDetectorRecipe.ts.html |here} to see how to use DeleteDetectorRecipe API.
     */
    deleteDetectorRecipe(deleteDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteDetectorRecipe.");
            const pathParams = {
                "{detectorRecipeId}": deleteDetectorRecipeRequest.detectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteDetectorRecipeRequest.ifMatch,
                "opc-request-id": deleteDetectorRecipeRequest.opcRequestId,
                "opc-retry-token": deleteDetectorRecipeRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a managed list identified by managedListId
     * @param DeleteManagedListRequest
     * @return DeleteManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteManagedList.ts.html |here} to see how to use DeleteManagedList API.
     */
    deleteManagedList(deleteManagedListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteManagedList.");
            const pathParams = {
                "{managedListId}": deleteManagedListRequest.managedListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagedListRequest.ifMatch,
                "opc-request-id": deleteManagedListRequest.opcRequestId,
                "opc-retry-token": deleteManagedListRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists/{managedListId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteManagedListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete the ResponderRecipe resource by identifier
     * @param DeleteResponderRecipeRequest
     * @return DeleteResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteResponderRecipe.ts.html |here} to see how to use DeleteResponderRecipe API.
     */
    deleteResponderRecipe(deleteResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteResponderRecipe.");
            const pathParams = {
                "{responderRecipeId}": deleteResponderRecipeRequest.responderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteResponderRecipeRequest.ifMatch,
                "opc-request-id": deleteResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a Target identified by targetId
     * @param DeleteTargetRequest
     * @return DeleteTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTarget.ts.html |here} to see how to use DeleteTarget API.
     */
    deleteTarget(deleteTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteTarget.");
            const pathParams = {
                "{targetId}": deleteTargetRequest.targetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTargetRequest.ifMatch,
                "opc-request-id": deleteTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete the TargetDetectorRecipe resource by identifier
     * @param DeleteTargetDetectorRecipeRequest
     * @return DeleteTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTargetDetectorRecipe.ts.html |here} to see how to use DeleteTargetDetectorRecipe API.
     */
    deleteTargetDetectorRecipe(deleteTargetDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteTargetDetectorRecipe.");
            const pathParams = {
                "{targetId}": deleteTargetDetectorRecipeRequest.targetId,
                "{targetDetectorRecipeId}": deleteTargetDetectorRecipeRequest.targetDetectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTargetDetectorRecipeRequest.ifMatch,
                "opc-request-id": deleteTargetDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTargetDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Delete the TargetResponderRecipe resource by identifier
     * @param DeleteTargetResponderRecipeRequest
     * @return DeleteTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/DeleteTargetResponderRecipe.ts.html |here} to see how to use DeleteTargetResponderRecipe API.
     */
    deleteTargetResponderRecipe(deleteTargetResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#deleteTargetResponderRecipe.");
            const pathParams = {
                "{targetId}": deleteTargetResponderRecipeRequest.targetId,
                "{targetResponderRecipeId}": deleteTargetResponderRecipeRequest.targetResponderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteTargetResponderRecipeRequest.ifMatch,
                "opc-request-id": deleteTargetResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteTargetResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Executes the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * @param ExecuteResponderExecutionRequest
     * @return ExecuteResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ExecuteResponderExecution.ts.html |here} to see how to use ExecuteResponderExecution API.
     */
    executeResponderExecution(executeResponderExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#executeResponderExecution.");
            const pathParams = {
                "{responderExecutionId}": executeResponderExecutionRequest.responderExecutionId
            };
            const queryParams = {
                "compartmentId": executeResponderExecutionRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": executeResponderExecutionRequest.ifMatch,
                "opc-request-id": executeResponderExecutionRequest.opcRequestId,
                "opc-retry-token": executeResponderExecutionRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/{responderExecutionId}/actions/execute",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(executeResponderExecutionRequest.executeResponderExecutionDetails, "ExecuteResponderExecutionDetails", models.ExecuteResponderExecutionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, executeResponderExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns ConditionType with its details.
     *
     * @param GetConditionMetadataTypeRequest
     * @return GetConditionMetadataTypeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetConditionMetadataType.ts.html |here} to see how to use GetConditionMetadataType API.
     */
    getConditionMetadataType(getConditionMetadataTypeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getConditionMetadataType.");
            const pathParams = {
                "{conditionMetadataTypeId}": getConditionMetadataTypeRequest.conditionMetadataTypeId
            };
            const queryParams = {
                "serviceType": getConditionMetadataTypeRequest.serviceType,
                "resourceType": getConditionMetadataTypeRequest.resourceType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getConditionMetadataTypeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/conditionMetadataTypes/{conditionMetadataTypeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConditionMetadataTypeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "conditionMetadataType",
                    bodyModel: "model.ConditionMetadataType",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * GET Cloud Guard Configuration Details for a Tenancy.
     * @param GetConfigurationRequest
     * @return GetConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetConfiguration.ts.html |here} to see how to use GetConfiguration API.
     */
    getConfiguration(getConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getConfiguration.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": getConfigurationRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getConfigurationRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a DataMaskRule identified by DataMaskRuleId
     * @param GetDataMaskRuleRequest
     * @return GetDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDataMaskRule.ts.html |here} to see how to use GetDataMaskRule API.
     */
    getDataMaskRule(getDataMaskRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getDataMaskRule.");
            const pathParams = {
                "{dataMaskRuleId}": getDataMaskRuleRequest.dataMaskRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDataMaskRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataMaskRules/{dataMaskRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDataMaskRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataMaskRule",
                    bodyModel: "model.DataMaskRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Detector identified by detectorId.
     *
     * @param GetDetectorRequest
     * @return GetDetectorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetector.ts.html |here} to see how to use GetDetector API.
     */
    getDetector(getDetectorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getDetector.");
            const pathParams = {
                "{detectorId}": getDetectorRequest.detectorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDetectorRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectors/{detectorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDetectorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detector",
                    bodyModel: "model.Detector",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a DetectorRecipe identified by detectorRecipeId
     * @param GetDetectorRecipeRequest
     * @return GetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRecipe.ts.html |here} to see how to use GetDetectorRecipe API.
     */
    getDetectorRecipe(getDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getDetectorRecipe.");
            const pathParams = {
                "{detectorRecipeId}": getDetectorRecipeRequest.detectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipe",
                    bodyModel: "model.DetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get DetectorRule by identifier
     * @param GetDetectorRecipeDetectorRuleRequest
     * @return GetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetDetectorRecipeDetectorRule API.
     */
    getDetectorRecipeDetectorRule(getDetectorRecipeDetectorRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getDetectorRecipeDetectorRule.");
            const pathParams = {
                "{detectorRecipeId}": getDetectorRecipeDetectorRuleRequest.detectorRecipeId,
                "{detectorRuleId}": getDetectorRecipeDetectorRuleRequest.detectorRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDetectorRecipeDetectorRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}/detectorRules/{detectorRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDetectorRecipeDetectorRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipeDetectorRule",
                    bodyModel: "model.DetectorRecipeDetectorRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Detector Rule identified by detectorRuleId
     *
     * @param GetDetectorRuleRequest
     * @return GetDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetDetectorRule.ts.html |here} to see how to use GetDetectorRule API.
     */
    getDetectorRule(getDetectorRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getDetectorRule.");
            const pathParams = {
                "{detectorId}": getDetectorRuleRequest.detectorId,
                "{detectorRuleId}": getDetectorRuleRequest.detectorRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDetectorRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectors/{detectorId}/detectorRules/{detectorRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDetectorRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRule",
                    bodyModel: "model.DetectorRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a managed list identified by managedListId
     * @param GetManagedListRequest
     * @return GetManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetManagedList.ts.html |here} to see how to use GetManagedList API.
     */
    getManagedList(getManagedListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getManagedList.");
            const pathParams = {
                "{managedListId}": getManagedListRequest.managedListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedListRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists/{managedListId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getManagedListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedList",
                    bodyModel: "model.ManagedList",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Problems response
     * @param GetProblemRequest
     * @return GetProblemResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetProblem.ts.html |here} to see how to use GetProblem API.
     */
    getProblem(getProblemRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getProblem.");
            const pathParams = {
                "{problemId}": getProblemRequest.problemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getProblemRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getProblemRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problem",
                    bodyModel: "model.Problem",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Responder Execution identified by responderExecutionId
     *
     * @param GetResponderExecutionRequest
     * @return GetResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderExecution.ts.html |here} to see how to use GetResponderExecution API.
     */
    getResponderExecution(getResponderExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getResponderExecution.");
            const pathParams = {
                "{responderExecutionId}": getResponderExecutionRequest.responderExecutionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getResponderExecutionRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/{responderExecutionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResponderExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderExecution",
                    bodyModel: "model.ResponderExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a ResponderRecipe by identifier
     * @param GetResponderRecipeRequest
     * @return GetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRecipe.ts.html |here} to see how to use GetResponderRecipe API.
     */
    getResponderRecipe(getResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getResponderRecipe.");
            const pathParams = {
                "{responderRecipeId}": getResponderRecipeRequest.responderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipe",
                    bodyModel: "model.ResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get ResponderRule by identifier
     * @param GetResponderRecipeResponderRuleRequest
     * @return GetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRecipeResponderRule.ts.html |here} to see how to use GetResponderRecipeResponderRule API.
     */
    getResponderRecipeResponderRule(getResponderRecipeResponderRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getResponderRecipeResponderRule.");
            const pathParams = {
                "{responderRecipeId}": getResponderRecipeResponderRuleRequest.responderRecipeId,
                "{responderRuleId}": getResponderRecipeResponderRuleRequest.responderRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getResponderRecipeResponderRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}/responderRules/{responderRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResponderRecipeResponderRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipeResponderRule",
                    bodyModel: "model.ResponderRecipeResponderRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a ResponderRule by identifier
     * @param GetResponderRuleRequest
     * @return GetResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetResponderRule.ts.html |here} to see how to use GetResponderRule API.
     */
    getResponderRule(getResponderRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getResponderRule.");
            const pathParams = {
                "{responderRuleId}": getResponderRuleRequest.responderRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getResponderRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRules/{responderRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getResponderRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRule",
                    bodyModel: "model.ResponderRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a Target identified by targetId
     * @param GetTargetRequest
     * @return GetTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTarget.ts.html |here} to see how to use GetTarget API.
     */
    getTarget(getTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getTarget.");
            const pathParams = {
                "{targetId}": getTargetRequest.targetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "target",
                    bodyModel: "model.Target",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a TargetDetectorRecipe by identifier
     * @param GetTargetDetectorRecipeRequest
     * @return GetTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetDetectorRecipe.ts.html |here} to see how to use GetTargetDetectorRecipe API.
     */
    getTargetDetectorRecipe(getTargetDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getTargetDetectorRecipe.");
            const pathParams = {
                "{targetId}": getTargetDetectorRecipeRequest.targetId,
                "{targetDetectorRecipeId}": getTargetDetectorRecipeRequest.targetDetectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTargetDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipe",
                    bodyModel: "model.TargetDetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get DetectorRule by identifier
     * @param GetTargetDetectorRecipeDetectorRuleRequest
     * @return GetTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use GetTargetDetectorRecipeDetectorRule API.
     */
    getTargetDetectorRecipeDetectorRule(getTargetDetectorRecipeDetectorRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getTargetDetectorRecipeDetectorRule.");
            const pathParams = {
                "{targetId}": getTargetDetectorRecipeDetectorRuleRequest.targetId,
                "{targetDetectorRecipeId}": getTargetDetectorRecipeDetectorRuleRequest.targetDetectorRecipeId,
                "{detectorRuleId}": getTargetDetectorRecipeDetectorRuleRequest.detectorRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetDetectorRecipeDetectorRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules/{detectorRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTargetDetectorRecipeDetectorRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipeDetectorRule",
                    bodyModel: "model.TargetDetectorRecipeDetectorRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get a TargetResponderRecipe by identifier
     * @param GetTargetResponderRecipeRequest
     * @return GetTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetResponderRecipe.ts.html |here} to see how to use GetTargetResponderRecipe API.
     */
    getTargetResponderRecipe(getTargetResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getTargetResponderRecipe.");
            const pathParams = {
                "{targetId}": getTargetResponderRecipeRequest.targetId,
                "{targetResponderRecipeId}": getTargetResponderRecipeRequest.targetResponderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTargetResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipe",
                    bodyModel: "model.TargetResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get ResponderRule by identifier
     * @param GetTargetResponderRecipeResponderRuleRequest
     * @return GetTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/GetTargetResponderRecipeResponderRule.ts.html |here} to see how to use GetTargetResponderRecipeResponderRule API.
     */
    getTargetResponderRecipeResponderRule(getTargetResponderRecipeResponderRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#getTargetResponderRecipeResponderRule.");
            const pathParams = {
                "{targetId}": getTargetResponderRecipeResponderRuleRequest.targetId,
                "{targetResponderRecipeId}": getTargetResponderRecipeResponderRuleRequest.targetResponderRecipeId,
                "{responderRuleId}": getTargetResponderRecipeResponderRuleRequest.responderRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getTargetResponderRecipeResponderRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules/{responderRuleId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getTargetResponderRecipeResponderRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipeResponderRule",
                    bodyModel: "model.TargetResponderRecipeResponderRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of condition types.
     *
     * @param ListConditionMetadataTypesRequest
     * @return ListConditionMetadataTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListConditionMetadataTypes.ts.html |here} to see how to use ListConditionMetadataTypes API.
     */
    listConditionMetadataTypes(listConditionMetadataTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listConditionMetadataTypes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listConditionMetadataTypesRequest.compartmentId,
                "lifecycleState": listConditionMetadataTypesRequest.lifecycleState,
                "limit": listConditionMetadataTypesRequest.limit,
                "page": listConditionMetadataTypesRequest.page,
                "sortOrder": listConditionMetadataTypesRequest.sortOrder,
                "sortBy": listConditionMetadataTypesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listConditionMetadataTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/conditionMetadataTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listConditionMetadataTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "conditionMetadataTypeCollection",
                    bodyModel: "model.ConditionMetadataTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all Data Mask Rules in the root 'compartmentId' passed.
     *
     * @param ListDataMaskRulesRequest
     * @return ListDataMaskRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDataMaskRules.ts.html |here} to see how to use ListDataMaskRules API.
     */
    listDataMaskRules(listDataMaskRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listDataMaskRules.");
            const pathParams = {};
            const queryParams = {
                "displayName": listDataMaskRulesRequest.displayName,
                "compartmentId": listDataMaskRulesRequest.compartmentId,
                "lifecycleState": listDataMaskRulesRequest.lifecycleState,
                "accessLevel": listDataMaskRulesRequest.accessLevel,
                "limit": listDataMaskRulesRequest.limit,
                "page": listDataMaskRulesRequest.page,
                "sortOrder": listDataMaskRulesRequest.sortOrder,
                "sortBy": listDataMaskRulesRequest.sortBy,
                "dataMaskRuleStatus": listDataMaskRulesRequest.dataMaskRuleStatus,
                "targetId": listDataMaskRulesRequest.targetId,
                "iamGroupId": listDataMaskRulesRequest.iamGroupId,
                "targetType": listDataMaskRulesRequest.targetType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDataMaskRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataMaskRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDataMaskRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataMaskRuleCollection",
                    bodyModel: "model.DataMaskRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe.
     *
     * @param ListDetectorRecipeDetectorRulesRequest
     * @return ListDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRecipeDetectorRules.ts.html |here} to see how to use ListDetectorRecipeDetectorRules API.
     */
    listDetectorRecipeDetectorRules(listDetectorRecipeDetectorRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listDetectorRecipeDetectorRules.");
            const pathParams = {
                "{detectorRecipeId}": listDetectorRecipeDetectorRulesRequest.detectorRecipeId
            };
            const queryParams = {
                "compartmentId": listDetectorRecipeDetectorRulesRequest.compartmentId,
                "displayName": listDetectorRecipeDetectorRulesRequest.displayName,
                "lifecycleState": listDetectorRecipeDetectorRulesRequest.lifecycleState,
                "limit": listDetectorRecipeDetectorRulesRequest.limit,
                "page": listDetectorRecipeDetectorRulesRequest.page,
                "sortOrder": listDetectorRecipeDetectorRulesRequest.sortOrder,
                "sortBy": listDetectorRecipeDetectorRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDetectorRecipeDetectorRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}/detectorRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDetectorRecipeDetectorRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipeDetectorRuleCollection",
                    bodyModel: "model.DetectorRecipeDetectorRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns a list of all Detector Recipes in a compartment
  * <p>
  The ListDetectorRecipes operation returns only the detector recipes in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListDetectorRecipes on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListDetectorRecipesRequest
       * @return ListDetectorRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRecipes.ts.html |here} to see how to use ListDetectorRecipes API.
       */
    listDetectorRecipes(listDetectorRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listDetectorRecipes.");
            const pathParams = {};
            const queryParams = {
                "displayName": listDetectorRecipesRequest.displayName,
                "resourceMetadataOnly": listDetectorRecipesRequest.resourceMetadataOnly,
                "compartmentId": listDetectorRecipesRequest.compartmentId,
                "lifecycleState": listDetectorRecipesRequest.lifecycleState,
                "limit": listDetectorRecipesRequest.limit,
                "page": listDetectorRecipesRequest.page,
                "compartmentIdInSubtree": listDetectorRecipesRequest.compartmentIdInSubtree,
                "accessLevel": listDetectorRecipesRequest.accessLevel,
                "sortOrder": listDetectorRecipesRequest.sortOrder,
                "sortBy": listDetectorRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDetectorRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDetectorRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipeCollection",
                    bodyModel: "model.DetectorRecipeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of detector rules for the detectorId passed.
     *
     * @param ListDetectorRulesRequest
     * @return ListDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectorRules.ts.html |here} to see how to use ListDetectorRules API.
     */
    listDetectorRules(listDetectorRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listDetectorRules.");
            const pathParams = {
                "{detectorId}": listDetectorRulesRequest.detectorId
            };
            const queryParams = {
                "compartmentId": listDetectorRulesRequest.compartmentId,
                "displayName": listDetectorRulesRequest.displayName,
                "limit": listDetectorRulesRequest.limit,
                "lifecycleState": listDetectorRulesRequest.lifecycleState,
                "page": listDetectorRulesRequest.page,
                "sortOrder": listDetectorRulesRequest.sortOrder,
                "sortBy": listDetectorRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDetectorRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectors/{detectorId}/detectorRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDetectorRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRuleCollection",
                    bodyModel: "model.DetectorRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns detector catalog - list of detectors supported by Cloud Guard
     *
     * @param ListDetectorsRequest
     * @return ListDetectorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListDetectors.ts.html |here} to see how to use ListDetectors API.
     */
    listDetectors(listDetectorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listDetectors.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listDetectorsRequest.compartmentId,
                "limit": listDetectorsRequest.limit,
                "lifecycleState": listDetectorsRequest.lifecycleState,
                "page": listDetectorsRequest.page,
                "sortOrder": listDetectorsRequest.sortOrder,
                "sortBy": listDetectorsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDetectorsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDetectorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorCollection",
                    bodyModel: "model.DetectorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Impacted Resources for a CloudGuard Problem
     *
     * @param ListImpactedResourcesRequest
     * @return ListImpactedResourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListImpactedResources.ts.html |here} to see how to use ListImpactedResources API.
     */
    listImpactedResources(listImpactedResourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listImpactedResources.");
            const pathParams = {
                "{problemId}": listImpactedResourcesRequest.problemId
            };
            const queryParams = {
                "limit": listImpactedResourcesRequest.limit,
                "page": listImpactedResourcesRequest.page,
                "sortOrder": listImpactedResourcesRequest.sortOrder,
                "sortBy": listImpactedResourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listImpactedResourcesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}/impactedResources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listImpactedResourcesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "impactedResourceCollection",
                    bodyModel: "model.ImpactedResourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns all ManagedList types supported by Cloud Guard
     * @param ListManagedListTypesRequest
     * @return ListManagedListTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListManagedListTypes.ts.html |here} to see how to use ListManagedListTypes API.
     */
    listManagedListTypes(listManagedListTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listManagedListTypes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedListTypesRequest.compartmentId,
                "lifecycleState": listManagedListTypesRequest.lifecycleState,
                "limit": listManagedListTypesRequest.limit,
                "page": listManagedListTypesRequest.page,
                "sortOrder": listManagedListTypesRequest.sortOrder,
                "sortBy": listManagedListTypesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedListTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedListTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listManagedListTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedListTypeCollection",
                    bodyModel: "model.ManagedListTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns a list of ListManagedLists.
  * The ListManagedLists operation returns only the managed lists in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return ManagedLists in only
  * those compartments for which the requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListManagedLists on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListManagedListsRequest
       * @return ListManagedListsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListManagedLists.ts.html |here} to see how to use ListManagedLists API.
       */
    listManagedLists(listManagedListsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listManagedLists.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedListsRequest.compartmentId,
                "displayName": listManagedListsRequest.displayName,
                "resourceMetadataOnly": listManagedListsRequest.resourceMetadataOnly,
                "lifecycleState": listManagedListsRequest.lifecycleState,
                "listType": listManagedListsRequest.listType,
                "limit": listManagedListsRequest.limit,
                "page": listManagedListsRequest.page,
                "compartmentIdInSubtree": listManagedListsRequest.compartmentIdInSubtree,
                "accessLevel": listManagedListsRequest.accessLevel,
                "sortOrder": listManagedListsRequest.sortOrder,
                "sortBy": listManagedListsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedListsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listManagedListsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedListCollection",
                    bodyModel: "model.ManagedListCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the list of global policy statements needed by Cloud Guard when enabling
     *
     * @param ListPoliciesRequest
     * @return ListPoliciesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListPolicies.ts.html |here} to see how to use ListPolicies API.
     */
    listPolicies(listPoliciesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listPolicies.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listPoliciesRequest.compartmentId,
                "limit": listPoliciesRequest.limit,
                "page": listPoliciesRequest.page,
                "sortOrder": listPoliciesRequest.sortOrder,
                "sortBy": listPoliciesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPoliciesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/policies",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPoliciesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "policyCollection",
                    bodyModel: "model.PolicyCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Actions done on CloudGuard Problem
     *
     * @param ListProblemHistoriesRequest
     * @return ListProblemHistoriesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListProblemHistories.ts.html |here} to see how to use ListProblemHistories API.
     */
    listProblemHistories(listProblemHistoriesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listProblemHistories.");
            const pathParams = {
                "{problemId}": listProblemHistoriesRequest.problemId
            };
            const queryParams = {
                "compartmentId": listProblemHistoriesRequest.compartmentId,
                "limit": listProblemHistoriesRequest.limit,
                "page": listProblemHistoriesRequest.page,
                "sortOrder": listProblemHistoriesRequest.sortOrder,
                "sortBy": listProblemHistoriesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProblemHistoriesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}/histories",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listProblemHistoriesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problemHistoryCollection",
                    bodyModel: "model.ProblemHistoryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns a list of all Problems identified by the Cloud Guard
  * <p>
  The ListProblems operation returns only the problems in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListProblems on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListProblemsRequest
       * @return ListProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListProblems.ts.html |here} to see how to use ListProblems API.
       */
    listProblems(listProblemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listProblems.");
            const pathParams = {};
            const queryParams = {
                "timeLastDetectedGreaterThanOrEqualTo": listProblemsRequest.timeLastDetectedGreaterThanOrEqualTo,
                "timeLastDetectedLessThanOrEqualTo": listProblemsRequest.timeLastDetectedLessThanOrEqualTo,
                "timeFirstDetectedGreaterThanOrEqualTo": listProblemsRequest.timeFirstDetectedGreaterThanOrEqualTo,
                "timeFirstDetectedLessThanOrEqualTo": listProblemsRequest.timeFirstDetectedLessThanOrEqualTo,
                "lifecycleDetail": listProblemsRequest.lifecycleDetail,
                "lifecycleState": listProblemsRequest.lifecycleState,
                "region": listProblemsRequest.region,
                "compartmentId": listProblemsRequest.compartmentId,
                "riskLevel": listProblemsRequest.riskLevel,
                "resourceType": listProblemsRequest.resourceType,
                "city": listProblemsRequest.city,
                "state": listProblemsRequest.state,
                "country": listProblemsRequest.country,
                "label": listProblemsRequest.label,
                "detectorRuleIdList": listProblemsRequest.detectorRuleIdList,
                "detectorType": listProblemsRequest.detectorType,
                "targetId": listProblemsRequest.targetId,
                "compartmentIdInSubtree": listProblemsRequest.compartmentIdInSubtree,
                "accessLevel": listProblemsRequest.accessLevel,
                "resourceId": listProblemsRequest.resourceId,
                "limit": listProblemsRequest.limit,
                "page": listProblemsRequest.page,
                "sortOrder": listProblemsRequest.sortOrder,
                "sortBy": listProblemsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProblemsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listProblemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problemCollection",
                    bodyModel: "model.ProblemCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all Recommendations.
     *
     * @param ListRecommendationsRequest
     * @return ListRecommendationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListRecommendations.ts.html |here} to see how to use ListRecommendations API.
     */
    listRecommendations(listRecommendationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listRecommendations.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listRecommendationsRequest.compartmentId,
                "sortOrder": listRecommendationsRequest.sortOrder,
                "sortBy": listRecommendationsRequest.sortBy,
                "targetId": listRecommendationsRequest.targetId,
                "compartmentIdInSubtree": listRecommendationsRequest.compartmentIdInSubtree,
                "accessLevel": listRecommendationsRequest.accessLevel,
                "lifecycleState": listRecommendationsRequest.lifecycleState,
                "lifecycleDetail": listRecommendationsRequest.lifecycleDetail,
                "limit": listRecommendationsRequest.limit,
                "page": listRecommendationsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listRecommendationsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/recommendations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listRecommendationsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "recommendationSummaryCollection",
                    bodyModel: "model.RecommendationSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of resource types.
     *
     * @param ListResourceTypesRequest
     * @return ListResourceTypesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResourceTypes.ts.html |here} to see how to use ListResourceTypes API.
     */
    listResourceTypes(listResourceTypesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResourceTypes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listResourceTypesRequest.compartmentId,
                "lifecycleState": listResourceTypesRequest.lifecycleState,
                "limit": listResourceTypesRequest.limit,
                "page": listResourceTypesRequest.page,
                "sortOrder": listResourceTypesRequest.sortOrder,
                "sortBy": listResourceTypesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResourceTypesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/resourceTypes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResourceTypesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "resourceTypeCollection",
                    bodyModel: "model.ResourceTypeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Responder activities done on CloudGuard Problem
     *
     * @param ListResponderActivitiesRequest
     * @return ListResponderActivitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderActivities.ts.html |here} to see how to use ListResponderActivities API.
     */
    listResponderActivities(listResponderActivitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResponderActivities.");
            const pathParams = {
                "{problemId}": listResponderActivitiesRequest.problemId
            };
            const queryParams = {
                "limit": listResponderActivitiesRequest.limit,
                "page": listResponderActivitiesRequest.page,
                "sortOrder": listResponderActivitiesRequest.sortOrder,
                "sortBy": listResponderActivitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResponderActivitiesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}/responderActivities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResponderActivitiesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderActivityCollection",
                    bodyModel: "model.ResponderActivityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of Responder Executions. A Responder Execution is an entity that tracks the collective execution of multiple Responder Rule Executions for a given Problem.
     *
     * @param ListResponderExecutionsRequest
     * @return ListResponderExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderExecutions.ts.html |here} to see how to use ListResponderExecutions API.
     */
    listResponderExecutions(listResponderExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResponderExecutions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listResponderExecutionsRequest.compartmentId,
                "compartmentIdInSubtree": listResponderExecutionsRequest.compartmentIdInSubtree,
                "accessLevel": listResponderExecutionsRequest.accessLevel,
                "responderRuleIds": listResponderExecutionsRequest.responderRuleIds,
                "timeCreatedGreaterThanOrEqualTo": listResponderExecutionsRequest.timeCreatedGreaterThanOrEqualTo,
                "timeCreatedLessThanOrEqualTo": listResponderExecutionsRequest.timeCreatedLessThanOrEqualTo,
                "timeCompletedGreaterThanOrEqualTo": listResponderExecutionsRequest.timeCompletedGreaterThanOrEqualTo,
                "timeCompletedLessThanOrEqualTo": listResponderExecutionsRequest.timeCompletedLessThanOrEqualTo,
                "targetId": listResponderExecutionsRequest.targetId,
                "resourceType": listResponderExecutionsRequest.resourceType,
                "responderType": listResponderExecutionsRequest.responderType,
                "responderExecutionStatus": listResponderExecutionsRequest.responderExecutionStatus,
                "responderExecutionMode": listResponderExecutionsRequest.responderExecutionMode,
                "limit": listResponderExecutionsRequest.limit,
                "page": listResponderExecutionsRequest.page,
                "sortOrder": listResponderExecutionsRequest.sortOrder,
                "sortBy": listResponderExecutionsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResponderExecutionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResponderExecutionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderExecutionCollection",
                    bodyModel: "model.ResponderExecutionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe.
     *
     * @param ListResponderRecipeResponderRulesRequest
     * @return ListResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRecipeResponderRules.ts.html |here} to see how to use ListResponderRecipeResponderRules API.
     */
    listResponderRecipeResponderRules(listResponderRecipeResponderRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResponderRecipeResponderRules.");
            const pathParams = {
                "{responderRecipeId}": listResponderRecipeResponderRulesRequest.responderRecipeId
            };
            const queryParams = {
                "compartmentId": listResponderRecipeResponderRulesRequest.compartmentId,
                "displayName": listResponderRecipeResponderRulesRequest.displayName,
                "lifecycleState": listResponderRecipeResponderRulesRequest.lifecycleState,
                "limit": listResponderRecipeResponderRulesRequest.limit,
                "page": listResponderRecipeResponderRulesRequest.page,
                "sortOrder": listResponderRecipeResponderRulesRequest.sortOrder,
                "sortBy": listResponderRecipeResponderRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResponderRecipeResponderRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}/responderRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResponderRecipeResponderRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipeResponderRuleCollection",
                    bodyModel: "model.ResponderRecipeResponderRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns a list of all ResponderRecipes in a compartment
  * The ListResponderRecipe operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListResponderRecipe on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListResponderRecipesRequest
       * @return ListResponderRecipesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRecipes.ts.html |here} to see how to use ListResponderRecipes API.
       */
    listResponderRecipes(listResponderRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResponderRecipes.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listResponderRecipesRequest.compartmentId,
                "resourceMetadataOnly": listResponderRecipesRequest.resourceMetadataOnly,
                "displayName": listResponderRecipesRequest.displayName,
                "lifecycleState": listResponderRecipesRequest.lifecycleState,
                "limit": listResponderRecipesRequest.limit,
                "page": listResponderRecipesRequest.page,
                "compartmentIdInSubtree": listResponderRecipesRequest.compartmentIdInSubtree,
                "accessLevel": listResponderRecipesRequest.accessLevel,
                "sortOrder": listResponderRecipesRequest.sortOrder,
                "sortBy": listResponderRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResponderRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResponderRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipeCollection",
                    bodyModel: "model.ResponderRecipeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of ResponderRule.
     *
     * @param ListResponderRulesRequest
     * @return ListResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListResponderRules.ts.html |here} to see how to use ListResponderRules API.
     */
    listResponderRules(listResponderRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listResponderRules.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listResponderRulesRequest.compartmentId,
                "displayName": listResponderRulesRequest.displayName,
                "lifecycleState": listResponderRulesRequest.lifecycleState,
                "limit": listResponderRulesRequest.limit,
                "page": listResponderRulesRequest.page,
                "sortOrder": listResponderRulesRequest.sortOrder,
                "sortBy": listResponderRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listResponderRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listResponderRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRuleCollection",
                    bodyModel: "model.ResponderRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of DetectorRule associated with DetectorRecipe within a Target.
     *
     * @param ListTargetDetectorRecipeDetectorRulesRequest
     * @return ListTargetDetectorRecipeDetectorRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetDetectorRecipeDetectorRules.ts.html |here} to see how to use ListTargetDetectorRecipeDetectorRules API.
     */
    listTargetDetectorRecipeDetectorRules(listTargetDetectorRecipeDetectorRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listTargetDetectorRecipeDetectorRules.");
            const pathParams = {
                "{targetId}": listTargetDetectorRecipeDetectorRulesRequest.targetId,
                "{targetDetectorRecipeId}": listTargetDetectorRecipeDetectorRulesRequest.targetDetectorRecipeId
            };
            const queryParams = {
                "compartmentId": listTargetDetectorRecipeDetectorRulesRequest.compartmentId,
                "displayName": listTargetDetectorRecipeDetectorRulesRequest.displayName,
                "lifecycleState": listTargetDetectorRecipeDetectorRulesRequest.lifecycleState,
                "limit": listTargetDetectorRecipeDetectorRulesRequest.limit,
                "page": listTargetDetectorRecipeDetectorRulesRequest.page,
                "sortOrder": listTargetDetectorRecipeDetectorRulesRequest.sortOrder,
                "sortBy": listTargetDetectorRecipeDetectorRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetDetectorRecipeDetectorRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTargetDetectorRecipeDetectorRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipeDetectorRuleCollection",
                    bodyModel: "model.TargetDetectorRecipeDetectorRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all detector recipes associated with the target identified by targetId
     * @param ListTargetDetectorRecipesRequest
     * @return ListTargetDetectorRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetDetectorRecipes.ts.html |here} to see how to use ListTargetDetectorRecipes API.
     */
    listTargetDetectorRecipes(listTargetDetectorRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listTargetDetectorRecipes.");
            const pathParams = {
                "{targetId}": listTargetDetectorRecipesRequest.targetId
            };
            const queryParams = {
                "displayName": listTargetDetectorRecipesRequest.displayName,
                "compartmentId": listTargetDetectorRecipesRequest.compartmentId,
                "lifecycleState": listTargetDetectorRecipesRequest.lifecycleState,
                "limit": listTargetDetectorRecipesRequest.limit,
                "page": listTargetDetectorRecipesRequest.page,
                "sortOrder": listTargetDetectorRecipesRequest.sortOrder,
                "sortBy": listTargetDetectorRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetDetectorRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTargetDetectorRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipeCollection",
                    bodyModel: "model.TargetDetectorRecipeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of ResponderRule associated with ResponderRecipe within a Target.
     *
     * @param ListTargetResponderRecipeResponderRulesRequest
     * @return ListTargetResponderRecipeResponderRulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetResponderRecipeResponderRules.ts.html |here} to see how to use ListTargetResponderRecipeResponderRules API.
     */
    listTargetResponderRecipeResponderRules(listTargetResponderRecipeResponderRulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listTargetResponderRecipeResponderRules.");
            const pathParams = {
                "{targetId}": listTargetResponderRecipeResponderRulesRequest.targetId,
                "{targetResponderRecipeId}": listTargetResponderRecipeResponderRulesRequest.targetResponderRecipeId
            };
            const queryParams = {
                "compartmentId": listTargetResponderRecipeResponderRulesRequest.compartmentId,
                "displayName": listTargetResponderRecipeResponderRulesRequest.displayName,
                "lifecycleState": listTargetResponderRecipeResponderRulesRequest.lifecycleState,
                "limit": listTargetResponderRecipeResponderRulesRequest.limit,
                "page": listTargetResponderRecipeResponderRulesRequest.page,
                "sortOrder": listTargetResponderRecipeResponderRulesRequest.sortOrder,
                "sortBy": listTargetResponderRecipeResponderRulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetResponderRecipeResponderRulesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTargetResponderRecipeResponderRulesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipeResponderRuleCollection",
                    bodyModel: "model.TargetResponderRecipeResponderRuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of all responder recipes associated with the target identified by targetId
     * @param ListTargetResponderRecipesRequest
     * @return ListTargetResponderRecipesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargetResponderRecipes.ts.html |here} to see how to use ListTargetResponderRecipes API.
     */
    listTargetResponderRecipes(listTargetResponderRecipesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listTargetResponderRecipes.");
            const pathParams = {
                "{targetId}": listTargetResponderRecipesRequest.targetId
            };
            const queryParams = {
                "displayName": listTargetResponderRecipesRequest.displayName,
                "compartmentId": listTargetResponderRecipesRequest.compartmentId,
                "lifecycleState": listTargetResponderRecipesRequest.lifecycleState,
                "limit": listTargetResponderRecipesRequest.limit,
                "page": listTargetResponderRecipesRequest.page,
                "sortOrder": listTargetResponderRecipesRequest.sortOrder,
                "sortBy": listTargetResponderRecipesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetResponderRecipesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTargetResponderRecipesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipeCollection",
                    bodyModel: "model.TargetResponderRecipeCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns a list of all Targets in a compartment
  * The ListTargets operation returns only the targets in `compartmentId` passed.
  * The list does not include any subcompartments of the compartmentId passed.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform ListTargets on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param ListTargetsRequest
       * @return ListTargetsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/ListTargets.ts.html |here} to see how to use ListTargets API.
       */
    listTargets(listTargetsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#listTargets.");
            const pathParams = {};
            const queryParams = {
                "displayName": listTargetsRequest.displayName,
                "compartmentId": listTargetsRequest.compartmentId,
                "lifecycleState": listTargetsRequest.lifecycleState,
                "compartmentIdInSubtree": listTargetsRequest.compartmentIdInSubtree,
                "accessLevel": listTargetsRequest.accessLevel,
                "limit": listTargetsRequest.limit,
                "page": listTargetsRequest.page,
                "sortOrder": listTargetsRequest.sortOrder,
                "sortBy": listTargetsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTargetsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTargetsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetCollection",
                    bodyModel: "model.TargetCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Examines the number of problems related to the resource and the relative severity of those problems.
     *
     * @param RequestRiskScoresRequest
     * @return RequestRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestRiskScores.ts.html |here} to see how to use RequestRiskScores API.
     */
    requestRiskScores(requestRiskScoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestRiskScores.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestRiskScoresRequest.compartmentId,
                "limit": requestRiskScoresRequest.limit,
                "page": requestRiskScoresRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestRiskScoresRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/riskScores",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestRiskScoresRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "riskScoreAggregationCollection",
                    bodyModel: "model.RiskScoreAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Measures the number of resources examined across all regions and compares it with the
     * number of problems detected, for a given time period.
     *
     * @param RequestSecurityScoreSummarizedTrendRequest
     * @return RequestSecurityScoreSummarizedTrendResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSecurityScoreSummarizedTrend.ts.html |here} to see how to use RequestSecurityScoreSummarizedTrend API.
     */
    requestSecurityScoreSummarizedTrend(requestSecurityScoreSummarizedTrendRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSecurityScoreSummarizedTrend.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSecurityScoreSummarizedTrendRequest.compartmentId,
                "timeScoreComputedGreaterThanOrEqualTo": requestSecurityScoreSummarizedTrendRequest.timeScoreComputedGreaterThanOrEqualTo,
                "timeScoreComputedLessThanOrEqualTo": requestSecurityScoreSummarizedTrendRequest.timeScoreComputedLessThanOrEqualTo,
                "limit": requestSecurityScoreSummarizedTrendRequest.limit,
                "page": requestSecurityScoreSummarizedTrendRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSecurityScoreSummarizedTrendRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityScores/actions/summarizeTrend",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSecurityScoreSummarizedTrendRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityScoreTrendAggregationCollection",
                    bodyModel: "model.SecurityScoreTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Measures the number of resources examined across all regions and compares it with the number of problems detected.
     *
     * @param RequestSecurityScoresRequest
     * @return RequestSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSecurityScores.ts.html |here} to see how to use RequestSecurityScores API.
     */
    requestSecurityScores(requestSecurityScoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSecurityScores.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSecurityScoresRequest.compartmentId,
                "limit": requestSecurityScoresRequest.limit,
                "page": requestSecurityScoresRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSecurityScoresRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/securityScores",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSecurityScoresRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityScoreAggregationCollection",
                    bodyModel: "model.SecurityScoreAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns the summary of Activity type problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  * <p>
  The compartmentId to be passed with `accessLevel` and `compartmentIdInSubtree` params has to be the root
  * compartment id (tenant-id) only.
  *
       * @param RequestSummarizedActivityProblemsRequest
       * @return RequestSummarizedActivityProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedActivityProblems.ts.html |here} to see how to use RequestSummarizedActivityProblems API.
       */
    requestSummarizedActivityProblems(requestSummarizedActivityProblemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedActivityProblems.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSummarizedActivityProblemsRequest.compartmentId,
                "compartmentIdInSubtree": requestSummarizedActivityProblemsRequest.compartmentIdInSubtree,
                "accessLevel": requestSummarizedActivityProblemsRequest.accessLevel,
                "limit": requestSummarizedActivityProblemsRequest.limit,
                "includeUnknownLocations": requestSummarizedActivityProblemsRequest.includeUnknownLocations,
                "page": requestSummarizedActivityProblemsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedActivityProblemsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarizeActivityProblems",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedActivityProblemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "activityProblemAggregationCollection",
                    bodyModel: "model.ActivityProblemAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns the number of problems identified by cloud guard, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedProblemsRequest
       * @return RequestSummarizedProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedProblems.ts.html |here} to see how to use RequestSummarizedProblems API.
       */
    requestSummarizedProblems(requestSummarizedProblemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedProblems.");
            const pathParams = {};
            const queryParams = {
                "listDimensions": requestSummarizedProblemsRequest.listDimensions,
                "compartmentId": requestSummarizedProblemsRequest.compartmentId,
                "compartmentIdInSubtree": requestSummarizedProblemsRequest.compartmentIdInSubtree,
                "accessLevel": requestSummarizedProblemsRequest.accessLevel,
                "limit": requestSummarizedProblemsRequest.limit,
                "page": requestSummarizedProblemsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedProblemsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarize",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedProblemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problemAggregationCollection",
                    bodyModel: "model.ProblemAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns the number of Responder Executions, for a given set of dimensions.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedResponderExecutionsRequest
       * @return RequestSummarizedResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedResponderExecutions.ts.html |here} to see how to use RequestSummarizedResponderExecutions API.
       */
    requestSummarizedResponderExecutions(requestSummarizedResponderExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedResponderExecutions.");
            const pathParams = {};
            const queryParams = {
                "responderExecutionsDimensions": requestSummarizedResponderExecutionsRequest.responderExecutionsDimensions,
                "responderTypeFilter": requestSummarizedResponderExecutionsRequest.responderTypeFilter,
                "responderExecutionStatusFilter": requestSummarizedResponderExecutionsRequest.responderExecutionStatusFilter,
                "compartmentId": requestSummarizedResponderExecutionsRequest.compartmentId,
                "compartmentIdInSubtree": requestSummarizedResponderExecutionsRequest.compartmentIdInSubtree,
                "accessLevel": requestSummarizedResponderExecutionsRequest.accessLevel,
                "limit": requestSummarizedResponderExecutionsRequest.limit,
                "page": requestSummarizedResponderExecutionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedResponderExecutionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/actions/summarize",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedResponderExecutionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderExecutionAggregationCollection",
                    bodyModel: "model.ResponderExecutionAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedRiskScoresRequest
     * @return RequestSummarizedRiskScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedRiskScores.ts.html |here} to see how to use RequestSummarizedRiskScores API.
     */
    requestSummarizedRiskScores(requestSummarizedRiskScoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedRiskScores.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSummarizedRiskScoresRequest.compartmentId,
                "limit": requestSummarizedRiskScoresRequest.limit,
                "page": requestSummarizedRiskScoresRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedRiskScoresRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarizeRiskScore",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedRiskScoresRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "riskScoreAggregationCollection",
                    bodyModel: "model.RiskScoreAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedSecurityScoresRequest
     * @return RequestSummarizedSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedSecurityScores.ts.html |here} to see how to use RequestSummarizedSecurityScores API.
     */
    requestSummarizedSecurityScores(requestSummarizedSecurityScoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedSecurityScores.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSummarizedSecurityScoresRequest.compartmentId,
                "limit": requestSummarizedSecurityScoresRequest.limit,
                "page": requestSummarizedSecurityScoresRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedSecurityScoresRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarizeSecurityScore",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedSecurityScoresRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityScoreAggregationCollection",
                    bodyModel: "model.SecurityScoreAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns the number of problems identified by cloud guard, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedTrendProblemsRequest
       * @return RequestSummarizedTrendProblemsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendProblems.ts.html |here} to see how to use RequestSummarizedTrendProblems API.
       */
    requestSummarizedTrendProblems(requestSummarizedTrendProblemsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedTrendProblems.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSummarizedTrendProblemsRequest.compartmentId,
                "timeFirstDetectedGreaterThanOrEqualTo": requestSummarizedTrendProblemsRequest.timeFirstDetectedGreaterThanOrEqualTo,
                "timeFirstDetectedLessThanOrEqualTo": requestSummarizedTrendProblemsRequest.timeFirstDetectedLessThanOrEqualTo,
                "compartmentIdInSubtree": requestSummarizedTrendProblemsRequest.compartmentIdInSubtree,
                "accessLevel": requestSummarizedTrendProblemsRequest.accessLevel,
                "limit": requestSummarizedTrendProblemsRequest.limit,
                "page": requestSummarizedTrendProblemsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedTrendProblemsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarizeTrend",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedTrendProblemsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problemTrendAggregationCollection",
                    bodyModel: "model.ProblemTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Returns the number of remediations performed by Responders, for a given time period.
  * <p>
  The parameter `accessLevel` specifies whether to return only those compartments for which the
  * requestor has INSPECT permissions on at least one resource directly
  * or indirectly (ACCESSIBLE) (the resource can be in a subcompartment) or to return Not Authorized if
  * Principal doesn't have access to even one of the child compartments. This is valid only when
  * `compartmentIdInSubtree` is set to `true`.
  * <p>
  The parameter `compartmentIdInSubtree` applies when you perform summarize API on the
  * `compartmentId` passed and when it is set to true, the entire hierarchy of compartments can be returned.
  * To get a full list of all compartments and subcompartments in the tenancy (root compartment),
  * set the parameter `compartmentIdInSubtree` to true and `accessLevel` to ACCESSIBLE.
  *
       * @param RequestSummarizedTrendResponderExecutionsRequest
       * @return RequestSummarizedTrendResponderExecutionsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendResponderExecutions.ts.html |here} to see how to use RequestSummarizedTrendResponderExecutions API.
       */
    requestSummarizedTrendResponderExecutions(requestSummarizedTrendResponderExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedTrendResponderExecutions.");
            const pathParams = {};
            const queryParams = {
                "timeCompletedGreaterThanOrEqualTo": requestSummarizedTrendResponderExecutionsRequest.timeCompletedGreaterThanOrEqualTo,
                "timeCompletedLessThanOrEqualTo": requestSummarizedTrendResponderExecutionsRequest.timeCompletedLessThanOrEqualTo,
                "compartmentId": requestSummarizedTrendResponderExecutionsRequest.compartmentId,
                "compartmentIdInSubtree": requestSummarizedTrendResponderExecutionsRequest.compartmentIdInSubtree,
                "accessLevel": requestSummarizedTrendResponderExecutionsRequest.accessLevel,
                "limit": requestSummarizedTrendResponderExecutionsRequest.limit,
                "page": requestSummarizedTrendResponderExecutionsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedTrendResponderExecutionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/actions/summarizeTrend",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedTrendResponderExecutionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderExecutionTrendAggregationCollection",
                    bodyModel: "model.ResponderExecutionTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * DEPRECATED
     *
     * @param RequestSummarizedTrendSecurityScoresRequest
     * @return RequestSummarizedTrendSecurityScoresResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/RequestSummarizedTrendSecurityScores.ts.html |here} to see how to use RequestSummarizedTrendSecurityScores API.
     */
    requestSummarizedTrendSecurityScores(requestSummarizedTrendSecurityScoresRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#requestSummarizedTrendSecurityScores.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": requestSummarizedTrendSecurityScoresRequest.compartmentId,
                "timeScoreComputedGreaterThanOrEqualTo": requestSummarizedTrendSecurityScoresRequest.timeScoreComputedGreaterThanOrEqualTo,
                "timeScoreComputedLessThanOrEqualTo": requestSummarizedTrendSecurityScoresRequest.timeScoreComputedLessThanOrEqualTo,
                "limit": requestSummarizedTrendSecurityScoresRequest.limit,
                "page": requestSummarizedTrendSecurityScoresRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": requestSummarizedTrendSecurityScoresRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/summarizeSecurityScoreTrend",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, requestSummarizedTrendSecurityScoresRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "securityScoreTrendAggregationCollection",
                    bodyModel: "model.SecurityScoreTrendAggregationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Skips the execution for a bulk of responder executions
     * The operation is atomic in nature
     *
     * @param SkipBulkResponderExecutionRequest
     * @return SkipBulkResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/SkipBulkResponderExecution.ts.html |here} to see how to use SkipBulkResponderExecution API.
     */
    skipBulkResponderExecution(skipBulkResponderExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#skipBulkResponderExecution.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": skipBulkResponderExecutionRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/actions/bulkSkip",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(skipBulkResponderExecutionRequest.skipBulkResponderExecutionDetails, "SkipBulkResponderExecutionDetails", models.SkipBulkResponderExecutionDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, skipBulkResponderExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Skips the execution of the responder execution. When provided, If-Match is checked against ETag values of the resource.
     * @param SkipResponderExecutionRequest
     * @return SkipResponderExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/SkipResponderExecution.ts.html |here} to see how to use SkipResponderExecution API.
     */
    skipResponderExecution(skipResponderExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#skipResponderExecution.");
            const pathParams = {
                "{responderExecutionId}": skipResponderExecutionRequest.responderExecutionId
            };
            const queryParams = {
                "compartmentId": skipResponderExecutionRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": skipResponderExecutionRequest.ifMatch,
                "opc-request-id": skipResponderExecutionRequest.opcRequestId,
                "opc-retry-token": skipResponderExecutionRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderExecutions/{responderExecutionId}/actions/skip",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, skipResponderExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * push the problem to responder
     *
     * @param TriggerResponderRequest
     * @return TriggerResponderResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/TriggerResponder.ts.html |here} to see how to use TriggerResponder API.
     */
    triggerResponder(triggerResponderRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#triggerResponder.");
            const pathParams = {
                "{problemId}": triggerResponderRequest.problemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": triggerResponderRequest.opcRetryToken,
                "opc-request-id": triggerResponderRequest.opcRequestId,
                "if-match": triggerResponderRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}/actions/triggerResponder",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(triggerResponderRequest.triggerResponderDetails, "TriggerResponderDetails", models.TriggerResponderDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, triggerResponderRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the statuses in bulk for a list of problems
     * The operation is atomic in nature
     *
     * @param UpdateBulkProblemStatusRequest
     * @return UpdateBulkProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateBulkProblemStatus.ts.html |here} to see how to use UpdateBulkProblemStatus API.
     */
    updateBulkProblemStatus(updateBulkProblemStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateBulkProblemStatus.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateBulkProblemStatusRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/actions/bulkUpdateStatus",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateBulkProblemStatusRequest.updateBulkProblemStatusDetails, "UpdateBulkProblemStatusDetails", models.UpdateBulkProblemStatusDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateBulkProblemStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enable/Disable Cloud Guard. The reporting region cannot be updated once created.
     *
     * @param UpdateConfigurationRequest
     * @return UpdateConfigurationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateConfiguration.ts.html |here} to see how to use UpdateConfiguration API.
     */
    updateConfiguration(updateConfigurationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateConfiguration.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": updateConfigurationRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateConfigurationRequest.opcRequestId,
                "opc-retry-token": updateConfigurationRequest.opcRetryToken,
                "if-match": updateConfigurationRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/configuration",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateConfigurationRequest.updateConfigurationDetails, "UpdateConfigurationDetails", models.UpdateConfigurationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateConfigurationRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "configuration",
                    bodyModel: "model.Configuration",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a DataMaskRule identified by dataMaskRuleId
     * @param UpdateDataMaskRuleRequest
     * @return UpdateDataMaskRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDataMaskRule.ts.html |here} to see how to use UpdateDataMaskRule API.
     */
    updateDataMaskRule(updateDataMaskRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateDataMaskRule.");
            const pathParams = {
                "{dataMaskRuleId}": updateDataMaskRuleRequest.dataMaskRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDataMaskRuleRequest.ifMatch,
                "opc-request-id": updateDataMaskRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/dataMaskRules/{dataMaskRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDataMaskRuleRequest.updateDataMaskRuleDetails, "UpdateDataMaskRuleDetails", models.UpdateDataMaskRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDataMaskRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "dataMaskRule",
                    bodyModel: "model.DataMaskRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a detector recipe identified by detectorRecipeId
     * @param UpdateDetectorRecipeRequest
     * @return UpdateDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDetectorRecipe.ts.html |here} to see how to use UpdateDetectorRecipe API.
     */
    updateDetectorRecipe(updateDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateDetectorRecipe.");
            const pathParams = {
                "{detectorRecipeId}": updateDetectorRecipeRequest.detectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDetectorRecipeRequest.ifMatch,
                "opc-request-id": updateDetectorRecipeRequest.opcRequestId,
                "opc-retry-token": updateDetectorRecipeRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDetectorRecipeRequest.updateDetectorRecipeDetails, "UpdateDetectorRecipeDetails", models.UpdateDetectorRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipe",
                    bodyModel: "model.DetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the DetectorRule by identifier
     * @param UpdateDetectorRecipeDetectorRuleRequest
     * @return UpdateDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateDetectorRecipeDetectorRule API.
     */
    updateDetectorRecipeDetectorRule(updateDetectorRecipeDetectorRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateDetectorRecipeDetectorRule.");
            const pathParams = {
                "{detectorRecipeId}": updateDetectorRecipeDetectorRuleRequest.detectorRecipeId,
                "{detectorRuleId}": updateDetectorRecipeDetectorRuleRequest.detectorRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateDetectorRecipeDetectorRuleRequest.ifMatch,
                "opc-request-id": updateDetectorRecipeDetectorRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/detectorRecipes/{detectorRecipeId}/detectorRules/{detectorRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateDetectorRecipeDetectorRuleRequest.updateDetectorRecipeDetectorRuleDetails, "UpdateDetectorRecipeDetectorRuleDetails", models.UpdateDetectorRecipeDetectorRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateDetectorRecipeDetectorRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "detectorRecipeDetectorRule",
                    bodyModel: "model.DetectorRecipeDetectorRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a managed list identified by managedListId
     * @param UpdateManagedListRequest
     * @return UpdateManagedListResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateManagedList.ts.html |here} to see how to use UpdateManagedList API.
     */
    updateManagedList(updateManagedListRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateManagedList.");
            const pathParams = {
                "{managedListId}": updateManagedListRequest.managedListId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagedListRequest.ifMatch,
                "opc-request-id": updateManagedListRequest.opcRequestId,
                "opc-retry-token": updateManagedListRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedLists/{managedListId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedListRequest.updateManagedListDetails, "UpdateManagedListDetails", models.UpdateManagedListDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateManagedListRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedList",
                    bodyModel: "model.ManagedList",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * updates the problem details
     *
     * @param UpdateProblemStatusRequest
     * @return UpdateProblemStatusResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateProblemStatus.ts.html |here} to see how to use UpdateProblemStatus API.
     */
    updateProblemStatus(updateProblemStatusRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateProblemStatus.");
            const pathParams = {
                "{problemId}": updateProblemStatusRequest.problemId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": updateProblemStatusRequest.opcRetryToken,
                "opc-request-id": updateProblemStatusRequest.opcRequestId,
                "if-match": updateProblemStatusRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/problems/{problemId}/actions/updateStatus",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateProblemStatusRequest.updateProblemStatusDetails, "UpdateProblemStatusDetails", models.UpdateProblemStatusDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateProblemStatusRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "problem",
                    bodyModel: "model.Problem",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the ResponderRecipe resource by identifier
     * @param UpdateResponderRecipeRequest
     * @return UpdateResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateResponderRecipe.ts.html |here} to see how to use UpdateResponderRecipe API.
     */
    updateResponderRecipe(updateResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateResponderRecipe.");
            const pathParams = {
                "{responderRecipeId}": updateResponderRecipeRequest.responderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateResponderRecipeRequest.ifMatch,
                "opc-request-id": updateResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateResponderRecipeRequest.updateResponderRecipeDetails, "UpdateResponderRecipeDetails", models.UpdateResponderRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipe",
                    bodyModel: "model.ResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the ResponderRule by identifier
     * @param UpdateResponderRecipeResponderRuleRequest
     * @return UpdateResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateResponderRecipeResponderRule.ts.html |here} to see how to use UpdateResponderRecipeResponderRule API.
     */
    updateResponderRecipeResponderRule(updateResponderRecipeResponderRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateResponderRecipeResponderRule.");
            const pathParams = {
                "{responderRecipeId}": updateResponderRecipeResponderRuleRequest.responderRecipeId,
                "{responderRuleId}": updateResponderRecipeResponderRuleRequest.responderRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateResponderRecipeResponderRuleRequest.ifMatch,
                "opc-request-id": updateResponderRecipeResponderRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/responderRecipes/{responderRecipeId}/responderRules/{responderRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateResponderRecipeResponderRuleRequest.updateResponderRecipeResponderRuleDetails, "UpdateResponderRecipeResponderRuleDetails", models.UpdateResponderRecipeResponderRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateResponderRecipeResponderRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "responderRecipeResponderRule",
                    bodyModel: "model.ResponderRecipeResponderRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a Target identified by targetId
     * @param UpdateTargetRequest
     * @return UpdateTargetResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTarget.ts.html |here} to see how to use UpdateTarget API.
     */
    updateTarget(updateTargetRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateTarget.");
            const pathParams = {
                "{targetId}": updateTargetRequest.targetId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetRequest.ifMatch,
                "opc-request-id": updateTargetRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetRequest.updateTargetDetails, "UpdateTargetDetails", models.UpdateTargetDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTargetRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "target",
                    bodyModel: "model.Target",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the TargetDetectorRecipe resource by identifier
     * @param UpdateTargetDetectorRecipeRequest
     * @return UpdateTargetDetectorRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetDetectorRecipe.ts.html |here} to see how to use UpdateTargetDetectorRecipe API.
     */
    updateTargetDetectorRecipe(updateTargetDetectorRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateTargetDetectorRecipe.");
            const pathParams = {
                "{targetId}": updateTargetDetectorRecipeRequest.targetId,
                "{targetDetectorRecipeId}": updateTargetDetectorRecipeRequest.targetDetectorRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetDetectorRecipeRequest.ifMatch,
                "opc-request-id": updateTargetDetectorRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetDetectorRecipeRequest.updateTargetDetectorRecipeDetails, "UpdateTargetDetectorRecipeDetails", models.UpdateTargetDetectorRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTargetDetectorRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipe",
                    bodyModel: "model.TargetDetectorRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the DetectorRule by identifier
     * @param UpdateTargetDetectorRecipeDetectorRuleRequest
     * @return UpdateTargetDetectorRecipeDetectorRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetDetectorRecipeDetectorRule.ts.html |here} to see how to use UpdateTargetDetectorRecipeDetectorRule API.
     */
    updateTargetDetectorRecipeDetectorRule(updateTargetDetectorRecipeDetectorRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateTargetDetectorRecipeDetectorRule.");
            const pathParams = {
                "{targetId}": updateTargetDetectorRecipeDetectorRuleRequest.targetId,
                "{targetDetectorRecipeId}": updateTargetDetectorRecipeDetectorRuleRequest.targetDetectorRecipeId,
                "{detectorRuleId}": updateTargetDetectorRecipeDetectorRuleRequest.detectorRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetDetectorRecipeDetectorRuleRequest.ifMatch,
                "opc-request-id": updateTargetDetectorRecipeDetectorRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetDetectorRecipes/{targetDetectorRecipeId}/detectorRules/{detectorRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetDetectorRecipeDetectorRuleRequest.updateTargetDetectorRecipeDetectorRuleDetails, "UpdateTargetDetectorRecipeDetectorRuleDetails", models.UpdateTargetDetectorRecipeDetectorRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTargetDetectorRecipeDetectorRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetDetectorRecipeDetectorRule",
                    bodyModel: "model.TargetDetectorRecipeDetectorRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the TargetResponderRecipe resource by identifier
     * @param UpdateTargetResponderRecipeRequest
     * @return UpdateTargetResponderRecipeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetResponderRecipe.ts.html |here} to see how to use UpdateTargetResponderRecipe API.
     */
    updateTargetResponderRecipe(updateTargetResponderRecipeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateTargetResponderRecipe.");
            const pathParams = {
                "{targetId}": updateTargetResponderRecipeRequest.targetId,
                "{targetResponderRecipeId}": updateTargetResponderRecipeRequest.targetResponderRecipeId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetResponderRecipeRequest.ifMatch,
                "opc-request-id": updateTargetResponderRecipeRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetResponderRecipeRequest.updateTargetResponderRecipeDetails, "UpdateTargetResponderRecipeDetails", models.UpdateTargetResponderRecipeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTargetResponderRecipeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipe",
                    bodyModel: "model.TargetResponderRecipe",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Update the ResponderRule by identifier
     * @param UpdateTargetResponderRecipeResponderRuleRequest
     * @return UpdateTargetResponderRecipeResponderRuleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/cloudguard/UpdateTargetResponderRecipeResponderRule.ts.html |here} to see how to use UpdateTargetResponderRecipeResponderRule API.
     */
    updateTargetResponderRecipeResponderRule(updateTargetResponderRecipeResponderRuleRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CloudGuardClient#updateTargetResponderRecipeResponderRule.");
            const pathParams = {
                "{targetId}": updateTargetResponderRecipeResponderRuleRequest.targetId,
                "{targetResponderRecipeId}": updateTargetResponderRecipeResponderRuleRequest.targetResponderRecipeId,
                "{responderRuleId}": updateTargetResponderRecipeResponderRuleRequest.responderRuleId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateTargetResponderRecipeResponderRuleRequest.ifMatch,
                "opc-request-id": updateTargetResponderRecipeResponderRuleRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/targets/{targetId}/targetResponderRecipes/{targetResponderRecipeId}/responderRules/{responderRuleId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateTargetResponderRecipeResponderRuleRequest.updateTargetResponderRecipeResponderRuleDetails, "UpdateTargetResponderRecipeResponderRuleDetails", models.UpdateTargetResponderRecipeResponderRuleDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateTargetResponderRecipeResponderRuleRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "targetResponderRecipeResponderRule",
                    bodyModel: "model.TargetResponderRecipeResponderRule",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.CloudGuardClient = CloudGuardClient;
CloudGuardClient.serviceEndpointTemplate = "https://cloudguard-cp-api.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map