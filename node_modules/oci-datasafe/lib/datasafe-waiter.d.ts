/**
 * Data Safe API
 * APIs for using Oracle Data Safe.
 * OpenAPI spec version: 20181201
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as serviceRequests from "./request";
import * as serviceResponses from "./response";
import * as models from "./model";
import { DataSafeClient } from "./client";
export declare class DataSafeWaiter {
    private client;
    private readonly config?;
    constructor(client: DataSafeClient, config?: Partial<import("oci-common/lib/waiter").WaiterConfigurationDetails> | undefined);
    /**
     * Waits forDataSafeConfiguration till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataSafeConfigurationResponse | null (null in case of 404 response)
     */
    forDataSafeConfiguration(request: serviceRequests.GetDataSafeConfigurationRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataSafeConfigurationResponse | null>;
    /**
     * Waits forDataSafePrivateEndpoint till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetDataSafePrivateEndpointResponse | null (null in case of 404 response)
     */
    forDataSafePrivateEndpoint(request: serviceRequests.GetDataSafePrivateEndpointRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetDataSafePrivateEndpointResponse | null>;
    /**
     * Waits forOnPremConnector till it reaches any of the provided states
     *
     * @param request the request to send
     * @param targetStates the desired states to wait for. The waiter will return once the resource reaches any of the provided states
     * @return response returns GetOnPremConnectorResponse | null (null in case of 404 response)
     */
    forOnPremConnector(request: serviceRequests.GetOnPremConnectorRequest, ...targetStates: models.LifecycleState[]): Promise<serviceResponses.GetOnPremConnectorResponse | null>;
    /**
     * Waits forWorkRequest
     *
     * @param request the request to send
     * @return response returns GetWorkRequestResponse
     */
    forWorkRequest(request: serviceRequests.GetWorkRequestRequest): Promise<serviceResponses.GetWorkRequestResponse>;
}
