"use strict";
/**
 * Health Checks API
 * API for the Health Checks service. Use this API to manage endpoint probes and monitors.
For more information, see
[Overview of the Health Checks Service](/iaas/Content/HealthChecks/Concepts/healthchecks.htm).

 * OpenAPI spec version: 20180501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthChecksClient = exports.HealthChecksApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const oci_common_1 = require("oci-common");
const oci_common_2 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var HealthChecksApiKeys;
(function (HealthChecksApiKeys) {
})(HealthChecksApiKeys = exports.HealthChecksApiKeys || (exports.HealthChecksApiKeys = {}));
class HealthChecksClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20180501";
        if (this.logger)
            this.logger.info(`HealthChecksClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(HealthChecksClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(HealthChecksClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Moves a monitor into a different compartment. When provided, `If-Match` is checked
     * against ETag values of the resource.
     *
     * @param ChangeHttpMonitorCompartmentRequest
     * @return ChangeHttpMonitorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ChangeHttpMonitorCompartment.ts.html |here} to see how to use ChangeHttpMonitorCompartment API.
     */
    changeHttpMonitorCompartment(changeHttpMonitorCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#changeHttpMonitorCompartment.");
            const pathParams = {
                "{monitorId}": changeHttpMonitorCompartmentRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changeHttpMonitorCompartmentRequest.ifMatch,
                "opc-request-id": changeHttpMonitorCompartmentRequest.opcRequestId,
                "opc-retry-token": changeHttpMonitorCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors/{monitorId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeHttpMonitorCompartmentRequest.changeHttpMonitorCompartmentDetails, "ChangeHttpMonitorCompartmentDetails", models.ChangeHttpMonitorCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeHttpMonitorCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a monitor into a different compartment. When provided, `If-Match` is checked
     * against ETag values of the resource.
     *
     * @param ChangePingMonitorCompartmentRequest
     * @return ChangePingMonitorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ChangePingMonitorCompartment.ts.html |here} to see how to use ChangePingMonitorCompartment API.
     */
    changePingMonitorCompartment(changePingMonitorCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#changePingMonitorCompartment.");
            const pathParams = {
                "{monitorId}": changePingMonitorCompartmentRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": changePingMonitorCompartmentRequest.ifMatch,
                "opc-request-id": changePingMonitorCompartmentRequest.opcRequestId,
                "opc-retry-token": changePingMonitorCompartmentRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors/{monitorId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changePingMonitorCompartmentRequest.changePingMonitorCompartmentDetails, "ChangePingMonitorCompartmentDetails", models.ChangePingMonitorCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changePingMonitorCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an HTTP monitor. Vantage points will be automatically selected if not specified,
     * and probes will be initiated from each vantage point to each of the targets at the frequency
     * specified by `intervalInSeconds`.
     *
     * @param CreateHttpMonitorRequest
     * @return CreateHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateHttpMonitor.ts.html |here} to see how to use CreateHttpMonitor API.
     */
    createHttpMonitor(createHttpMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#createHttpMonitor.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createHttpMonitorRequest.opcRequestId,
                "opc-retry-token": createHttpMonitorRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createHttpMonitorRequest.createHttpMonitorDetails, "CreateHttpMonitorDetails", models.CreateHttpMonitorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createHttpMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "httpMonitor",
                    bodyModel: "model.HttpMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an on-demand HTTP probe. The location response header contains the URL for
     * fetching the probe results.
     * <p>
     *Note:* On-demand probe configurations are not saved.
     *
     * @param CreateOnDemandHttpProbeRequest
     * @return CreateOnDemandHttpProbeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateOnDemandHttpProbe.ts.html |here} to see how to use CreateOnDemandHttpProbe API.
     */
    createOnDemandHttpProbe(createOnDemandHttpProbeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#createOnDemandHttpProbe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createOnDemandHttpProbeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpProbeResults",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOnDemandHttpProbeRequest.createOnDemandHttpProbeDetails, "CreateOnDemandHttpProbeDetails", models.CreateOnDemandHttpProbeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createOnDemandHttpProbeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "httpProbe",
                    bodyModel: "model.HttpProbe",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates an on-demand ping probe. The location response header contains the URL for
     * fetching probe results.
     * <p>
     *Note:* The on-demand probe configuration is not saved.
     *
     * @param CreateOnDemandPingProbeRequest
     * @return CreateOnDemandPingProbeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateOnDemandPingProbe.ts.html |here} to see how to use CreateOnDemandPingProbe API.
     */
    createOnDemandPingProbe(createOnDemandPingProbeRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#createOnDemandPingProbe.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createOnDemandPingProbeRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingProbeResults",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOnDemandPingProbeRequest.createOnDemandPingProbeDetails, "CreateOnDemandPingProbeDetails", models.CreateOnDemandPingProbeDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createOnDemandPingProbeRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pingProbe",
                    bodyModel: "model.PingProbe",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a ping monitor. Vantage points will be automatically selected if not specified,
     * and probes will be initiated from each vantage point to each of the targets at the frequency
     * specified by `intervalInSeconds`.
     *
     * @param CreatePingMonitorRequest
     * @return CreatePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreatePingMonitor.ts.html |here} to see how to use CreatePingMonitor API.
     */
    createPingMonitor(createPingMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#createPingMonitor.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createPingMonitorRequest.opcRequestId,
                "opc-retry-token": createPingMonitorRequest.opcRetryToken
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createPingMonitorRequest.createPingMonitorDetails, "CreatePingMonitorDetails", models.CreatePingMonitorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createPingMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pingMonitor",
                    bodyModel: "model.PingMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the HTTP monitor and its configuration. All future probes of this
     * monitor are stopped. Results associated with the monitor are not deleted.
     *
     * @param DeleteHttpMonitorRequest
     * @return DeleteHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/DeleteHttpMonitor.ts.html |here} to see how to use DeleteHttpMonitor API.
     */
    deleteHttpMonitor(deleteHttpMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#deleteHttpMonitor.");
            const pathParams = {
                "{monitorId}": deleteHttpMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteHttpMonitorRequest.opcRequestId,
                "if-match": deleteHttpMonitorRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors/{monitorId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteHttpMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the ping monitor and its configuration. All future probes of this
     * monitor are stopped. Results associated with the monitor are not deleted.
     *
     * @param DeletePingMonitorRequest
     * @return DeletePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/DeletePingMonitor.ts.html |here} to see how to use DeletePingMonitor API.
     */
    deletePingMonitor(deletePingMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#deletePingMonitor.");
            const pathParams = {
                "{monitorId}": deletePingMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deletePingMonitorRequest.opcRequestId,
                "if-match": deletePingMonitorRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors/{monitorId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deletePingMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the configuration for the specified monitor.
     *
     * @param GetHttpMonitorRequest
     * @return GetHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/GetHttpMonitor.ts.html |here} to see how to use GetHttpMonitor API.
     */
    getHttpMonitor(getHttpMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#getHttpMonitor.");
            const pathParams = {
                "{monitorId}": getHttpMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getHttpMonitorRequest.opcRequestId,
                "if-none-match": getHttpMonitorRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors/{monitorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getHttpMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "httpMonitor",
                    bodyModel: "model.HttpMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the configuration for the specified ping monitor.
     *
     * @param GetPingMonitorRequest
     * @return GetPingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/GetPingMonitor.ts.html |here} to see how to use GetPingMonitor API.
     */
    getPingMonitor(getPingMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#getPingMonitor.");
            const pathParams = {
                "{monitorId}": getPingMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPingMonitorRequest.opcRequestId,
                "if-none-match": getPingMonitorRequest.ifNoneMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors/{monitorId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getPingMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pingMonitor",
                    bodyModel: "model.PingMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about all vantage points available to the user.
     *
     * @param ListHealthChecksVantagePointsRequest
     * @return ListHealthChecksVantagePointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHealthChecksVantagePoints.ts.html |here} to see how to use ListHealthChecksVantagePoints API.
     */
    listHealthChecksVantagePoints(listHealthChecksVantagePointsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#listHealthChecksVantagePoints.");
            const pathParams = {};
            const queryParams = {
                "limit": listHealthChecksVantagePointsRequest.limit,
                "page": listHealthChecksVantagePointsRequest.page,
                "sortBy": listHealthChecksVantagePointsRequest.sortBy,
                "sortOrder": listHealthChecksVantagePointsRequest.sortOrder,
                "name": listHealthChecksVantagePointsRequest.name,
                "displayName": listHealthChecksVantagePointsRequest.displayName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHealthChecksVantagePointsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/vantagePoints",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHealthChecksVantagePointsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "HealthChecksVantagePointSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.HealthChecksVantagePointSummary objects
     * contained in responses from the listHealthChecksVantagePoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHealthChecksVantagePoints(request) {
        return oci_common_1.paginateRecords(request, req => this.listHealthChecksVantagePoints(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHealthChecksVantagePoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHealthChecksVantagePointsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listHealthChecksVantagePoints(req));
    }
    /**
     * Gets a list of HTTP monitors.
     *
     * @param ListHttpMonitorsRequest
     * @return ListHttpMonitorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHttpMonitors.ts.html |here} to see how to use ListHttpMonitors API.
     */
    listHttpMonitors(listHttpMonitorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#listHttpMonitors.");
            const pathParams = {};
            const queryParams = {
                "limit": listHttpMonitorsRequest.limit,
                "page": listHttpMonitorsRequest.page,
                "compartmentId": listHttpMonitorsRequest.compartmentId,
                "sortBy": listHttpMonitorsRequest.sortBy,
                "sortOrder": listHttpMonitorsRequest.sortOrder,
                "displayName": listHttpMonitorsRequest.displayName,
                "homeRegion": listHttpMonitorsRequest.homeRegion
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHttpMonitorsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHttpMonitorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "HttpMonitorSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.HttpMonitorSummary objects
     * contained in responses from the listHttpMonitors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpMonitors(request) {
        return oci_common_1.paginateRecords(request, req => this.listHttpMonitors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHttpMonitors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpMonitorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listHttpMonitors(req));
    }
    /**
     * Gets the HTTP probe results for the specified probe or monitor, where
     * the `probeConfigurationId` is the OCID of either a monitor or an
     * on-demand probe.
     *
     * @param ListHttpProbeResultsRequest
     * @return ListHttpProbeResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHttpProbeResults.ts.html |here} to see how to use ListHttpProbeResults API.
     */
    listHttpProbeResults(listHttpProbeResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#listHttpProbeResults.");
            const pathParams = {
                "{probeConfigurationId}": listHttpProbeResultsRequest.probeConfigurationId
            };
            const queryParams = {
                "limit": listHttpProbeResultsRequest.limit,
                "page": listHttpProbeResultsRequest.page,
                "startTimeGreaterThanOrEqualTo": listHttpProbeResultsRequest.startTimeGreaterThanOrEqualTo,
                "startTimeLessThanOrEqualTo": listHttpProbeResultsRequest.startTimeLessThanOrEqualTo,
                "sortOrder": listHttpProbeResultsRequest.sortOrder,
                "target": listHttpProbeResultsRequest.target
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listHttpProbeResultsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpProbeResults/{probeConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listHttpProbeResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "HttpProbeResultSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.HttpProbeResultSummary objects
     * contained in responses from the listHttpProbeResults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpProbeResults(request) {
        return oci_common_1.paginateRecords(request, req => this.listHttpProbeResults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHttpProbeResults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpProbeResultsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listHttpProbeResults(req));
    }
    /**
       * Gets a list of configured ping monitors.
  * <p>
  Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
  * a URL for fetching the next page.
  *
       * @param ListPingMonitorsRequest
       * @return ListPingMonitorsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListPingMonitors.ts.html |here} to see how to use ListPingMonitors API.
       */
    listPingMonitors(listPingMonitorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#listPingMonitors.");
            const pathParams = {};
            const queryParams = {
                "limit": listPingMonitorsRequest.limit,
                "page": listPingMonitorsRequest.page,
                "compartmentId": listPingMonitorsRequest.compartmentId,
                "sortBy": listPingMonitorsRequest.sortBy,
                "sortOrder": listPingMonitorsRequest.sortOrder,
                "displayName": listPingMonitorsRequest.displayName,
                "homeRegion": listPingMonitorsRequest.homeRegion
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPingMonitorsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPingMonitorsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PingMonitorSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.PingMonitorSummary objects
     * contained in responses from the listPingMonitors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingMonitors(request) {
        return oci_common_1.paginateRecords(request, req => this.listPingMonitors(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPingMonitors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingMonitorsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPingMonitors(req));
    }
    /**
       * Returns the results for the specified probe, where the `probeConfigurationId`
  * is the OCID of either a monitor or an on-demand probe.
  * <p>
  Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
  * a URL for fetching the next page.  Use `sortOrder` to set the order of the
  * results.  If `sortOrder` is unspecified, results are sorted in ascending order by
  * `startTime`.
  *
       * @param ListPingProbeResultsRequest
       * @return ListPingProbeResultsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListPingProbeResults.ts.html |here} to see how to use ListPingProbeResults API.
       */
    listPingProbeResults(listPingProbeResultsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#listPingProbeResults.");
            const pathParams = {
                "{probeConfigurationId}": listPingProbeResultsRequest.probeConfigurationId
            };
            const queryParams = {
                "limit": listPingProbeResultsRequest.limit,
                "page": listPingProbeResultsRequest.page,
                "startTimeGreaterThanOrEqualTo": listPingProbeResultsRequest.startTimeGreaterThanOrEqualTo,
                "startTimeLessThanOrEqualTo": listPingProbeResultsRequest.startTimeLessThanOrEqualTo,
                "sortOrder": listPingProbeResultsRequest.sortOrder,
                "target": listPingProbeResultsRequest.target
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPingProbeResultsRequest.opcRequestId
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingProbeResults/{probeConfigurationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listPingProbeResultsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "items",
                    bodyModel: "PingProbeResultSummary[]",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new async iterator which will iterate over the models.PingProbeResultSummary objects
     * contained in responses from the listPingProbeResults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingProbeResults(request) {
        return oci_common_1.paginateRecords(request, req => this.listPingProbeResults(req));
    }
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPingProbeResults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingProbeResultsResponses(request) {
        return oci_common_1.paginateResponses(request, req => this.listPingProbeResults(req));
    }
    /**
     * Updates the configuration of the specified HTTP monitor. Only the fields
     * specified in the request body will be updated; all other configuration
     * properties will remain unchanged.
     *
     * @param UpdateHttpMonitorRequest
     * @return UpdateHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/UpdateHttpMonitor.ts.html |here} to see how to use UpdateHttpMonitor API.
     */
    updateHttpMonitor(updateHttpMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#updateHttpMonitor.");
            const pathParams = {
                "{monitorId}": updateHttpMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateHttpMonitorRequest.opcRequestId,
                "if-match": updateHttpMonitorRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/httpMonitors/{monitorId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateHttpMonitorRequest.updateHttpMonitorDetails, "UpdateHttpMonitorDetails", models.UpdateHttpMonitorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateHttpMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "httpMonitor",
                    bodyModel: "model.HttpMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of the specified ping monitor. Only the fields
     * specified in the request body will be updated; all other configuration properties
     * will remain unchanged.
     *
     * @param UpdatePingMonitorRequest
     * @return UpdatePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/UpdatePingMonitor.ts.html |here} to see how to use UpdatePingMonitor API.
     */
    updatePingMonitor(updatePingMonitorRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation HealthChecksClient#updatePingMonitor.");
            const pathParams = {
                "{monitorId}": updatePingMonitorRequest.monitorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updatePingMonitorRequest.opcRequestId,
                "if-match": updatePingMonitorRequest.ifMatch
            };
            const request = yield oci_common_2.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/pingMonitors/{monitorId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updatePingMonitorRequest.updatePingMonitorDetails, "UpdatePingMonitorDetails", models.UpdatePingMonitorDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_2.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updatePingMonitorRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_2.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "pingMonitor",
                    bodyModel: "model.PingMonitor",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.HealthChecksClient = HealthChecksClient;
HealthChecksClient.serviceEndpointTemplate = "https://healthchecks.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map