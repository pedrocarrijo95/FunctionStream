/**
 * Health Checks API
 * API for the Health Checks service. Use this API to manage endpoint probes and monitors.
For more information, see
[Overview of the Health Checks Service](/iaas/Content/HealthChecks/Concepts/healthchecks.htm).

 * OpenAPI spec version: 20180501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
export declare enum HealthChecksApiKeys {
}
export declare class HealthChecksClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Moves a monitor into a different compartment. When provided, `If-Match` is checked
     * against ETag values of the resource.
     *
     * @param ChangeHttpMonitorCompartmentRequest
     * @return ChangeHttpMonitorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ChangeHttpMonitorCompartment.ts.html |here} to see how to use ChangeHttpMonitorCompartment API.
     */
    changeHttpMonitorCompartment(changeHttpMonitorCompartmentRequest: requests.ChangeHttpMonitorCompartmentRequest): Promise<responses.ChangeHttpMonitorCompartmentResponse>;
    /**
     * Moves a monitor into a different compartment. When provided, `If-Match` is checked
     * against ETag values of the resource.
     *
     * @param ChangePingMonitorCompartmentRequest
     * @return ChangePingMonitorCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ChangePingMonitorCompartment.ts.html |here} to see how to use ChangePingMonitorCompartment API.
     */
    changePingMonitorCompartment(changePingMonitorCompartmentRequest: requests.ChangePingMonitorCompartmentRequest): Promise<responses.ChangePingMonitorCompartmentResponse>;
    /**
     * Creates an HTTP monitor. Vantage points will be automatically selected if not specified,
     * and probes will be initiated from each vantage point to each of the targets at the frequency
     * specified by `intervalInSeconds`.
     *
     * @param CreateHttpMonitorRequest
     * @return CreateHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateHttpMonitor.ts.html |here} to see how to use CreateHttpMonitor API.
     */
    createHttpMonitor(createHttpMonitorRequest: requests.CreateHttpMonitorRequest): Promise<responses.CreateHttpMonitorResponse>;
    /**
     * Creates an on-demand HTTP probe. The location response header contains the URL for
     * fetching the probe results.
     * <p>
     *Note:* On-demand probe configurations are not saved.
     *
     * @param CreateOnDemandHttpProbeRequest
     * @return CreateOnDemandHttpProbeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateOnDemandHttpProbe.ts.html |here} to see how to use CreateOnDemandHttpProbe API.
     */
    createOnDemandHttpProbe(createOnDemandHttpProbeRequest: requests.CreateOnDemandHttpProbeRequest): Promise<responses.CreateOnDemandHttpProbeResponse>;
    /**
     * Creates an on-demand ping probe. The location response header contains the URL for
     * fetching probe results.
     * <p>
     *Note:* The on-demand probe configuration is not saved.
     *
     * @param CreateOnDemandPingProbeRequest
     * @return CreateOnDemandPingProbeResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreateOnDemandPingProbe.ts.html |here} to see how to use CreateOnDemandPingProbe API.
     */
    createOnDemandPingProbe(createOnDemandPingProbeRequest: requests.CreateOnDemandPingProbeRequest): Promise<responses.CreateOnDemandPingProbeResponse>;
    /**
     * Creates a ping monitor. Vantage points will be automatically selected if not specified,
     * and probes will be initiated from each vantage point to each of the targets at the frequency
     * specified by `intervalInSeconds`.
     *
     * @param CreatePingMonitorRequest
     * @return CreatePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/CreatePingMonitor.ts.html |here} to see how to use CreatePingMonitor API.
     */
    createPingMonitor(createPingMonitorRequest: requests.CreatePingMonitorRequest): Promise<responses.CreatePingMonitorResponse>;
    /**
     * Deletes the HTTP monitor and its configuration. All future probes of this
     * monitor are stopped. Results associated with the monitor are not deleted.
     *
     * @param DeleteHttpMonitorRequest
     * @return DeleteHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/DeleteHttpMonitor.ts.html |here} to see how to use DeleteHttpMonitor API.
     */
    deleteHttpMonitor(deleteHttpMonitorRequest: requests.DeleteHttpMonitorRequest): Promise<responses.DeleteHttpMonitorResponse>;
    /**
     * Deletes the ping monitor and its configuration. All future probes of this
     * monitor are stopped. Results associated with the monitor are not deleted.
     *
     * @param DeletePingMonitorRequest
     * @return DeletePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/DeletePingMonitor.ts.html |here} to see how to use DeletePingMonitor API.
     */
    deletePingMonitor(deletePingMonitorRequest: requests.DeletePingMonitorRequest): Promise<responses.DeletePingMonitorResponse>;
    /**
     * Gets the configuration for the specified monitor.
     *
     * @param GetHttpMonitorRequest
     * @return GetHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/GetHttpMonitor.ts.html |here} to see how to use GetHttpMonitor API.
     */
    getHttpMonitor(getHttpMonitorRequest: requests.GetHttpMonitorRequest): Promise<responses.GetHttpMonitorResponse>;
    /**
     * Gets the configuration for the specified ping monitor.
     *
     * @param GetPingMonitorRequest
     * @return GetPingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/GetPingMonitor.ts.html |here} to see how to use GetPingMonitor API.
     */
    getPingMonitor(getPingMonitorRequest: requests.GetPingMonitorRequest): Promise<responses.GetPingMonitorResponse>;
    /**
     * Gets information about all vantage points available to the user.
     *
     * @param ListHealthChecksVantagePointsRequest
     * @return ListHealthChecksVantagePointsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHealthChecksVantagePoints.ts.html |here} to see how to use ListHealthChecksVantagePoints API.
     */
    listHealthChecksVantagePoints(listHealthChecksVantagePointsRequest: requests.ListHealthChecksVantagePointsRequest): Promise<responses.ListHealthChecksVantagePointsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.HealthChecksVantagePointSummary objects
     * contained in responses from the listHealthChecksVantagePoints operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHealthChecksVantagePoints(request: requests.ListHealthChecksVantagePointsRequest): AsyncIterableIterator<models.HealthChecksVantagePointSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHealthChecksVantagePoints operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHealthChecksVantagePointsResponses(request: requests.ListHealthChecksVantagePointsRequest): AsyncIterableIterator<responses.ListHealthChecksVantagePointsResponse>;
    /**
     * Gets a list of HTTP monitors.
     *
     * @param ListHttpMonitorsRequest
     * @return ListHttpMonitorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHttpMonitors.ts.html |here} to see how to use ListHttpMonitors API.
     */
    listHttpMonitors(listHttpMonitorsRequest: requests.ListHttpMonitorsRequest): Promise<responses.ListHttpMonitorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.HttpMonitorSummary objects
     * contained in responses from the listHttpMonitors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpMonitors(request: requests.ListHttpMonitorsRequest): AsyncIterableIterator<models.HttpMonitorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHttpMonitors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpMonitorsResponses(request: requests.ListHttpMonitorsRequest): AsyncIterableIterator<responses.ListHttpMonitorsResponse>;
    /**
     * Gets the HTTP probe results for the specified probe or monitor, where
     * the `probeConfigurationId` is the OCID of either a monitor or an
     * on-demand probe.
     *
     * @param ListHttpProbeResultsRequest
     * @return ListHttpProbeResultsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListHttpProbeResults.ts.html |here} to see how to use ListHttpProbeResults API.
     */
    listHttpProbeResults(listHttpProbeResultsRequest: requests.ListHttpProbeResultsRequest): Promise<responses.ListHttpProbeResultsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.HttpProbeResultSummary objects
     * contained in responses from the listHttpProbeResults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpProbeResults(request: requests.ListHttpProbeResultsRequest): AsyncIterableIterator<models.HttpProbeResultSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listHttpProbeResults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllHttpProbeResultsResponses(request: requests.ListHttpProbeResultsRequest): AsyncIterableIterator<responses.ListHttpProbeResultsResponse>;
    /**
       * Gets a list of configured ping monitors.
  * <p>
  Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
  * a URL for fetching the next page.
  *
       * @param ListPingMonitorsRequest
       * @return ListPingMonitorsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListPingMonitors.ts.html |here} to see how to use ListPingMonitors API.
       */
    listPingMonitors(listPingMonitorsRequest: requests.ListPingMonitorsRequest): Promise<responses.ListPingMonitorsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.PingMonitorSummary objects
     * contained in responses from the listPingMonitors operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingMonitors(request: requests.ListPingMonitorsRequest): AsyncIterableIterator<models.PingMonitorSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPingMonitors operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingMonitorsResponses(request: requests.ListPingMonitorsRequest): AsyncIterableIterator<responses.ListPingMonitorsResponse>;
    /**
       * Returns the results for the specified probe, where the `probeConfigurationId`
  * is the OCID of either a monitor or an on-demand probe.
  * <p>
  Results are paginated based on `page` and `limit`.  The `opc-next-page` header provides
  * a URL for fetching the next page.  Use `sortOrder` to set the order of the
  * results.  If `sortOrder` is unspecified, results are sorted in ascending order by
  * `startTime`.
  *
       * @param ListPingProbeResultsRequest
       * @return ListPingProbeResultsResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/ListPingProbeResults.ts.html |here} to see how to use ListPingProbeResults API.
       */
    listPingProbeResults(listPingProbeResultsRequest: requests.ListPingProbeResultsRequest): Promise<responses.ListPingProbeResultsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.PingProbeResultSummary objects
     * contained in responses from the listPingProbeResults operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingProbeResults(request: requests.ListPingProbeResultsRequest): AsyncIterableIterator<models.PingProbeResultSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listPingProbeResults operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllPingProbeResultsResponses(request: requests.ListPingProbeResultsRequest): AsyncIterableIterator<responses.ListPingProbeResultsResponse>;
    /**
     * Updates the configuration of the specified HTTP monitor. Only the fields
     * specified in the request body will be updated; all other configuration
     * properties will remain unchanged.
     *
     * @param UpdateHttpMonitorRequest
     * @return UpdateHttpMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/UpdateHttpMonitor.ts.html |here} to see how to use UpdateHttpMonitor API.
     */
    updateHttpMonitor(updateHttpMonitorRequest: requests.UpdateHttpMonitorRequest): Promise<responses.UpdateHttpMonitorResponse>;
    /**
     * Updates the configuration of the specified ping monitor. Only the fields
     * specified in the request body will be updated; all other configuration properties
     * will remain unchanged.
     *
     * @param UpdatePingMonitorRequest
     * @return UpdatePingMonitorResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/healthchecks/UpdatePingMonitor.ts.html |here} to see how to use UpdatePingMonitor API.
     */
    updatePingMonitor(updatePingMonitorRequest: requests.UpdatePingMonitorRequest): Promise<responses.UpdatePingMonitorResponse>;
}
