"use strict";
/**
 * Health Checks API
 * API for the Health Checks service. Use this API to manage endpoint probes and monitors.
For more information, see
[Overview of the Health Checks Service](/iaas/Content/HealthChecks/Concepts/healthchecks.htm).

 * OpenAPI spec version: 20180501
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdatePingMonitorDetails = exports.UpdateHttpMonitorDetails = exports.TcpConnection = exports.Routing = exports.PingProbeResultSummary = exports.PingProbeProtocol = exports.PingProbe = exports.PingMonitorSummary = exports.PingMonitor = exports.HttpProbeResultSummary = exports.HttpProbeProtocol = exports.HttpProbeMethod = exports.HttpProbe = exports.HttpMonitorSummary = exports.HttpMonitor = exports.HealthChecksVantagePointSummary = exports.Geolocation = exports.DNS = exports.CreatePingMonitorDetails = exports.CreateOnDemandPingProbeDetails = exports.CreateOnDemandHttpProbeDetails = exports.CreateHttpMonitorDetails = exports.Connection = exports.ChangePingMonitorCompartmentDetails = exports.ChangeHttpMonitorCompartmentDetails = void 0;
const ChangeHttpMonitorCompartmentDetails = __importStar(require("./change-http-monitor-compartment-details"));
exports.ChangeHttpMonitorCompartmentDetails = ChangeHttpMonitorCompartmentDetails.ChangeHttpMonitorCompartmentDetails;
const ChangePingMonitorCompartmentDetails = __importStar(require("./change-ping-monitor-compartment-details"));
exports.ChangePingMonitorCompartmentDetails = ChangePingMonitorCompartmentDetails.ChangePingMonitorCompartmentDetails;
const Connection = __importStar(require("./connection"));
exports.Connection = Connection.Connection;
const CreateHttpMonitorDetails = __importStar(require("./create-http-monitor-details"));
exports.CreateHttpMonitorDetails = CreateHttpMonitorDetails.CreateHttpMonitorDetails;
const CreateOnDemandHttpProbeDetails = __importStar(require("./create-on-demand-http-probe-details"));
exports.CreateOnDemandHttpProbeDetails = CreateOnDemandHttpProbeDetails.CreateOnDemandHttpProbeDetails;
const CreateOnDemandPingProbeDetails = __importStar(require("./create-on-demand-ping-probe-details"));
exports.CreateOnDemandPingProbeDetails = CreateOnDemandPingProbeDetails.CreateOnDemandPingProbeDetails;
const CreatePingMonitorDetails = __importStar(require("./create-ping-monitor-details"));
exports.CreatePingMonitorDetails = CreatePingMonitorDetails.CreatePingMonitorDetails;
const DNS = __importStar(require("./d-ns"));
exports.DNS = DNS.DNS;
const Geolocation = __importStar(require("./geolocation"));
exports.Geolocation = Geolocation.Geolocation;
const HealthChecksVantagePointSummary = __importStar(require("./health-checks-vantage-point-summary"));
exports.HealthChecksVantagePointSummary = HealthChecksVantagePointSummary.HealthChecksVantagePointSummary;
const HttpMonitor = __importStar(require("./http-monitor"));
exports.HttpMonitor = HttpMonitor.HttpMonitor;
const HttpMonitorSummary = __importStar(require("./http-monitor-summary"));
exports.HttpMonitorSummary = HttpMonitorSummary.HttpMonitorSummary;
const HttpProbe = __importStar(require("./http-probe"));
exports.HttpProbe = HttpProbe.HttpProbe;
const HttpProbeMethod = __importStar(require("./http-probe-method"));
exports.HttpProbeMethod = HttpProbeMethod.HttpProbeMethod;
const HttpProbeProtocol = __importStar(require("./http-probe-protocol"));
exports.HttpProbeProtocol = HttpProbeProtocol.HttpProbeProtocol;
const HttpProbeResultSummary = __importStar(require("./http-probe-result-summary"));
exports.HttpProbeResultSummary = HttpProbeResultSummary.HttpProbeResultSummary;
const PingMonitor = __importStar(require("./ping-monitor"));
exports.PingMonitor = PingMonitor.PingMonitor;
const PingMonitorSummary = __importStar(require("./ping-monitor-summary"));
exports.PingMonitorSummary = PingMonitorSummary.PingMonitorSummary;
const PingProbe = __importStar(require("./ping-probe"));
exports.PingProbe = PingProbe.PingProbe;
const PingProbeProtocol = __importStar(require("./ping-probe-protocol"));
exports.PingProbeProtocol = PingProbeProtocol.PingProbeProtocol;
const PingProbeResultSummary = __importStar(require("./ping-probe-result-summary"));
exports.PingProbeResultSummary = PingProbeResultSummary.PingProbeResultSummary;
const Routing = __importStar(require("./routing"));
exports.Routing = Routing.Routing;
const TcpConnection = __importStar(require("./tcp-connection"));
exports.TcpConnection = TcpConnection.TcpConnection;
const UpdateHttpMonitorDetails = __importStar(require("./update-http-monitor-details"));
exports.UpdateHttpMonitorDetails = UpdateHttpMonitorDetails.UpdateHttpMonitorDetails;
const UpdatePingMonitorDetails = __importStar(require("./update-ping-monitor-details"));
exports.UpdatePingMonitorDetails = UpdatePingMonitorDetails.UpdatePingMonitorDetails;
//# sourceMappingURL=index.js.map