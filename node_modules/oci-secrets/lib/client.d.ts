/**
 * Secrets
 * API for retrieving secrets from vaults.
 * OpenAPI spec version: 20190301
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import common = require("oci-common");
import * as requests from "./request";
import * as models from "./model";
import * as responses from "./response";
export declare enum SecretsApiKeys {
}
export declare class SecretsClient {
    protected static serviceEndpointTemplate: string;
    protected "_endpoint": string;
    protected "_defaultHeaders": any;
    protected "_clientConfiguration": common.ClientConfiguration;
    protected _circuitBreaker: null;
    protected _httpClient: common.HttpClient;
    constructor(params: common.AuthParams, clientConfiguration?: common.ClientConfiguration);
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint(): string;
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint: string);
    get logger(): import("oci-common/lib/log").Logger;
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region: common.Region);
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId: string);
    /**
     * Gets a secret bundle that matches either the specified `stage`, `label`, or `versionNumber` parameter.
     * If none of these parameters are provided, the bundle for the secret version marked as `CURRENT` will be returned.
     *
     * @param GetSecretBundleRequest
     * @return GetSecretBundleResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/secrets/GetSecretBundle.ts.html |here} to see how to use GetSecretBundle API.
     */
    getSecretBundle(getSecretBundleRequest: requests.GetSecretBundleRequest): Promise<responses.GetSecretBundleResponse>;
    /**
     * Lists all secret bundle versions for the specified secret.
     * @param ListSecretBundleVersionsRequest
     * @return ListSecretBundleVersionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/secrets/ListSecretBundleVersions.ts.html |here} to see how to use ListSecretBundleVersions API.
     */
    listSecretBundleVersions(listSecretBundleVersionsRequest: requests.ListSecretBundleVersionsRequest): Promise<responses.ListSecretBundleVersionsResponse>;
    /**
     * Creates a new async iterator which will iterate over the models.SecretBundleVersionSummary objects
     * contained in responses from the listSecretBundleVersions operation. This iterator will fetch more data from the
     * server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecretBundleVersions(request: requests.ListSecretBundleVersionsRequest): AsyncIterableIterator<models.SecretBundleVersionSummary>;
    /**
     * Creates a new async iterator which will iterate over the responses received from the listSecretBundleVersions operation. This iterator
     * will fetch more data from the server as needed.
     *
     * @param request a request which can be sent to the service operation
     */
    listAllSecretBundleVersionsResponses(request: requests.ListSecretBundleVersionsRequest): AsyncIterableIterator<responses.ListSecretBundleVersionsResponse>;
}
