"use strict";
/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseParameterSummary = void 0;
const model = __importStar(require("../model"));
var DatabaseParameterSummary;
(function (DatabaseParameterSummary) {
    let Type;
    (function (Type) {
        Type["Boolean"] = "BOOLEAN";
        Type["String"] = "STRING";
        Type["Integer"] = "INTEGER";
        Type["Filename"] = "FILENAME";
        Type["BigInteger"] = "BIG_INTEGER";
        Type["Reserved"] = "RESERVED";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Type["UnknownValue"] = "UNKNOWN_VALUE";
    })(Type = DatabaseParameterSummary.Type || (DatabaseParameterSummary.Type = {}));
    let IsSystemModifiable;
    (function (IsSystemModifiable) {
        IsSystemModifiable["Immediate"] = "IMMEDIATE";
        IsSystemModifiable["Deferred"] = "DEFERRED";
        IsSystemModifiable["False"] = "FALSE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        IsSystemModifiable["UnknownValue"] = "UNKNOWN_VALUE";
    })(IsSystemModifiable = DatabaseParameterSummary.IsSystemModifiable || (DatabaseParameterSummary.IsSystemModifiable = {}));
    let IsModified;
    (function (IsModified) {
        IsModified["Modified"] = "MODIFIED";
        IsModified["False"] = "FALSE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        IsModified["UnknownValue"] = "UNKNOWN_VALUE";
    })(IsModified = DatabaseParameterSummary.IsModified || (DatabaseParameterSummary.IsModified = {}));
    let Constraint;
    (function (Constraint) {
        Constraint["Unique"] = "UNIQUE";
        Constraint["Identical"] = "IDENTICAL";
        Constraint["None"] = "NONE";
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        Constraint["UnknownValue"] = "UNKNOWN_VALUE";
    })(Constraint = DatabaseParameterSummary.Constraint || (DatabaseParameterSummary.Constraint = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "allowedValues": obj.allowedValues
                ? obj.allowedValues.map(item => {
                    return model.AllowedParameterValue.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    DatabaseParameterSummary.getJsonObj = getJsonObj;
})(DatabaseParameterSummary = exports.DatabaseParameterSummary || (exports.DatabaseParameterSummary = {}));
//# sourceMappingURL=database-parameter-summary.js.map