"use strict";
/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tablespace = void 0;
const model = __importStar(require("../model"));
var Tablespace;
(function (Tablespace) {
    let Type;
    (function (Type) {
        Type["Undo"] = "UNDO";
        Type["LostWriteProtection"] = "LOST_WRITE_PROTECTION";
        Type["Permanent"] = "PERMANENT";
        Type["Temporary"] = "TEMPORARY";
    })(Type = Tablespace.Type || (Tablespace.Type = {}));
    let Status;
    (function (Status) {
        Status["Online"] = "ONLINE";
        Status["Offline"] = "OFFLINE";
        Status["ReadOnly"] = "READ_ONLY";
    })(Status = Tablespace.Status || (Tablespace.Status = {}));
    let Logging;
    (function (Logging) {
        Logging["Logging"] = "LOGGING";
        Logging["Nologging"] = "NOLOGGING";
    })(Logging = Tablespace.Logging || (Tablespace.Logging = {}));
    let ExtentManagement;
    (function (ExtentManagement) {
        ExtentManagement["Local"] = "LOCAL";
        ExtentManagement["Dictionary"] = "DICTIONARY";
    })(ExtentManagement = Tablespace.ExtentManagement || (Tablespace.ExtentManagement = {}));
    let AllocationType;
    (function (AllocationType) {
        AllocationType["System"] = "SYSTEM";
        AllocationType["Uniform"] = "UNIFORM";
        AllocationType["User"] = "USER";
    })(AllocationType = Tablespace.AllocationType || (Tablespace.AllocationType = {}));
    let SegmentSpaceManagement;
    (function (SegmentSpaceManagement) {
        SegmentSpaceManagement["Manual"] = "MANUAL";
        SegmentSpaceManagement["Auto"] = "AUTO";
    })(SegmentSpaceManagement = Tablespace.SegmentSpaceManagement || (Tablespace.SegmentSpaceManagement = {}));
    let DefaultTableCompression;
    (function (DefaultTableCompression) {
        DefaultTableCompression["Enabled"] = "ENABLED";
        DefaultTableCompression["Disabled"] = "DISABLED";
    })(DefaultTableCompression = Tablespace.DefaultTableCompression || (Tablespace.DefaultTableCompression = {}));
    let Retention;
    (function (Retention) {
        Retention["Guarantee"] = "GUARANTEE";
        Retention["Noguarantee"] = "NOGUARANTEE";
        Retention["NotApply"] = "NOT_APPLY";
    })(Retention = Tablespace.Retention || (Tablespace.Retention = {}));
    let PredicateEvaluation;
    (function (PredicateEvaluation) {
        PredicateEvaluation["Host"] = "HOST";
        PredicateEvaluation["Storage"] = "STORAGE";
    })(PredicateEvaluation = Tablespace.PredicateEvaluation || (Tablespace.PredicateEvaluation = {}));
    let CompressFor;
    (function (CompressFor) {
        CompressFor["Basic"] = "BASIC";
        CompressFor["Advanced"] = "ADVANCED";
        CompressFor["QueryLow"] = "QUERY_LOW";
        CompressFor["QueryHigh"] = "QUERY_HIGH";
        CompressFor["ArchiveLow"] = "ARCHIVE_LOW";
        CompressFor["ArchiveHigh"] = "ARCHIVE_HIGH";
        CompressFor["DirectLoadOnly"] = "DIRECT_LOAD_ONLY";
        CompressFor["ForAllOperations"] = "FOR_ALL_OPERATIONS";
    })(CompressFor = Tablespace.CompressFor || (Tablespace.CompressFor = {}));
    let DefaultInMemory;
    (function (DefaultInMemory) {
        DefaultInMemory["Enabled"] = "ENABLED";
        DefaultInMemory["Disabled"] = "DISABLED";
    })(DefaultInMemory = Tablespace.DefaultInMemory || (Tablespace.DefaultInMemory = {}));
    let DefaultInMemoryPriority;
    (function (DefaultInMemoryPriority) {
        DefaultInMemoryPriority["Low"] = "LOW";
        DefaultInMemoryPriority["Medium"] = "MEDIUM";
        DefaultInMemoryPriority["High"] = "HIGH";
        DefaultInMemoryPriority["Critical"] = "CRITICAL";
        DefaultInMemoryPriority["None"] = "NONE";
    })(DefaultInMemoryPriority = Tablespace.DefaultInMemoryPriority || (Tablespace.DefaultInMemoryPriority = {}));
    let DefaultInMemoryDistribute;
    (function (DefaultInMemoryDistribute) {
        DefaultInMemoryDistribute["Auto"] = "AUTO";
        DefaultInMemoryDistribute["ByRowidRange"] = "BY_ROWID_RANGE";
        DefaultInMemoryDistribute["ByPartition"] = "BY_PARTITION";
        DefaultInMemoryDistribute["BySubpartition"] = "BY_SUBPARTITION";
    })(DefaultInMemoryDistribute = Tablespace.DefaultInMemoryDistribute || (Tablespace.DefaultInMemoryDistribute = {}));
    let DefaultInMemoryCompression;
    (function (DefaultInMemoryCompression) {
        DefaultInMemoryCompression["NoMemcompress"] = "NO_MEMCOMPRESS";
        DefaultInMemoryCompression["ForDml"] = "FOR_DML";
        DefaultInMemoryCompression["ForQueryLow"] = "FOR_QUERY_LOW";
        DefaultInMemoryCompression["ForQueryHigh"] = "FOR_QUERY_HIGH";
        DefaultInMemoryCompression["ForCapacityLow"] = "FOR_CAPACITY_LOW";
        DefaultInMemoryCompression["ForCapacityHigh"] = "FOR_CAPACITY_HIGH";
    })(DefaultInMemoryCompression = Tablespace.DefaultInMemoryCompression || (Tablespace.DefaultInMemoryCompression = {}));
    let DefaultInMemoryDuplicate;
    (function (DefaultInMemoryDuplicate) {
        DefaultInMemoryDuplicate["NoDuplicate"] = "NO_DUPLICATE";
        DefaultInMemoryDuplicate["Duplicate"] = "DUPLICATE";
        DefaultInMemoryDuplicate["DuplicateAll"] = "DUPLICATE_ALL";
    })(DefaultInMemoryDuplicate = Tablespace.DefaultInMemoryDuplicate || (Tablespace.DefaultInMemoryDuplicate = {}));
    let Shared;
    (function (Shared) {
        Shared["Shared"] = "SHARED";
        Shared["LocalOnLeaf"] = "LOCAL_ON_LEAF";
        Shared["LocalOnAll"] = "LOCAL_ON_ALL";
    })(Shared = Tablespace.Shared || (Tablespace.Shared = {}));
    let DefaultIndexCompression;
    (function (DefaultIndexCompression) {
        DefaultIndexCompression["Enabled"] = "ENABLED";
        DefaultIndexCompression["Disabled"] = "DISABLED";
    })(DefaultIndexCompression = Tablespace.DefaultIndexCompression || (Tablespace.DefaultIndexCompression = {}));
    let IndexCompressFor;
    (function (IndexCompressFor) {
        IndexCompressFor["AdvancedLow"] = "ADVANCED_LOW";
        IndexCompressFor["AdvancedHigh"] = "ADVANCED_HIGH";
    })(IndexCompressFor = Tablespace.IndexCompressFor || (Tablespace.IndexCompressFor = {}));
    let DefaultInMemoryService;
    (function (DefaultInMemoryService) {
        DefaultInMemoryService["Default"] = "DEFAULT";
        DefaultInMemoryService["None"] = "NONE";
        DefaultInMemoryService["All"] = "ALL";
        DefaultInMemoryService["UserDefined"] = "USER_DEFINED";
    })(DefaultInMemoryService = Tablespace.DefaultInMemoryService || (Tablespace.DefaultInMemoryService = {}));
    let LostWriteProtect;
    (function (LostWriteProtect) {
        LostWriteProtect["Enabled"] = "ENABLED";
        LostWriteProtect["ProtectOff"] = "PROTECT_OFF";
        LostWriteProtect["Suspend"] = "SUSPEND";
    })(LostWriteProtect = Tablespace.LostWriteProtect || (Tablespace.LostWriteProtect = {}));
    function getJsonObj(obj) {
        const jsonObj = Object.assign(Object.assign({}, obj), {
            "datafiles": obj.datafiles
                ? obj.datafiles.map(item => {
                    return model.Datafile.getJsonObj(item);
                })
                : undefined
        });
        return jsonObj;
    }
    Tablespace.getJsonObj = getJsonObj;
})(Tablespace = exports.Tablespace || (exports.Tablespace = {}));
//# sourceMappingURL=tablespace.js.map