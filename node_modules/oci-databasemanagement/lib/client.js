"use strict";
/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DbManagementClient = exports.DbManagementApiKeys = void 0;
const common = require("oci-common");
const models = __importStar(require("./model"));
const dbmanagement_waiter_1 = require("./dbmanagement-waiter");
const oci_common_1 = require("oci-common");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var DbManagementApiKeys;
(function (DbManagementApiKeys) {
})(DbManagementApiKeys = exports.DbManagementApiKeys || (exports.DbManagementApiKeys = {}));
class DbManagementClient {
    constructor(params, clientConfiguration) {
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
        }
        this._httpClient =
            params.httpClient || new common.FetchHttpClient(requestSigner, this._circuitBreaker);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20201101";
        if (this.logger)
            this.logger.info(`DbManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(DbManagementClient.serviceEndpointTemplate, region);
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(DbManagementClient.serviceEndpointTemplate, regionId);
    }
    /**
     * Creates a new DbManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new dbmanagement_waiter_1.DbManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Adds a Managed Database to a specific Managed Database Group.
     * After the database is added, it will be included in the
     * management activities performed on the Managed Database Group.
     *
     * @param AddManagedDatabaseToManagedDatabaseGroupRequest
     * @return AddManagedDatabaseToManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/AddManagedDatabaseToManagedDatabaseGroup.ts.html |here} to see how to use AddManagedDatabaseToManagedDatabaseGroup API.
     */
    addManagedDatabaseToManagedDatabaseGroup(addManagedDatabaseToManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#addManagedDatabaseToManagedDatabaseGroup.");
            const pathParams = {
                "{managedDatabaseGroupId}": addManagedDatabaseToManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": addManagedDatabaseToManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": addManagedDatabaseToManagedDatabaseGroupRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/addManagedDatabase",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(addManagedDatabaseToManagedDatabaseGroupRequest.addManagedDatabaseToManagedDatabaseGroupDetails, "AddManagedDatabaseToManagedDatabaseGroupDetails", models.AddManagedDatabaseToManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, addManagedDatabaseToManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Changes database parameter values. There are two kinds of database
  * parameters:
  * <p>
  - Dynamic parameters: They can be changed for the current Oracle
  * Database instance. The changes take effect immediately.
  * - Static parameters: They cannot be changed for the current instance.
  * You must change these parameters and then restart the database before
  * changes take effect.
  * <p>
  **Note:** If the instance is started using a text initialization
  * parameter file, the parameter changes are applicable only for the
  * current instance. You must update them manually to be passed to
  * a future instance.
  *
       * @param ChangeDatabaseParametersRequest
       * @return ChangeDatabaseParametersResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ChangeDatabaseParameters.ts.html |here} to see how to use ChangeDatabaseParameters API.
       */
    changeDatabaseParameters(changeDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeDatabaseParameters.");
            const pathParams = {
                "{managedDatabaseId}": changeDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeDatabaseParametersRequest.opcRequestId,
                "opc-retry-token": changeDatabaseParametersRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/changeDatabaseParameters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeDatabaseParametersRequest.changeDatabaseParametersDetails, "ChangeDatabaseParametersDetails", models.ChangeDatabaseParametersDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeDatabaseParametersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updateDatabaseParametersResult",
                    bodyModel: "model.UpdateDatabaseParametersResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a job.
     *
     * @param ChangeJobCompartmentRequest
     * @return ChangeJobCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ChangeJobCompartment.ts.html |here} to see how to use ChangeJobCompartment API.
     */
    changeJobCompartment(changeJobCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeJobCompartment.");
            const pathParams = {
                "{jobId}": changeJobCompartmentRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeJobCompartmentRequest.opcRequestId,
                "opc-retry-token": changeJobCompartmentRequest.opcRetryToken,
                "if-match": changeJobCompartmentRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeJobCompartmentRequest.changeJobCompartmentDetails, "ChangeJobCompartmentDetails", models.ChangeJobCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeJobCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Moves a Managed Database Group to a different compartment.
     * The destination compartment must not have a Managed Database Group
     * with the same name.
     *
     * @param ChangeManagedDatabaseGroupCompartmentRequest
     * @return ChangeManagedDatabaseGroupCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ChangeManagedDatabaseGroupCompartment.ts.html |here} to see how to use ChangeManagedDatabaseGroupCompartment API.
     */
    changeManagedDatabaseGroupCompartment(changeManagedDatabaseGroupCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#changeManagedDatabaseGroupCompartment.");
            const pathParams = {
                "{managedDatabaseGroupId}": changeManagedDatabaseGroupCompartmentRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeManagedDatabaseGroupCompartmentRequest.opcRequestId,
                "opc-retry-token": changeManagedDatabaseGroupCompartmentRequest.opcRetryToken,
                "if-match": changeManagedDatabaseGroupCompartmentRequest.ifMatch
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/changeCompartment",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeManagedDatabaseGroupCompartmentRequest.changeManagedDatabaseGroupCompartmentDetails, "ChangeManagedDatabaseGroupCompartmentDetails", models.ChangeManagedDatabaseGroupCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, changeManagedDatabaseGroupCompartmentRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a job to be executed on a Managed Database or Managed Database Group. Only one
     * of the parameters, managedDatabaseId or managedDatabaseGroupId should be provided as
     * input in CreateJobDetails resource in request body.
     *
     * @param CreateJobRequest
     * @return CreateJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/CreateJob.ts.html |here} to see how to use CreateJob API.
     */
    createJob(createJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createJob.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createJobRequest.opcRequestId,
                "opc-retry-token": createJobRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createJobRequest.createJobDetails, "CreateJobDetails", models.CreateJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a Managed Database Group. The group does not contain any
     * Managed Databases when it is created, and they must be added later.
     *
     * @param CreateManagedDatabaseGroupRequest
     * @return CreateManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/CreateManagedDatabaseGroup.ts.html |here} to see how to use CreateManagedDatabaseGroup API.
     */
    createManagedDatabaseGroup(createManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#createManagedDatabaseGroup.");
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": createManagedDatabaseGroupRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagedDatabaseGroupRequest.createManagedDatabaseGroupDetails, "CreateManagedDatabaseGroupDetails", models.CreateManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, createManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the job specified by jobId.
     * @param DeleteJobRequest
     * @return DeleteJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/DeleteJob.ts.html |here} to see how to use DeleteJob API.
     */
    deleteJob(deleteJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteJob.");
            const pathParams = {
                "{jobId}": deleteJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteJobRequest.ifMatch,
                "opc-request-id": deleteJobRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the Managed Database Group specified by managedDatabaseGroupId.
     * If the group contains Managed Databases, then it cannot be deleted.
     *
     * @param DeleteManagedDatabaseGroupRequest
     * @return DeleteManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/DeleteManagedDatabaseGroup.ts.html |here} to see how to use DeleteManagedDatabaseGroup API.
     */
    deleteManagedDatabaseGroup(deleteManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#deleteManagedDatabaseGroup.");
            const pathParams = {
                "{managedDatabaseGroupId}": deleteManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagedDatabaseGroupRequest.ifMatch,
                "opc-request-id": deleteManagedDatabaseGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, deleteManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the metrics related to cluster cache for the Oracle
     * Real Application Clusters (Oracle RAC) database specified
     * by managedDatabaseId.
     *
     * @param GetClusterCacheMetricRequest
     * @return GetClusterCacheMetricResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetClusterCacheMetric.ts.html |here} to see how to use GetClusterCacheMetric API.
     */
    getClusterCacheMetric(getClusterCacheMetricRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getClusterCacheMetric.");
            const pathParams = {
                "{managedDatabaseId}": getClusterCacheMetricRequest.managedDatabaseId
            };
            const queryParams = {
                "startTime": getClusterCacheMetricRequest.startTime,
                "endTime": getClusterCacheMetricRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getClusterCacheMetricRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/clusterCacheMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getClusterCacheMetricRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "clusterCacheMetric",
                    bodyModel: "model.ClusterCacheMetric",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the health metrics for a fleet of databases in a compartment or in a Managed Database Group.
     * Either the CompartmentId or the ManagedDatabaseGroupId query parameters must be provided to retrieve the health metrics.
     *
     * @param GetDatabaseFleetHealthMetricsRequest
     * @return GetDatabaseFleetHealthMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetDatabaseFleetHealthMetrics.ts.html |here} to see how to use GetDatabaseFleetHealthMetrics API.
     */
    getDatabaseFleetHealthMetrics(getDatabaseFleetHealthMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getDatabaseFleetHealthMetrics.");
            const pathParams = {};
            const queryParams = {
                "managedDatabaseGroupId": getDatabaseFleetHealthMetricsRequest.managedDatabaseGroupId,
                "compartmentId": getDatabaseFleetHealthMetricsRequest.compartmentId,
                "compareBaselineTime": getDatabaseFleetHealthMetricsRequest.compareBaselineTime,
                "compareTargetTime": getDatabaseFleetHealthMetricsRequest.compareTargetTime,
                "compareType": getDatabaseFleetHealthMetricsRequest.compareType,
                "filterByMetricNames": getDatabaseFleetHealthMetricsRequest.filterByMetricNames,
                "filterByDatabaseType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseType,
                "filterByDatabaseSubType": getDatabaseFleetHealthMetricsRequest.filterByDatabaseSubType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseFleetHealthMetricsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/fleetMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDatabaseFleetHealthMetricsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseFleetHealthMetrics",
                    bodyModel: "model.DatabaseFleetHealthMetrics",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets a summary of the activity and resource usage metrics like DB Time, CPU, User I/O, Wait, Storage, and Memory for a Managed Database.
     * @param GetDatabaseHomeMetricsRequest
     * @return GetDatabaseHomeMetricsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetDatabaseHomeMetrics.ts.html |here} to see how to use GetDatabaseHomeMetrics API.
     */
    getDatabaseHomeMetrics(getDatabaseHomeMetricsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getDatabaseHomeMetrics.");
            const pathParams = {};
            const queryParams = {
                "managedDatabaseId": getDatabaseHomeMetricsRequest.managedDatabaseId,
                "startTime": getDatabaseHomeMetricsRequest.startTime,
                "endTime": getDatabaseHomeMetricsRequest.endTime
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getDatabaseHomeMetricsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/databaseHomeMetrics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getDatabaseHomeMetricsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseHomeMetrics",
                    bodyModel: "model.DatabaseHomeMetrics",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job specified by jobId.
     *
     * @param GetJobRequest
     * @return GetJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetJob.ts.html |here} to see how to use GetJob API.
     */
    getJob(getJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJob.");
            const pathParams = {
                "{jobId}": getJobRequest.jobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs/{jobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getJobRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "job",
                    bodyModel: "model.Job",
                    responseHeaders: [
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job execution specified by jobExecutionId.
     *
     * @param GetJobExecutionRequest
     * @return GetJobExecutionResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetJobExecution.ts.html |here} to see how to use GetJobExecution API.
     */
    getJobExecution(getJobExecutionRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJobExecution.");
            const pathParams = {
                "{jobExecutionId}": getJobExecutionRequest.jobExecutionId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobExecutionRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobExecutions/{jobExecutionId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getJobExecutionRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecution",
                    bodyModel: "model.JobExecution",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the job run specified by jobRunId.
     *
     * @param GetJobRunRequest
     * @return GetJobRunResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetJobRun.ts.html |here} to see how to use GetJobRun API.
     */
    getJobRun(getJobRunRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getJobRun.");
            const pathParams = {
                "{jobRunId}": getJobRunRequest.jobRunId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getJobRunRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns/{jobRunId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getJobRunRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRun",
                    bodyModel: "model.JobRun",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the Managed Database specified by managedDatabaseId.
     *
     * @param GetManagedDatabaseRequest
     * @return GetManagedDatabaseResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetManagedDatabase.ts.html |here} to see how to use GetManagedDatabase API.
     */
    getManagedDatabase(getManagedDatabaseRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getManagedDatabase.");
            const pathParams = {
                "{managedDatabaseId}": getManagedDatabaseRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedDatabaseRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getManagedDatabaseRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabase",
                    bodyModel: "model.ManagedDatabase",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the details for the Managed Database Group specified by managedDatabaseGroupId.
     *
     * @param GetManagedDatabaseGroupRequest
     * @return GetManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/GetManagedDatabaseGroup.ts.html |here} to see how to use GetManagedDatabaseGroup API.
     */
    getManagedDatabaseGroup(getManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#getManagedDatabaseGroup.");
            const pathParams = {
                "{managedDatabaseGroupId}": getManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedDatabaseGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, getManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of database parameters for the specified Managed Database. The parameters are listed in alphabetical order, along with their current values.
     *
     * @param ListDatabaseParametersRequest
     * @return ListDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListDatabaseParameters.ts.html |here} to see how to use ListDatabaseParameters API.
     */
    listDatabaseParameters(listDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listDatabaseParameters.");
            const pathParams = {
                "{managedDatabaseId}": listDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {
                "source": listDatabaseParametersRequest.source,
                "name": listDatabaseParametersRequest.name,
                "isAllowedValuesIncluded": listDatabaseParametersRequest.isAllowedValuesIncluded,
                "sortBy": listDatabaseParametersRequest.sortBy,
                "sortOrder": listDatabaseParametersRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listDatabaseParametersRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/databaseParameters",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listDatabaseParametersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "databaseParametersCollection",
                    bodyModel: "model.DatabaseParametersCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job execution for a specific ID or the list of job executions for a job, Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId or managedDatabaseGroupId should be provided.
     * If none of these parameters is provided, all the job executions in the compartment are listed. Job executions can also be filtered
     * based on the name and status parameters.
     *
     * @param ListJobExecutionsRequest
     * @return ListJobExecutionsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListJobExecutions.ts.html |here} to see how to use ListJobExecutions API.
     */
    listJobExecutions(listJobExecutionsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobExecutions.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobExecutionsRequest.compartmentId,
                "id": listJobExecutionsRequest.id,
                "jobId": listJobExecutionsRequest.jobId,
                "managedDatabaseId": listJobExecutionsRequest.managedDatabaseId,
                "managedDatabaseGroupId": listJobExecutionsRequest.managedDatabaseGroupId,
                "status": listJobExecutionsRequest.status,
                "name": listJobExecutionsRequest.name,
                "limit": listJobExecutionsRequest.limit,
                "page": listJobExecutionsRequest.page,
                "sortBy": listJobExecutionsRequest.sortBy,
                "sortOrder": listJobExecutionsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobExecutionsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobExecutions",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listJobExecutionsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobExecutionCollection",
                    bodyModel: "model.JobExecutionCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job run for a specific ID or the list of job runs for a job, Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, jobId, managedDatabaseId, or managedDatabaseGroupId
     * should be provided. If none of these parameters is provided, all the job runs in the compartment are listed.
     * Job runs can also be filtered based on name and runStatus parameters.
     *
     * @param ListJobRunsRequest
     * @return ListJobRunsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListJobRuns.ts.html |here} to see how to use ListJobRuns API.
     */
    listJobRuns(listJobRunsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobRuns.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobRunsRequest.compartmentId,
                "id": listJobRunsRequest.id,
                "jobId": listJobRunsRequest.jobId,
                "managedDatabaseId": listJobRunsRequest.managedDatabaseId,
                "managedDatabaseGroupId": listJobRunsRequest.managedDatabaseGroupId,
                "runStatus": listJobRunsRequest.runStatus,
                "name": listJobRunsRequest.name,
                "limit": listJobRunsRequest.limit,
                "page": listJobRunsRequest.page,
                "sortBy": listJobRunsRequest.sortBy,
                "sortOrder": listJobRunsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobRunsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobRuns",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listJobRunsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobRunCollection",
                    bodyModel: "model.JobRunCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the job for a specific ID or the list of jobs for a Managed Database or Managed Database Group
     * in a specific compartment. Only one of the parameters, ID, managedDatabaseId or managedDatabaseGroupId,
     * should be provided. If none of these parameters is provided, all the jobs in the compartment are listed.
     * Jobs can also be filtered based on the name and lifecycleState parameters.
     *
     * @param ListJobsRequest
     * @return ListJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListJobs.ts.html |here} to see how to use ListJobs API.
     */
    listJobs(listJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listJobs.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listJobsRequest.compartmentId,
                "id": listJobsRequest.id,
                "managedDatabaseGroupId": listJobsRequest.managedDatabaseGroupId,
                "managedDatabaseId": listJobsRequest.managedDatabaseId,
                "name": listJobsRequest.name,
                "lifecycleState": listJobsRequest.lifecycleState,
                "limit": listJobsRequest.limit,
                "page": listJobsRequest.page,
                "sortBy": listJobsRequest.sortBy,
                "sortOrder": listJobsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listJobsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/jobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listJobsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "jobCollection",
                    bodyModel: "model.JobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Managed Database Group for a specific ID or the list of Managed Database Groups in
     * a specific compartment. Managed Database Groups can also be filtered based on the name parameter.
     * Only one of the parameters, ID or name should be provided. If none of these parameters is provided,
     * all the Managed Database Groups in the compartment are listed.
     *
     * @param ListManagedDatabaseGroupsRequest
     * @return ListManagedDatabaseGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListManagedDatabaseGroups.ts.html |here} to see how to use ListManagedDatabaseGroups API.
     */
    listManagedDatabaseGroups(listManagedDatabaseGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listManagedDatabaseGroups.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedDatabaseGroupsRequest.compartmentId,
                "id": listManagedDatabaseGroupsRequest.id,
                "name": listManagedDatabaseGroupsRequest.name,
                "lifecycleState": listManagedDatabaseGroupsRequest.lifecycleState,
                "page": listManagedDatabaseGroupsRequest.page,
                "limit": listManagedDatabaseGroupsRequest.limit,
                "sortBy": listManagedDatabaseGroupsRequest.sortBy,
                "sortOrder": listManagedDatabaseGroupsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedDatabaseGroupsRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listManagedDatabaseGroupsRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroupCollection",
                    bodyModel: "model.ManagedDatabaseGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the Managed Database for a specific ID or the list of Managed Databases in a specific compartment.
     * Managed Databases can also be filtered based on the name parameter. Only one of the parameters, ID or name
     * should be provided. If none of these parameters is provided, all the Managed Databases in the compartment are listed.
     *
     * @param ListManagedDatabasesRequest
     * @return ListManagedDatabasesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListManagedDatabases.ts.html |here} to see how to use ListManagedDatabases API.
     */
    listManagedDatabases(listManagedDatabasesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listManagedDatabases.");
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedDatabasesRequest.compartmentId,
                "id": listManagedDatabasesRequest.id,
                "name": listManagedDatabasesRequest.name,
                "page": listManagedDatabasesRequest.page,
                "limit": listManagedDatabasesRequest.limit,
                "sortBy": listManagedDatabasesRequest.sortBy,
                "sortOrder": listManagedDatabasesRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedDatabasesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listManagedDatabasesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseCollection",
                    bodyModel: "model.ManagedDatabaseCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the list of tablespaces for the specified managedDatabaseId.
     * @param ListTablespacesRequest
     * @return ListTablespacesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ListTablespaces.ts.html |here} to see how to use ListTablespaces API.
     */
    listTablespaces(listTablespacesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#listTablespaces.");
            const pathParams = {
                "{managedDatabaseId}": listTablespacesRequest.managedDatabaseId
            };
            const queryParams = {
                "name": listTablespacesRequest.name,
                "sortBy": listTablespacesRequest.sortBy,
                "sortOrder": listTablespacesRequest.sortOrder,
                "page": listTablespacesRequest.page,
                "limit": listTablespacesRequest.limit
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listTablespacesRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/tablespaces",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, listTablespacesRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "tablespaceCollection",
                    bodyModel: "model.TablespaceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a Managed Database from a Managed Database Group. Any management
     * activities that are currently running on this database will continue to
     * run to completion. However, any activities scheduled to run in the future
     * will not be performed on this database.
     *
     * @param RemoveManagedDatabaseFromManagedDatabaseGroupRequest
     * @return RemoveManagedDatabaseFromManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/RemoveManagedDatabaseFromManagedDatabaseGroup.ts.html |here} to see how to use RemoveManagedDatabaseFromManagedDatabaseGroup API.
     */
    removeManagedDatabaseFromManagedDatabaseGroup(removeManagedDatabaseFromManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#removeManagedDatabaseFromManagedDatabaseGroup.");
            const pathParams = {
                "{managedDatabaseGroupId}": removeManagedDatabaseFromManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRequestId,
                "opc-retry-token": removeManagedDatabaseFromManagedDatabaseGroupRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}/actions/removeManagedDatabase",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeManagedDatabaseFromManagedDatabaseGroupRequest.removeManagedDatabaseFromManagedDatabaseGroupDetails, "RemoveManagedDatabaseFromManagedDatabaseGroupDetails", models.RemoveManagedDatabaseFromManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, removeManagedDatabaseFromManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Resets database parameter values to their default or startup values.
     *
     * @param ResetDatabaseParametersRequest
     * @return ResetDatabaseParametersResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/ResetDatabaseParameters.ts.html |here} to see how to use ResetDatabaseParameters API.
     */
    resetDatabaseParameters(resetDatabaseParametersRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#resetDatabaseParameters.");
            const pathParams = {
                "{managedDatabaseId}": resetDatabaseParametersRequest.managedDatabaseId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": resetDatabaseParametersRequest.opcRequestId,
                "opc-retry-token": resetDatabaseParametersRequest.opcRetryToken
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabases/{managedDatabaseId}/actions/resetDatabaseParameters",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(resetDatabaseParametersRequest.resetDatabaseParametersDetails, "ResetDatabaseParametersDetails", models.ResetDatabaseParametersDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, resetDatabaseParametersRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updateDatabaseParametersResult",
                    bodyModel: "model.UpdateDatabaseParametersResult",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the Managed Database Group specified by managedDatabaseGroupId.
     *
     * @param UpdateManagedDatabaseGroupRequest
     * @return UpdateManagedDatabaseGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/1.19.2/databasemanagement/UpdateManagedDatabaseGroup.ts.html |here} to see how to use UpdateManagedDatabaseGroup API.
     */
    updateManagedDatabaseGroup(updateManagedDatabaseGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation DbManagementClient#updateManagedDatabaseGroup.");
            const pathParams = {
                "{managedDatabaseGroupId}": updateManagedDatabaseGroupRequest.managedDatabaseGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagedDatabaseGroupRequest.ifMatch,
                "opc-request-id": updateManagedDatabaseGroupRequest.opcRequestId
            };
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedDatabaseGroups/{managedDatabaseGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedDatabaseGroupRequest.updateManagedDatabaseGroupDetails, "UpdateManagedDatabaseGroupDetails", models.UpdateManagedDatabaseGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : {}, updateManagedDatabaseGroupRequest.retryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedDatabaseGroup",
                    bodyModel: "model.ManagedDatabaseGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.DbManagementClient = DbManagementClient;
DbManagementClient.serviceEndpointTemplate = "https://dbmgmt.{region}.oci.{secondLevelDomain}";
//# sourceMappingURL=client.js.map